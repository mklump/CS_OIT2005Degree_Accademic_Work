// component.cpp
#include <iostream.h>
#include "Component with registration\component.h" // Generated by MIDL
#include "registry.h" // Add This!!!

// {10000002-0000-0000-0000-000000000001}
const CLSID CLSID_CST407_Prog1= 
{0x10000002,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01}};

long g_cComponents = 0;
long g_cServerLocks = 0;

class CST407Prog1: public ISum
{
public:
	// IUnknown
	ULONG __stdcall AddRef();
	ULONG __stdcall Release();
	HRESULT __stdcall QueryInterface(REFIID riid, void** ppv);

	// ISum
	HRESULT __stdcall Sum(int x, int y, int* retval);

	CST407Prog1() : m_cRef(1) { g_cComponents++; }
	~CST407Prog1() { cout << "Component: CST407Prog1::~CCST407Prog1()" << endl, g_cComponents--; }

private:
	ULONG m_cRef;
};

class MyCalc : public ISum2
{
public:
	// IUnknown
	ULONG __stdcall AddRef();
	ULONG __stdcall Release();
	HRESULT __stdcall QueryInterface(REFIID riid, void** ppv);

	// ISum
	HRESULT __stdcall MySum(int length, int *retval, int array[]);

	MyCalc() : m_cRef(1) { g_cComponents++; }
	~MyCalc() { cout << "Component: MyCalc::~MyCalc()" << endl, g_cComponents--; }

private:
	ULONG m_cRef;
};

ULONG CST407Prog1::AddRef()
{
	cout << "Component: CST407Prog1::AddRef() m_cRef = " << m_cRef + 1 << endl;
	return ++m_cRef;
}

ULONG CST407Prog1::Release()
{
	cout << "Component: CST407Prog1::Release() m_cRef = " << m_cRef - 1 << endl;
	if(--m_cRef != 0)
		return m_cRef;
	delete this;
	return 0;
}

HRESULT CST407Prog1::QueryInterface(REFIID riid, void** ppv)
{
	if(riid == IID_IUnknown)
	{
		cout << "Component: CST407Prog1::QueryInterface() for IUnknown returning " << this << endl;
		*ppv = (IUnknown*)this;
	}
	else if(riid == IID_ISum)
	{
		cout << "Component: CST407Prog1::QueryInterface() for ISum returning " << this << endl;
		*ppv = (ISum*)this;
	}
	else 
	{
		*ppv = NULL;
		return E_NOINTERFACE;
	}
	AddRef();
	return S_OK;
}

HRESULT CST407Prog1::Sum(int x, int y, int* retval)
{
	cout << "Component: CST407Prog1::Sum() " << x << " + " << y << " = " << x + y << endl;
	*retval = x + y;
	return S_OK;
}

ULONG MyCalc::AddRef()
{
	cout << "Component: MyCalc::AddRef() m_cRef = " << m_cRef + 1 << endl;
	return ++m_cRef;
}

ULONG MyCalc::Release()
{
	cout << "Component: MyCalc::Release() m_cRef = " << m_cRef - 1 << endl;
	if(--m_cRef != 0)
		return m_cRef;
	delete this;
	return 0;
}

HRESULT MyCalc::QueryInterface(REFIID riid, void** ppv)
{
	if(riid == IID_IUnknown)
	{
		cout << "Component: MyCalc::QueryInterface() for IUnknown returning " << this << endl;
		*ppv = (IUnknown*)this;
	}
	else if(riid == IID_ISum2)
	{
		cout << "Component: MyCalc::QueryInterface() for ISum returning " << this << endl;
		*ppv = (ISum2*)this;
	}
	else 
	{
		*ppv = NULL;
		return E_NOINTERFACE;
	}
	AddRef();
	return S_OK;
}

HRESULT MyCalc::MySum(int length, int *retval, int array[] )
{
	cout << "Component : MyCalc::MySum : elements in array= " << 
		length << endl;

	int i;
	int sum = 0;

	for ( i = 0; i < length; i++ )
	{
		sum += array[i];
	}

	cout << "Component:MyCalc::MySum : returning sum=" << 
		sum << endl;

	*retval = sum;

	return S_OK;
}

class CFactory : public IClassFactory
{
public:
	// IUnknown
	ULONG __stdcall AddRef();
	ULONG __stdcall Release();
	HRESULT __stdcall QueryInterface(REFIID riid, void** ppv);

	// IClassFactory
	HRESULT __stdcall CreateInstance(IUnknown *pUnknownOuter, REFIID riid, void** ppv);
	HRESULT __stdcall LockServer(BOOL bLock);

	CFactory() : m_cRef(1) { }
	~CFactory() { }

private:
	ULONG m_cRef;
};

ULONG CFactory::AddRef()
{
	cout << "Component: CFactory::AddRef() m_cRef = " << m_cRef + 1 << endl;
	return ++m_cRef;
}

ULONG CFactory::Release()
{
	cout << "Component: CFactory::Release() m_cRef = " << m_cRef - 1 << endl;
	if(--m_cRef != 0)
		return m_cRef;
	delete this;
	return 0;
}

HRESULT CFactory::QueryInterface(REFIID riid, void** ppv)
{
	if(riid == IID_IUnknown || riid == IID_IClassFactory)
	{
		cout << "Component: CFactory::QueryInteface() for IUnknown or IClassFactory " << this << endl;
		*ppv = (IClassFactory *)this;
	}
	else
	{
		*ppv = NULL;
		return E_NOINTERFACE;
	}
	AddRef();
	return S_OK;
}

HRESULT CFactory::CreateInstance(IUnknown *pUnknownOuter, REFIID riid, void** ppv)
{
	HRESULT hr;
	if(pUnknownOuter != NULL)
		return CLASS_E_NOAGGREGATION;

	if ( riid == IID_ISum )
	{
		CST407Prog1*pProg1 = new CST407Prog1;
		cout << "Component: CFactory::CreateInstance() " << pProg1 << endl;

		if(pProg1 == NULL)
			return E_OUTOFMEMORY;

		// QueryInterface probably for IID_IUnknown
		hr = pProg1->QueryInterface(riid, ppv);
		pProg1->Release();
	}
	else if ( riid == IID_ISum2 )
	{
		MyCalc*pCalc= new MyCalc;
		cout << "Component: CFactory::CreateInstance() " << pCalc<< endl;

		if(pCalc== NULL)
			return E_OUTOFMEMORY;

		// QueryInterface probably for IID_IUnknown
		hr = pCalc->QueryInterface(riid, ppv);
		pCalc->Release();
	}
	return hr;
}

HRESULT CFactory::LockServer(BOOL bLock)
{
	if(bLock)
		g_cServerLocks++;
	else
		g_cServerLocks--;
	return S_OK;
}

HRESULT __stdcall DllCanUnloadNow()
{
	cout << "Component: DllCanUnloadNow() " << (g_cServerLocks == 0 && g_cComponents == 0 ? "Yes" : "No") << endl;
	if(g_cServerLocks == 0 && g_cComponents == 0)
		return S_OK;
	else
		return S_FALSE;
}

HRESULT __stdcall DllGetClassObject(REFCLSID clsid, REFIID riid, void** ppv)
{
	cout << "Component: DllGetClassObject" << endl;
	
	if(clsid != CLSID_CST407_Prog1)
		return CLASS_E_CLASSNOTAVAILABLE;

	CFactory* pFactory = new CFactory;
	if(pFactory == NULL)
		return E_OUTOFMEMORY;

	// QueryInterface probably for IClassFactory
	HRESULT hr = pFactory->QueryInterface(riid, ppv);
	pFactory->Release();
	return hr;
}

HRESULT __stdcall DllRegisterServer()
{
	return RegisterServer("component with registration.dll", 
											CLSID_CST407_Prog1, 
											"Calculator Sample", 
											"Component.Calc", 
											"Component.Calc.1", 
											NULL
											);
}

HRESULT __stdcall DllUnregisterServer()
{
	return UnregisterServer(
					CLSID_CST407_Prog1, 
					"Component.Calc", 
					"Component.Calc.1"
					);
}