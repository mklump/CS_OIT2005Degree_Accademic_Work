//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace ValidateOrderXML {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class PurchaseOrderDataSet : DataSet {
        
        private orderDataTable tableorder;
        
        private VendorDataTable tableVendor;
        
        private ToDataTable tableTo;
        
        private FromDataTable tableFrom;
        
        private item_1DataTable tableitem_1;
        
        private item_2DataTable tableitem_2;
        
        private item_3DataTable tableitem_3;
        
        private totalDataTable tabletotal;
        
        private DataRelation relationorder_Vendor;
        
        private DataRelation relationorder_To;
        
        private DataRelation relationorder_From;
        
        private DataRelation relationorder_item_1;
        
        private DataRelation relationorder_item_2;
        
        private DataRelation relationorder_item_3;
        
        private DataRelation relationorder_total;
        
        public PurchaseOrderDataSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected PurchaseOrderDataSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["order"] != null)) {
                    this.Tables.Add(new orderDataTable(ds.Tables["order"]));
                }
                if ((ds.Tables["Vendor"] != null)) {
                    this.Tables.Add(new VendorDataTable(ds.Tables["Vendor"]));
                }
                if ((ds.Tables["To"] != null)) {
                    this.Tables.Add(new ToDataTable(ds.Tables["To"]));
                }
                if ((ds.Tables["From"] != null)) {
                    this.Tables.Add(new FromDataTable(ds.Tables["From"]));
                }
                if ((ds.Tables["item_1"] != null)) {
                    this.Tables.Add(new item_1DataTable(ds.Tables["item_1"]));
                }
                if ((ds.Tables["item_2"] != null)) {
                    this.Tables.Add(new item_2DataTable(ds.Tables["item_2"]));
                }
                if ((ds.Tables["item_3"] != null)) {
                    this.Tables.Add(new item_3DataTable(ds.Tables["item_3"]));
                }
                if ((ds.Tables["total"] != null)) {
                    this.Tables.Add(new totalDataTable(ds.Tables["total"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public orderDataTable order {
            get {
                return this.tableorder;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VendorDataTable Vendor {
            get {
                return this.tableVendor;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ToDataTable To {
            get {
                return this.tableTo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FromDataTable From {
            get {
                return this.tableFrom;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public item_1DataTable item_1 {
            get {
                return this.tableitem_1;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public item_2DataTable item_2 {
            get {
                return this.tableitem_2;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public item_3DataTable item_3 {
            get {
                return this.tableitem_3;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public totalDataTable total {
            get {
                return this.tabletotal;
            }
        }
        
        public override DataSet Clone() {
            PurchaseOrderDataSet cln = ((PurchaseOrderDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["order"] != null)) {
                this.Tables.Add(new orderDataTable(ds.Tables["order"]));
            }
            if ((ds.Tables["Vendor"] != null)) {
                this.Tables.Add(new VendorDataTable(ds.Tables["Vendor"]));
            }
            if ((ds.Tables["To"] != null)) {
                this.Tables.Add(new ToDataTable(ds.Tables["To"]));
            }
            if ((ds.Tables["From"] != null)) {
                this.Tables.Add(new FromDataTable(ds.Tables["From"]));
            }
            if ((ds.Tables["item_1"] != null)) {
                this.Tables.Add(new item_1DataTable(ds.Tables["item_1"]));
            }
            if ((ds.Tables["item_2"] != null)) {
                this.Tables.Add(new item_2DataTable(ds.Tables["item_2"]));
            }
            if ((ds.Tables["item_3"] != null)) {
                this.Tables.Add(new item_3DataTable(ds.Tables["item_3"]));
            }
            if ((ds.Tables["total"] != null)) {
                this.Tables.Add(new totalDataTable(ds.Tables["total"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableorder = ((orderDataTable)(this.Tables["order"]));
            if ((this.tableorder != null)) {
                this.tableorder.InitVars();
            }
            this.tableVendor = ((VendorDataTable)(this.Tables["Vendor"]));
            if ((this.tableVendor != null)) {
                this.tableVendor.InitVars();
            }
            this.tableTo = ((ToDataTable)(this.Tables["To"]));
            if ((this.tableTo != null)) {
                this.tableTo.InitVars();
            }
            this.tableFrom = ((FromDataTable)(this.Tables["From"]));
            if ((this.tableFrom != null)) {
                this.tableFrom.InitVars();
            }
            this.tableitem_1 = ((item_1DataTable)(this.Tables["item_1"]));
            if ((this.tableitem_1 != null)) {
                this.tableitem_1.InitVars();
            }
            this.tableitem_2 = ((item_2DataTable)(this.Tables["item_2"]));
            if ((this.tableitem_2 != null)) {
                this.tableitem_2.InitVars();
            }
            this.tableitem_3 = ((item_3DataTable)(this.Tables["item_3"]));
            if ((this.tableitem_3 != null)) {
                this.tableitem_3.InitVars();
            }
            this.tabletotal = ((totalDataTable)(this.Tables["total"]));
            if ((this.tabletotal != null)) {
                this.tabletotal.InitVars();
            }
            this.relationorder_Vendor = this.Relations["order_Vendor"];
            this.relationorder_To = this.Relations["order_To"];
            this.relationorder_From = this.Relations["order_From"];
            this.relationorder_item_1 = this.Relations["order_item_1"];
            this.relationorder_item_2 = this.Relations["order_item_2"];
            this.relationorder_item_3 = this.Relations["order_item_3"];
            this.relationorder_total = this.Relations["order_total"];
        }
        
        private void InitClass() {
            this.DataSetName = "PurchaseOrderDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/purchase order.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableorder = new orderDataTable();
            this.Tables.Add(this.tableorder);
            this.tableVendor = new VendorDataTable();
            this.Tables.Add(this.tableVendor);
            this.tableTo = new ToDataTable();
            this.Tables.Add(this.tableTo);
            this.tableFrom = new FromDataTable();
            this.Tables.Add(this.tableFrom);
            this.tableitem_1 = new item_1DataTable();
            this.Tables.Add(this.tableitem_1);
            this.tableitem_2 = new item_2DataTable();
            this.Tables.Add(this.tableitem_2);
            this.tableitem_3 = new item_3DataTable();
            this.Tables.Add(this.tableitem_3);
            this.tabletotal = new totalDataTable();
            this.Tables.Add(this.tabletotal);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("order_Vendor", new DataColumn[] {
                        this.tableorder.order_IdColumn}, new DataColumn[] {
                        this.tableVendor.order_IdColumn});
            this.tableVendor.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("order_To", new DataColumn[] {
                        this.tableorder.order_IdColumn}, new DataColumn[] {
                        this.tableTo.order_IdColumn});
            this.tableTo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("order_From", new DataColumn[] {
                        this.tableorder.order_IdColumn}, new DataColumn[] {
                        this.tableFrom.order_IdColumn});
            this.tableFrom.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("order_item_1", new DataColumn[] {
                        this.tableorder.order_IdColumn}, new DataColumn[] {
                        this.tableitem_1.order_IdColumn});
            this.tableitem_1.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("order_item_2", new DataColumn[] {
                        this.tableorder.order_IdColumn}, new DataColumn[] {
                        this.tableitem_2.order_IdColumn});
            this.tableitem_2.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("order_item_3", new DataColumn[] {
                        this.tableorder.order_IdColumn}, new DataColumn[] {
                        this.tableitem_3.order_IdColumn});
            this.tableitem_3.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("order_total", new DataColumn[] {
                        this.tableorder.order_IdColumn}, new DataColumn[] {
                        this.tabletotal.order_IdColumn});
            this.tabletotal.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationorder_Vendor = new DataRelation("order_Vendor", new DataColumn[] {
                        this.tableorder.order_IdColumn}, new DataColumn[] {
                        this.tableVendor.order_IdColumn}, false);
            this.relationorder_Vendor.Nested = true;
            this.Relations.Add(this.relationorder_Vendor);
            this.relationorder_To = new DataRelation("order_To", new DataColumn[] {
                        this.tableorder.order_IdColumn}, new DataColumn[] {
                        this.tableTo.order_IdColumn}, false);
            this.relationorder_To.Nested = true;
            this.Relations.Add(this.relationorder_To);
            this.relationorder_From = new DataRelation("order_From", new DataColumn[] {
                        this.tableorder.order_IdColumn}, new DataColumn[] {
                        this.tableFrom.order_IdColumn}, false);
            this.relationorder_From.Nested = true;
            this.Relations.Add(this.relationorder_From);
            this.relationorder_item_1 = new DataRelation("order_item_1", new DataColumn[] {
                        this.tableorder.order_IdColumn}, new DataColumn[] {
                        this.tableitem_1.order_IdColumn}, false);
            this.relationorder_item_1.Nested = true;
            this.Relations.Add(this.relationorder_item_1);
            this.relationorder_item_2 = new DataRelation("order_item_2", new DataColumn[] {
                        this.tableorder.order_IdColumn}, new DataColumn[] {
                        this.tableitem_2.order_IdColumn}, false);
            this.relationorder_item_2.Nested = true;
            this.Relations.Add(this.relationorder_item_2);
            this.relationorder_item_3 = new DataRelation("order_item_3", new DataColumn[] {
                        this.tableorder.order_IdColumn}, new DataColumn[] {
                        this.tableitem_3.order_IdColumn}, false);
            this.relationorder_item_3.Nested = true;
            this.Relations.Add(this.relationorder_item_3);
            this.relationorder_total = new DataRelation("order_total", new DataColumn[] {
                        this.tableorder.order_IdColumn}, new DataColumn[] {
                        this.tabletotal.order_IdColumn}, false);
            this.relationorder_total.Nested = true;
            this.Relations.Add(this.relationorder_total);
        }
        
        private bool ShouldSerializeorder() {
            return false;
        }
        
        private bool ShouldSerializeVendor() {
            return false;
        }
        
        private bool ShouldSerializeTo() {
            return false;
        }
        
        private bool ShouldSerializeFrom() {
            return false;
        }
        
        private bool ShouldSerializeitem_1() {
            return false;
        }
        
        private bool ShouldSerializeitem_2() {
            return false;
        }
        
        private bool ShouldSerializeitem_3() {
            return false;
        }
        
        private bool ShouldSerializetotal() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void orderRowChangeEventHandler(object sender, orderRowChangeEvent e);
        
        public delegate void VendorRowChangeEventHandler(object sender, VendorRowChangeEvent e);
        
        public delegate void ToRowChangeEventHandler(object sender, ToRowChangeEvent e);
        
        public delegate void FromRowChangeEventHandler(object sender, FromRowChangeEvent e);
        
        public delegate void item_1RowChangeEventHandler(object sender, item_1RowChangeEvent e);
        
        public delegate void item_2RowChangeEventHandler(object sender, item_2RowChangeEvent e);
        
        public delegate void item_3RowChangeEventHandler(object sender, item_3RowChangeEvent e);
        
        public delegate void totalRowChangeEventHandler(object sender, totalRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class orderDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPO_NUMBER;
            
            private DataColumn columnorder_Id;
            
            internal orderDataTable() : 
                    base("order") {
                this.InitClass();
            }
            
            internal orderDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PO_NUMBERColumn {
                get {
                    return this.columnPO_NUMBER;
                }
            }
            
            internal DataColumn order_IdColumn {
                get {
                    return this.columnorder_Id;
                }
            }
            
            public orderRow this[int index] {
                get {
                    return ((orderRow)(this.Rows[index]));
                }
            }
            
            public event orderRowChangeEventHandler orderRowChanged;
            
            public event orderRowChangeEventHandler orderRowChanging;
            
            public event orderRowChangeEventHandler orderRowDeleted;
            
            public event orderRowChangeEventHandler orderRowDeleting;
            
            public void AddorderRow(orderRow row) {
                this.Rows.Add(row);
            }
            
            public orderRow AddorderRow(int PO_NUMBER) {
                orderRow roworderRow = ((orderRow)(this.NewRow()));
                roworderRow.ItemArray = new object[] {
                        PO_NUMBER,
                        null};
                this.Rows.Add(roworderRow);
                return roworderRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                orderDataTable cln = ((orderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new orderDataTable();
            }
            
            internal void InitVars() {
                this.columnPO_NUMBER = this.Columns["PO_NUMBER"];
                this.columnorder_Id = this.Columns["order_Id"];
            }
            
            private void InitClass() {
                this.columnPO_NUMBER = new DataColumn("PO_NUMBER", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPO_NUMBER);
                this.columnorder_Id = new DataColumn("order_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnorder_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnorder_Id}, true));
                this.columnPO_NUMBER.Namespace = "";
                this.columnorder_Id.AutoIncrement = true;
                this.columnorder_Id.AllowDBNull = false;
                this.columnorder_Id.Unique = true;
            }
            
            public orderRow NeworderRow() {
                return ((orderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new orderRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(orderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.orderRowChanged != null)) {
                    this.orderRowChanged(this, new orderRowChangeEvent(((orderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.orderRowChanging != null)) {
                    this.orderRowChanging(this, new orderRowChangeEvent(((orderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.orderRowDeleted != null)) {
                    this.orderRowDeleted(this, new orderRowChangeEvent(((orderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.orderRowDeleting != null)) {
                    this.orderRowDeleting(this, new orderRowChangeEvent(((orderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveorderRow(orderRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class orderRow : DataRow {
            
            private orderDataTable tableorder;
            
            internal orderRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableorder = ((orderDataTable)(this.Table));
            }
            
            public int PO_NUMBER {
                get {
                    try {
                        return ((int)(this[this.tableorder.PO_NUMBERColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableorder.PO_NUMBERColumn] = value;
                }
            }
            
            public bool IsPO_NUMBERNull() {
                return this.IsNull(this.tableorder.PO_NUMBERColumn);
            }
            
            public void SetPO_NUMBERNull() {
                this[this.tableorder.PO_NUMBERColumn] = System.Convert.DBNull;
            }
            
            public VendorRow[] GetVendorRows() {
                return ((VendorRow[])(this.GetChildRows(this.Table.ChildRelations["order_Vendor"])));
            }
            
            public ToRow[] GetToRows() {
                return ((ToRow[])(this.GetChildRows(this.Table.ChildRelations["order_To"])));
            }
            
            public FromRow[] GetFromRows() {
                return ((FromRow[])(this.GetChildRows(this.Table.ChildRelations["order_From"])));
            }
            
            public item_1Row[] Getitem_1Rows() {
                return ((item_1Row[])(this.GetChildRows(this.Table.ChildRelations["order_item_1"])));
            }
            
            public item_2Row[] Getitem_2Rows() {
                return ((item_2Row[])(this.GetChildRows(this.Table.ChildRelations["order_item_2"])));
            }
            
            public item_3Row[] Getitem_3Rows() {
                return ((item_3Row[])(this.GetChildRows(this.Table.ChildRelations["order_item_3"])));
            }
            
            public totalRow[] GettotalRows() {
                return ((totalRow[])(this.GetChildRows(this.Table.ChildRelations["order_total"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class orderRowChangeEvent : EventArgs {
            
            private orderRow eventRow;
            
            private DataRowAction eventAction;
            
            public orderRowChangeEvent(orderRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public orderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VendorDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnCompany;
            
            private DataColumn columnAddress;
            
            private DataColumn columnPhone;
            
            private DataColumn columnFax;
            
            private DataColumn columnorder_Id;
            
            internal VendorDataTable() : 
                    base("Vendor") {
                this.InitClass();
            }
            
            internal VendorDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn CompanyColumn {
                get {
                    return this.columnCompany;
                }
            }
            
            internal DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            internal DataColumn order_IdColumn {
                get {
                    return this.columnorder_Id;
                }
            }
            
            public VendorRow this[int index] {
                get {
                    return ((VendorRow)(this.Rows[index]));
                }
            }
            
            public event VendorRowChangeEventHandler VendorRowChanged;
            
            public event VendorRowChangeEventHandler VendorRowChanging;
            
            public event VendorRowChangeEventHandler VendorRowDeleted;
            
            public event VendorRowChangeEventHandler VendorRowDeleting;
            
            public void AddVendorRow(VendorRow row) {
                this.Rows.Add(row);
            }
            
            public VendorRow AddVendorRow(string Name, string Company, string Address, string Phone, string Fax, orderRow parentorderRowByorder_Vendor) {
                VendorRow rowVendorRow = ((VendorRow)(this.NewRow()));
                rowVendorRow.ItemArray = new object[] {
                        Name,
                        Company,
                        Address,
                        Phone,
                        Fax,
                        parentorderRowByorder_Vendor[1]};
                this.Rows.Add(rowVendorRow);
                return rowVendorRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                VendorDataTable cln = ((VendorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new VendorDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnCompany = this.Columns["Company"];
                this.columnAddress = this.Columns["Address"];
                this.columnPhone = this.Columns["Phone"];
                this.columnFax = this.Columns["Fax"];
                this.columnorder_Id = this.Columns["order_Id"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnCompany = new DataColumn("Company", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCompany);
                this.columnAddress = new DataColumn("Address", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAddress);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPhone);
                this.columnFax = new DataColumn("Fax", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFax);
                this.columnorder_Id = new DataColumn("order_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnorder_Id);
                this.columnName.Namespace = "";
                this.columnCompany.Namespace = "";
                this.columnAddress.Namespace = "";
                this.columnPhone.Namespace = "";
                this.columnFax.Namespace = "";
            }
            
            public VendorRow NewVendorRow() {
                return ((VendorRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new VendorRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(VendorRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VendorRowChanged != null)) {
                    this.VendorRowChanged(this, new VendorRowChangeEvent(((VendorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VendorRowChanging != null)) {
                    this.VendorRowChanging(this, new VendorRowChangeEvent(((VendorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VendorRowDeleted != null)) {
                    this.VendorRowDeleted(this, new VendorRowChangeEvent(((VendorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VendorRowDeleting != null)) {
                    this.VendorRowDeleting(this, new VendorRowChangeEvent(((VendorRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVendorRow(VendorRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VendorRow : DataRow {
            
            private VendorDataTable tableVendor;
            
            internal VendorRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVendor = ((VendorDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableVendor.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendor.NameColumn] = value;
                }
            }
            
            public string Company {
                get {
                    try {
                        return ((string)(this[this.tableVendor.CompanyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendor.CompanyColumn] = value;
                }
            }
            
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableVendor.AddressColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendor.AddressColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableVendor.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendor.PhoneColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tableVendor.FaxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendor.FaxColumn] = value;
                }
            }
            
            public orderRow orderRow {
                get {
                    return ((orderRow)(this.GetParentRow(this.Table.ParentRelations["order_Vendor"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["order_Vendor"]);
                }
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableVendor.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableVendor.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCompanyNull() {
                return this.IsNull(this.tableVendor.CompanyColumn);
            }
            
            public void SetCompanyNull() {
                this[this.tableVendor.CompanyColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressNull() {
                return this.IsNull(this.tableVendor.AddressColumn);
            }
            
            public void SetAddressNull() {
                this[this.tableVendor.AddressColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableVendor.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableVendor.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsFaxNull() {
                return this.IsNull(this.tableVendor.FaxColumn);
            }
            
            public void SetFaxNull() {
                this[this.tableVendor.FaxColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VendorRowChangeEvent : EventArgs {
            
            private VendorRow eventRow;
            
            private DataRowAction eventAction;
            
            public VendorRowChangeEvent(VendorRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public VendorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ToDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnCompany;
            
            private DataColumn columnAddress;
            
            private DataColumn columnPhone;
            
            private DataColumn columnorder_Id;
            
            internal ToDataTable() : 
                    base("To") {
                this.InitClass();
            }
            
            internal ToDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn CompanyColumn {
                get {
                    return this.columnCompany;
                }
            }
            
            internal DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn order_IdColumn {
                get {
                    return this.columnorder_Id;
                }
            }
            
            public ToRow this[int index] {
                get {
                    return ((ToRow)(this.Rows[index]));
                }
            }
            
            public event ToRowChangeEventHandler ToRowChanged;
            
            public event ToRowChangeEventHandler ToRowChanging;
            
            public event ToRowChangeEventHandler ToRowDeleted;
            
            public event ToRowChangeEventHandler ToRowDeleting;
            
            public void AddToRow(ToRow row) {
                this.Rows.Add(row);
            }
            
            public ToRow AddToRow(string Name, string Company, string Address, string Phone, orderRow parentorderRowByorder_To) {
                ToRow rowToRow = ((ToRow)(this.NewRow()));
                rowToRow.ItemArray = new object[] {
                        Name,
                        Company,
                        Address,
                        Phone,
                        parentorderRowByorder_To[1]};
                this.Rows.Add(rowToRow);
                return rowToRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ToDataTable cln = ((ToDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ToDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnCompany = this.Columns["Company"];
                this.columnAddress = this.Columns["Address"];
                this.columnPhone = this.Columns["Phone"];
                this.columnorder_Id = this.Columns["order_Id"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnCompany = new DataColumn("Company", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCompany);
                this.columnAddress = new DataColumn("Address", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAddress);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPhone);
                this.columnorder_Id = new DataColumn("order_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnorder_Id);
                this.columnName.Namespace = "";
                this.columnCompany.Namespace = "";
                this.columnAddress.Namespace = "";
                this.columnPhone.Namespace = "";
            }
            
            public ToRow NewToRow() {
                return ((ToRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ToRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ToRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ToRowChanged != null)) {
                    this.ToRowChanged(this, new ToRowChangeEvent(((ToRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ToRowChanging != null)) {
                    this.ToRowChanging(this, new ToRowChangeEvent(((ToRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ToRowDeleted != null)) {
                    this.ToRowDeleted(this, new ToRowChangeEvent(((ToRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ToRowDeleting != null)) {
                    this.ToRowDeleting(this, new ToRowChangeEvent(((ToRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveToRow(ToRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ToRow : DataRow {
            
            private ToDataTable tableTo;
            
            internal ToRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTo = ((ToDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableTo.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTo.NameColumn] = value;
                }
            }
            
            public string Company {
                get {
                    try {
                        return ((string)(this[this.tableTo.CompanyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTo.CompanyColumn] = value;
                }
            }
            
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableTo.AddressColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTo.AddressColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableTo.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTo.PhoneColumn] = value;
                }
            }
            
            public orderRow orderRow {
                get {
                    return ((orderRow)(this.GetParentRow(this.Table.ParentRelations["order_To"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["order_To"]);
                }
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableTo.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableTo.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCompanyNull() {
                return this.IsNull(this.tableTo.CompanyColumn);
            }
            
            public void SetCompanyNull() {
                this[this.tableTo.CompanyColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressNull() {
                return this.IsNull(this.tableTo.AddressColumn);
            }
            
            public void SetAddressNull() {
                this[this.tableTo.AddressColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableTo.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableTo.PhoneColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ToRowChangeEvent : EventArgs {
            
            private ToRow eventRow;
            
            private DataRowAction eventAction;
            
            public ToRowChangeEvent(ToRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ToRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FromDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnCompany;
            
            private DataColumn columnAddress;
            
            private DataColumn columnPhone;
            
            private DataColumn columnorder_Id;
            
            internal FromDataTable() : 
                    base("From") {
                this.InitClass();
            }
            
            internal FromDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn CompanyColumn {
                get {
                    return this.columnCompany;
                }
            }
            
            internal DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn order_IdColumn {
                get {
                    return this.columnorder_Id;
                }
            }
            
            public FromRow this[int index] {
                get {
                    return ((FromRow)(this.Rows[index]));
                }
            }
            
            public event FromRowChangeEventHandler FromRowChanged;
            
            public event FromRowChangeEventHandler FromRowChanging;
            
            public event FromRowChangeEventHandler FromRowDeleted;
            
            public event FromRowChangeEventHandler FromRowDeleting;
            
            public void AddFromRow(FromRow row) {
                this.Rows.Add(row);
            }
            
            public FromRow AddFromRow(string Name, string Company, string Address, string Phone, orderRow parentorderRowByorder_From) {
                FromRow rowFromRow = ((FromRow)(this.NewRow()));
                rowFromRow.ItemArray = new object[] {
                        Name,
                        Company,
                        Address,
                        Phone,
                        parentorderRowByorder_From[1]};
                this.Rows.Add(rowFromRow);
                return rowFromRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FromDataTable cln = ((FromDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FromDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnCompany = this.Columns["Company"];
                this.columnAddress = this.Columns["Address"];
                this.columnPhone = this.Columns["Phone"];
                this.columnorder_Id = this.Columns["order_Id"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnCompany = new DataColumn("Company", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCompany);
                this.columnAddress = new DataColumn("Address", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAddress);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPhone);
                this.columnorder_Id = new DataColumn("order_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnorder_Id);
                this.columnName.Namespace = "";
                this.columnCompany.Namespace = "";
                this.columnAddress.Namespace = "";
                this.columnPhone.Namespace = "";
            }
            
            public FromRow NewFromRow() {
                return ((FromRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FromRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FromRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FromRowChanged != null)) {
                    this.FromRowChanged(this, new FromRowChangeEvent(((FromRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FromRowChanging != null)) {
                    this.FromRowChanging(this, new FromRowChangeEvent(((FromRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FromRowDeleted != null)) {
                    this.FromRowDeleted(this, new FromRowChangeEvent(((FromRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FromRowDeleting != null)) {
                    this.FromRowDeleting(this, new FromRowChangeEvent(((FromRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFromRow(FromRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FromRow : DataRow {
            
            private FromDataTable tableFrom;
            
            internal FromRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFrom = ((FromDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableFrom.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFrom.NameColumn] = value;
                }
            }
            
            public string Company {
                get {
                    try {
                        return ((string)(this[this.tableFrom.CompanyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFrom.CompanyColumn] = value;
                }
            }
            
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableFrom.AddressColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFrom.AddressColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableFrom.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFrom.PhoneColumn] = value;
                }
            }
            
            public orderRow orderRow {
                get {
                    return ((orderRow)(this.GetParentRow(this.Table.ParentRelations["order_From"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["order_From"]);
                }
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableFrom.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableFrom.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCompanyNull() {
                return this.IsNull(this.tableFrom.CompanyColumn);
            }
            
            public void SetCompanyNull() {
                this[this.tableFrom.CompanyColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressNull() {
                return this.IsNull(this.tableFrom.AddressColumn);
            }
            
            public void SetAddressNull() {
                this[this.tableFrom.AddressColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableFrom.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableFrom.PhoneColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FromRowChangeEvent : EventArgs {
            
            private FromRow eventRow;
            
            private DataRowAction eventAction;
            
            public FromRowChangeEvent(FromRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FromRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class item_1DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnQuantity;
            
            private DataColumn columnUnit;
            
            private DataColumn columnDescription;
            
            private DataColumn columnUnit_Price;
            
            private DataColumn columnItem_Total;
            
            private DataColumn columnorder_Id;
            
            internal item_1DataTable() : 
                    base("item_1") {
                this.InitClass();
            }
            
            internal item_1DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            internal DataColumn UnitColumn {
                get {
                    return this.columnUnit;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn Unit_PriceColumn {
                get {
                    return this.columnUnit_Price;
                }
            }
            
            internal DataColumn Item_TotalColumn {
                get {
                    return this.columnItem_Total;
                }
            }
            
            internal DataColumn order_IdColumn {
                get {
                    return this.columnorder_Id;
                }
            }
            
            public item_1Row this[int index] {
                get {
                    return ((item_1Row)(this.Rows[index]));
                }
            }
            
            public event item_1RowChangeEventHandler item_1RowChanged;
            
            public event item_1RowChangeEventHandler item_1RowChanging;
            
            public event item_1RowChangeEventHandler item_1RowDeleted;
            
            public event item_1RowChangeEventHandler item_1RowDeleting;
            
            public void Additem_1Row(item_1Row row) {
                this.Rows.Add(row);
            }
            
            public item_1Row Additem_1Row(int Quantity, int Unit, string Description, System.Double Unit_Price, System.Double Item_Total, orderRow parentorderRowByorder_item_1) {
                item_1Row rowitem_1Row = ((item_1Row)(this.NewRow()));
                rowitem_1Row.ItemArray = new object[] {
                        Quantity,
                        Unit,
                        Description,
                        Unit_Price,
                        Item_Total,
                        parentorderRowByorder_item_1[1]};
                this.Rows.Add(rowitem_1Row);
                return rowitem_1Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                item_1DataTable cln = ((item_1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new item_1DataTable();
            }
            
            internal void InitVars() {
                this.columnQuantity = this.Columns["Quantity"];
                this.columnUnit = this.Columns["Unit"];
                this.columnDescription = this.Columns["Description"];
                this.columnUnit_Price = this.Columns["Unit_Price"];
                this.columnItem_Total = this.Columns["Item_Total"];
                this.columnorder_Id = this.Columns["order_Id"];
            }
            
            private void InitClass() {
                this.columnQuantity = new DataColumn("Quantity", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnQuantity);
                this.columnUnit = new DataColumn("Unit", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUnit);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDescription);
                this.columnUnit_Price = new DataColumn("Unit_Price", typeof(System.Double), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUnit_Price);
                this.columnItem_Total = new DataColumn("Item_Total", typeof(System.Double), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnItem_Total);
                this.columnorder_Id = new DataColumn("order_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnorder_Id);
                this.columnQuantity.Namespace = "";
                this.columnUnit.Namespace = "";
                this.columnDescription.Namespace = "";
                this.columnUnit_Price.Namespace = "";
                this.columnItem_Total.Namespace = "";
            }
            
            public item_1Row Newitem_1Row() {
                return ((item_1Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new item_1Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(item_1Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.item_1RowChanged != null)) {
                    this.item_1RowChanged(this, new item_1RowChangeEvent(((item_1Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.item_1RowChanging != null)) {
                    this.item_1RowChanging(this, new item_1RowChangeEvent(((item_1Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.item_1RowDeleted != null)) {
                    this.item_1RowDeleted(this, new item_1RowChangeEvent(((item_1Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.item_1RowDeleting != null)) {
                    this.item_1RowDeleting(this, new item_1RowChangeEvent(((item_1Row)(e.Row)), e.Action));
                }
            }
            
            public void Removeitem_1Row(item_1Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class item_1Row : DataRow {
            
            private item_1DataTable tableitem_1;
            
            internal item_1Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableitem_1 = ((item_1DataTable)(this.Table));
            }
            
            public int Quantity {
                get {
                    try {
                        return ((int)(this[this.tableitem_1.QuantityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitem_1.QuantityColumn] = value;
                }
            }
            
            public int Unit {
                get {
                    try {
                        return ((int)(this[this.tableitem_1.UnitColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitem_1.UnitColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableitem_1.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitem_1.DescriptionColumn] = value;
                }
            }
            
            public System.Double Unit_Price {
                get {
                    try {
                        return ((System.Double)(this[this.tableitem_1.Unit_PriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitem_1.Unit_PriceColumn] = value;
                }
            }
            
            public System.Double Item_Total {
                get {
                    try {
                        return ((System.Double)(this[this.tableitem_1.Item_TotalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitem_1.Item_TotalColumn] = value;
                }
            }
            
            public orderRow orderRow {
                get {
                    return ((orderRow)(this.GetParentRow(this.Table.ParentRelations["order_item_1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["order_item_1"]);
                }
            }
            
            public bool IsQuantityNull() {
                return this.IsNull(this.tableitem_1.QuantityColumn);
            }
            
            public void SetQuantityNull() {
                this[this.tableitem_1.QuantityColumn] = System.Convert.DBNull;
            }
            
            public bool IsUnitNull() {
                return this.IsNull(this.tableitem_1.UnitColumn);
            }
            
            public void SetUnitNull() {
                this[this.tableitem_1.UnitColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableitem_1.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableitem_1.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsUnit_PriceNull() {
                return this.IsNull(this.tableitem_1.Unit_PriceColumn);
            }
            
            public void SetUnit_PriceNull() {
                this[this.tableitem_1.Unit_PriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsItem_TotalNull() {
                return this.IsNull(this.tableitem_1.Item_TotalColumn);
            }
            
            public void SetItem_TotalNull() {
                this[this.tableitem_1.Item_TotalColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class item_1RowChangeEvent : EventArgs {
            
            private item_1Row eventRow;
            
            private DataRowAction eventAction;
            
            public item_1RowChangeEvent(item_1Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public item_1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class item_2DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnQuantity;
            
            private DataColumn columnUnit;
            
            private DataColumn columnDescription;
            
            private DataColumn columnUnit_Price;
            
            private DataColumn columnItem_Total;
            
            private DataColumn columnorder_Id;
            
            internal item_2DataTable() : 
                    base("item_2") {
                this.InitClass();
            }
            
            internal item_2DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            internal DataColumn UnitColumn {
                get {
                    return this.columnUnit;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn Unit_PriceColumn {
                get {
                    return this.columnUnit_Price;
                }
            }
            
            internal DataColumn Item_TotalColumn {
                get {
                    return this.columnItem_Total;
                }
            }
            
            internal DataColumn order_IdColumn {
                get {
                    return this.columnorder_Id;
                }
            }
            
            public item_2Row this[int index] {
                get {
                    return ((item_2Row)(this.Rows[index]));
                }
            }
            
            public event item_2RowChangeEventHandler item_2RowChanged;
            
            public event item_2RowChangeEventHandler item_2RowChanging;
            
            public event item_2RowChangeEventHandler item_2RowDeleted;
            
            public event item_2RowChangeEventHandler item_2RowDeleting;
            
            public void Additem_2Row(item_2Row row) {
                this.Rows.Add(row);
            }
            
            public item_2Row Additem_2Row(int Quantity, int Unit, string Description, System.Double Unit_Price, System.Double Item_Total, orderRow parentorderRowByorder_item_2) {
                item_2Row rowitem_2Row = ((item_2Row)(this.NewRow()));
                rowitem_2Row.ItemArray = new object[] {
                        Quantity,
                        Unit,
                        Description,
                        Unit_Price,
                        Item_Total,
                        parentorderRowByorder_item_2[1]};
                this.Rows.Add(rowitem_2Row);
                return rowitem_2Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                item_2DataTable cln = ((item_2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new item_2DataTable();
            }
            
            internal void InitVars() {
                this.columnQuantity = this.Columns["Quantity"];
                this.columnUnit = this.Columns["Unit"];
                this.columnDescription = this.Columns["Description"];
                this.columnUnit_Price = this.Columns["Unit_Price"];
                this.columnItem_Total = this.Columns["Item_Total"];
                this.columnorder_Id = this.Columns["order_Id"];
            }
            
            private void InitClass() {
                this.columnQuantity = new DataColumn("Quantity", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnQuantity);
                this.columnUnit = new DataColumn("Unit", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUnit);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDescription);
                this.columnUnit_Price = new DataColumn("Unit_Price", typeof(System.Double), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUnit_Price);
                this.columnItem_Total = new DataColumn("Item_Total", typeof(System.Double), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnItem_Total);
                this.columnorder_Id = new DataColumn("order_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnorder_Id);
                this.columnQuantity.Namespace = "";
                this.columnUnit.Namespace = "";
                this.columnDescription.Namespace = "";
                this.columnUnit_Price.Namespace = "";
                this.columnItem_Total.Namespace = "";
            }
            
            public item_2Row Newitem_2Row() {
                return ((item_2Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new item_2Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(item_2Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.item_2RowChanged != null)) {
                    this.item_2RowChanged(this, new item_2RowChangeEvent(((item_2Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.item_2RowChanging != null)) {
                    this.item_2RowChanging(this, new item_2RowChangeEvent(((item_2Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.item_2RowDeleted != null)) {
                    this.item_2RowDeleted(this, new item_2RowChangeEvent(((item_2Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.item_2RowDeleting != null)) {
                    this.item_2RowDeleting(this, new item_2RowChangeEvent(((item_2Row)(e.Row)), e.Action));
                }
            }
            
            public void Removeitem_2Row(item_2Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class item_2Row : DataRow {
            
            private item_2DataTable tableitem_2;
            
            internal item_2Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableitem_2 = ((item_2DataTable)(this.Table));
            }
            
            public int Quantity {
                get {
                    try {
                        return ((int)(this[this.tableitem_2.QuantityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitem_2.QuantityColumn] = value;
                }
            }
            
            public int Unit {
                get {
                    try {
                        return ((int)(this[this.tableitem_2.UnitColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitem_2.UnitColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableitem_2.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitem_2.DescriptionColumn] = value;
                }
            }
            
            public System.Double Unit_Price {
                get {
                    try {
                        return ((System.Double)(this[this.tableitem_2.Unit_PriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitem_2.Unit_PriceColumn] = value;
                }
            }
            
            public System.Double Item_Total {
                get {
                    try {
                        return ((System.Double)(this[this.tableitem_2.Item_TotalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitem_2.Item_TotalColumn] = value;
                }
            }
            
            public orderRow orderRow {
                get {
                    return ((orderRow)(this.GetParentRow(this.Table.ParentRelations["order_item_2"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["order_item_2"]);
                }
            }
            
            public bool IsQuantityNull() {
                return this.IsNull(this.tableitem_2.QuantityColumn);
            }
            
            public void SetQuantityNull() {
                this[this.tableitem_2.QuantityColumn] = System.Convert.DBNull;
            }
            
            public bool IsUnitNull() {
                return this.IsNull(this.tableitem_2.UnitColumn);
            }
            
            public void SetUnitNull() {
                this[this.tableitem_2.UnitColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableitem_2.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableitem_2.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsUnit_PriceNull() {
                return this.IsNull(this.tableitem_2.Unit_PriceColumn);
            }
            
            public void SetUnit_PriceNull() {
                this[this.tableitem_2.Unit_PriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsItem_TotalNull() {
                return this.IsNull(this.tableitem_2.Item_TotalColumn);
            }
            
            public void SetItem_TotalNull() {
                this[this.tableitem_2.Item_TotalColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class item_2RowChangeEvent : EventArgs {
            
            private item_2Row eventRow;
            
            private DataRowAction eventAction;
            
            public item_2RowChangeEvent(item_2Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public item_2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class item_3DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnQuantity;
            
            private DataColumn columnUnit;
            
            private DataColumn columnDescription;
            
            private DataColumn columnUnit_Price;
            
            private DataColumn columnItem_Total;
            
            private DataColumn columnorder_Id;
            
            internal item_3DataTable() : 
                    base("item_3") {
                this.InitClass();
            }
            
            internal item_3DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            internal DataColumn UnitColumn {
                get {
                    return this.columnUnit;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn Unit_PriceColumn {
                get {
                    return this.columnUnit_Price;
                }
            }
            
            internal DataColumn Item_TotalColumn {
                get {
                    return this.columnItem_Total;
                }
            }
            
            internal DataColumn order_IdColumn {
                get {
                    return this.columnorder_Id;
                }
            }
            
            public item_3Row this[int index] {
                get {
                    return ((item_3Row)(this.Rows[index]));
                }
            }
            
            public event item_3RowChangeEventHandler item_3RowChanged;
            
            public event item_3RowChangeEventHandler item_3RowChanging;
            
            public event item_3RowChangeEventHandler item_3RowDeleted;
            
            public event item_3RowChangeEventHandler item_3RowDeleting;
            
            public void Additem_3Row(item_3Row row) {
                this.Rows.Add(row);
            }
            
            public item_3Row Additem_3Row(int Quantity, int Unit, string Description, System.Double Unit_Price, System.Double Item_Total, orderRow parentorderRowByorder_item_3) {
                item_3Row rowitem_3Row = ((item_3Row)(this.NewRow()));
                rowitem_3Row.ItemArray = new object[] {
                        Quantity,
                        Unit,
                        Description,
                        Unit_Price,
                        Item_Total,
                        parentorderRowByorder_item_3[1]};
                this.Rows.Add(rowitem_3Row);
                return rowitem_3Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                item_3DataTable cln = ((item_3DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new item_3DataTable();
            }
            
            internal void InitVars() {
                this.columnQuantity = this.Columns["Quantity"];
                this.columnUnit = this.Columns["Unit"];
                this.columnDescription = this.Columns["Description"];
                this.columnUnit_Price = this.Columns["Unit_Price"];
                this.columnItem_Total = this.Columns["Item_Total"];
                this.columnorder_Id = this.Columns["order_Id"];
            }
            
            private void InitClass() {
                this.columnQuantity = new DataColumn("Quantity", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnQuantity);
                this.columnUnit = new DataColumn("Unit", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUnit);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDescription);
                this.columnUnit_Price = new DataColumn("Unit_Price", typeof(System.Double), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUnit_Price);
                this.columnItem_Total = new DataColumn("Item_Total", typeof(System.Double), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnItem_Total);
                this.columnorder_Id = new DataColumn("order_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnorder_Id);
                this.columnQuantity.Namespace = "";
                this.columnUnit.Namespace = "";
                this.columnDescription.Namespace = "";
                this.columnUnit_Price.Namespace = "";
                this.columnItem_Total.Namespace = "";
            }
            
            public item_3Row Newitem_3Row() {
                return ((item_3Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new item_3Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(item_3Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.item_3RowChanged != null)) {
                    this.item_3RowChanged(this, new item_3RowChangeEvent(((item_3Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.item_3RowChanging != null)) {
                    this.item_3RowChanging(this, new item_3RowChangeEvent(((item_3Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.item_3RowDeleted != null)) {
                    this.item_3RowDeleted(this, new item_3RowChangeEvent(((item_3Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.item_3RowDeleting != null)) {
                    this.item_3RowDeleting(this, new item_3RowChangeEvent(((item_3Row)(e.Row)), e.Action));
                }
            }
            
            public void Removeitem_3Row(item_3Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class item_3Row : DataRow {
            
            private item_3DataTable tableitem_3;
            
            internal item_3Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableitem_3 = ((item_3DataTable)(this.Table));
            }
            
            public int Quantity {
                get {
                    try {
                        return ((int)(this[this.tableitem_3.QuantityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitem_3.QuantityColumn] = value;
                }
            }
            
            public int Unit {
                get {
                    try {
                        return ((int)(this[this.tableitem_3.UnitColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitem_3.UnitColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableitem_3.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitem_3.DescriptionColumn] = value;
                }
            }
            
            public System.Double Unit_Price {
                get {
                    try {
                        return ((System.Double)(this[this.tableitem_3.Unit_PriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitem_3.Unit_PriceColumn] = value;
                }
            }
            
            public System.Double Item_Total {
                get {
                    try {
                        return ((System.Double)(this[this.tableitem_3.Item_TotalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitem_3.Item_TotalColumn] = value;
                }
            }
            
            public orderRow orderRow {
                get {
                    return ((orderRow)(this.GetParentRow(this.Table.ParentRelations["order_item_3"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["order_item_3"]);
                }
            }
            
            public bool IsQuantityNull() {
                return this.IsNull(this.tableitem_3.QuantityColumn);
            }
            
            public void SetQuantityNull() {
                this[this.tableitem_3.QuantityColumn] = System.Convert.DBNull;
            }
            
            public bool IsUnitNull() {
                return this.IsNull(this.tableitem_3.UnitColumn);
            }
            
            public void SetUnitNull() {
                this[this.tableitem_3.UnitColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableitem_3.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableitem_3.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsUnit_PriceNull() {
                return this.IsNull(this.tableitem_3.Unit_PriceColumn);
            }
            
            public void SetUnit_PriceNull() {
                this[this.tableitem_3.Unit_PriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsItem_TotalNull() {
                return this.IsNull(this.tableitem_3.Item_TotalColumn);
            }
            
            public void SetItem_TotalNull() {
                this[this.tableitem_3.Item_TotalColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class item_3RowChangeEvent : EventArgs {
            
            private item_3Row eventRow;
            
            private DataRowAction eventAction;
            
            public item_3RowChangeEvent(item_3Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public item_3Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class totalDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnvalue;
            
            private DataColumn columnorder_Id;
            
            internal totalDataTable() : 
                    base("total") {
                this.InitClass();
            }
            
            internal totalDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            internal DataColumn order_IdColumn {
                get {
                    return this.columnorder_Id;
                }
            }
            
            public totalRow this[int index] {
                get {
                    return ((totalRow)(this.Rows[index]));
                }
            }
            
            public event totalRowChangeEventHandler totalRowChanged;
            
            public event totalRowChangeEventHandler totalRowChanging;
            
            public event totalRowChangeEventHandler totalRowDeleted;
            
            public event totalRowChangeEventHandler totalRowDeleting;
            
            public void AddtotalRow(totalRow row) {
                this.Rows.Add(row);
            }
            
            public totalRow AddtotalRow(System.Double value, orderRow parentorderRowByorder_total) {
                totalRow rowtotalRow = ((totalRow)(this.NewRow()));
                rowtotalRow.ItemArray = new object[] {
                        value,
                        parentorderRowByorder_total[1]};
                this.Rows.Add(rowtotalRow);
                return rowtotalRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                totalDataTable cln = ((totalDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new totalDataTable();
            }
            
            internal void InitVars() {
                this.columnvalue = this.Columns["value"];
                this.columnorder_Id = this.Columns["order_Id"];
            }
            
            private void InitClass() {
                this.columnvalue = new DataColumn("value", typeof(System.Double), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnvalue);
                this.columnorder_Id = new DataColumn("order_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnorder_Id);
                this.columnvalue.Namespace = "";
            }
            
            public totalRow NewtotalRow() {
                return ((totalRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new totalRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(totalRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.totalRowChanged != null)) {
                    this.totalRowChanged(this, new totalRowChangeEvent(((totalRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.totalRowChanging != null)) {
                    this.totalRowChanging(this, new totalRowChangeEvent(((totalRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.totalRowDeleted != null)) {
                    this.totalRowDeleted(this, new totalRowChangeEvent(((totalRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.totalRowDeleting != null)) {
                    this.totalRowDeleting(this, new totalRowChangeEvent(((totalRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovetotalRow(totalRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class totalRow : DataRow {
            
            private totalDataTable tabletotal;
            
            internal totalRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletotal = ((totalDataTable)(this.Table));
            }
            
            public System.Double value {
                get {
                    try {
                        return ((System.Double)(this[this.tabletotal.valueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletotal.valueColumn] = value;
                }
            }
            
            public orderRow orderRow {
                get {
                    return ((orderRow)(this.GetParentRow(this.Table.ParentRelations["order_total"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["order_total"]);
                }
            }
            
            public bool IsvalueNull() {
                return this.IsNull(this.tabletotal.valueColumn);
            }
            
            public void SetvalueNull() {
                this[this.tabletotal.valueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class totalRowChangeEvent : EventArgs {
            
            private totalRow eventRow;
            
            private DataRowAction eventAction;
            
            public totalRowChangeEvent(totalRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public totalRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
