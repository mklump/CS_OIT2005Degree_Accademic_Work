//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.573.
// 
namespace TemperatureClient.net.xmethods.www {
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TemperatureBinding", Namespace="http://www.xmethods.net/sd/TemperatureService.wsdl")]
    public class TemperatureService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public TemperatureService() {
            this.Url = "http://services.xmethods.net:80/soap/servlet/rpcrouter";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:xmethods-Temperature", ResponseNamespace="urn:xmethods-Temperature")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public System.Single getTemp(string zipcode) {
            object[] results = this.Invoke("getTemp", new object[] {
                        zipcode});
            return ((System.Single)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetTemp(string zipcode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getTemp", new object[] {
                        zipcode}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Single EndgetTemp(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Single)(results[0]));
        }
    }
}
