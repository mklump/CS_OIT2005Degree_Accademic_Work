//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace XmlDeserialization_Practise {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class NewDataSet : DataSet {
        
        private orderDataTable tableorder;
        
        private SendToAddressDataTable tableSendToAddress;
        
        private itemsDataTable tableitems;
        
        private itemDataTable tableitem;
        
        private DataRelation relationitems_item;
        
        private DataRelation relationorder_SendToAddress;
        
        private DataRelation relationorder_items;
        
        public NewDataSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected NewDataSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["order"] != null)) {
                    this.Tables.Add(new orderDataTable(ds.Tables["order"]));
                }
                if ((ds.Tables["SendToAddress"] != null)) {
                    this.Tables.Add(new SendToAddressDataTable(ds.Tables["SendToAddress"]));
                }
                if ((ds.Tables["items"] != null)) {
                    this.Tables.Add(new itemsDataTable(ds.Tables["items"]));
                }
                if ((ds.Tables["item"] != null)) {
                    this.Tables.Add(new itemDataTable(ds.Tables["item"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public orderDataTable order {
            get {
                return this.tableorder;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SendToAddressDataTable SendToAddress {
            get {
                return this.tableSendToAddress;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public itemsDataTable items {
            get {
                return this.tableitems;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public itemDataTable item {
            get {
                return this.tableitem;
            }
        }
        
        public override DataSet Clone() {
            NewDataSet cln = ((NewDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["order"] != null)) {
                this.Tables.Add(new orderDataTable(ds.Tables["order"]));
            }
            if ((ds.Tables["SendToAddress"] != null)) {
                this.Tables.Add(new SendToAddressDataTable(ds.Tables["SendToAddress"]));
            }
            if ((ds.Tables["items"] != null)) {
                this.Tables.Add(new itemsDataTable(ds.Tables["items"]));
            }
            if ((ds.Tables["item"] != null)) {
                this.Tables.Add(new itemDataTable(ds.Tables["item"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableorder = ((orderDataTable)(this.Tables["order"]));
            if ((this.tableorder != null)) {
                this.tableorder.InitVars();
            }
            this.tableSendToAddress = ((SendToAddressDataTable)(this.Tables["SendToAddress"]));
            if ((this.tableSendToAddress != null)) {
                this.tableSendToAddress.InitVars();
            }
            this.tableitems = ((itemsDataTable)(this.Tables["items"]));
            if ((this.tableitems != null)) {
                this.tableitems.InitVars();
            }
            this.tableitem = ((itemDataTable)(this.Tables["item"]));
            if ((this.tableitem != null)) {
                this.tableitem.InitVars();
            }
            this.relationitems_item = this.Relations["items_item"];
            this.relationorder_SendToAddress = this.Relations["order_SendToAddress"];
            this.relationorder_items = this.Relations["order_items"];
        }
        
        private void InitClass() {
            this.DataSetName = "NewDataSet";
            this.Prefix = "";
            this.Namespace = "http://mycompany.com";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableorder = new orderDataTable();
            this.Tables.Add(this.tableorder);
            this.tableSendToAddress = new SendToAddressDataTable();
            this.Tables.Add(this.tableSendToAddress);
            this.tableitems = new itemsDataTable();
            this.Tables.Add(this.tableitems);
            this.tableitem = new itemDataTable();
            this.Tables.Add(this.tableitem);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("order_SendToAddress", new DataColumn[] {
                        this.tableorder.order_IdColumn}, new DataColumn[] {
                        this.tableSendToAddress.order_IdColumn});
            this.tableSendToAddress.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("order_items", new DataColumn[] {
                        this.tableorder.order_IdColumn}, new DataColumn[] {
                        this.tableitems.order_IdColumn});
            this.tableitems.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("items_item", new DataColumn[] {
                        this.tableitems.items_IdColumn}, new DataColumn[] {
                        this.tableitem.items_IdColumn});
            this.tableitem.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationitems_item = new DataRelation("items_item", new DataColumn[] {
                        this.tableitems.items_IdColumn}, new DataColumn[] {
                        this.tableitem.items_IdColumn}, false);
            this.relationitems_item.Nested = true;
            this.Relations.Add(this.relationitems_item);
            this.relationorder_SendToAddress = new DataRelation("order_SendToAddress", new DataColumn[] {
                        this.tableorder.order_IdColumn}, new DataColumn[] {
                        this.tableSendToAddress.order_IdColumn}, false);
            this.relationorder_SendToAddress.Nested = true;
            this.Relations.Add(this.relationorder_SendToAddress);
            this.relationorder_items = new DataRelation("order_items", new DataColumn[] {
                        this.tableorder.order_IdColumn}, new DataColumn[] {
                        this.tableitems.order_IdColumn}, false);
            this.relationorder_items.Nested = true;
            this.Relations.Add(this.relationorder_items);
        }
        
        private bool ShouldSerializeorder() {
            return false;
        }
        
        private bool ShouldSerializeSendToAddress() {
            return false;
        }
        
        private bool ShouldSerializeitems() {
            return false;
        }
        
        private bool ShouldSerializeitem() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void orderRowChangeEventHandler(object sender, orderRowChangeEvent e);
        
        public delegate void SendToAddressRowChangeEventHandler(object sender, SendToAddressRowChangeEvent e);
        
        public delegate void itemsRowChangeEventHandler(object sender, itemsRowChangeEvent e);
        
        public delegate void itemRowChangeEventHandler(object sender, itemRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class orderDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnorderNum;
            
            private DataColumn columnorder_Id;
            
            internal orderDataTable() : 
                    base("order") {
                this.InitClass();
            }
            
            internal orderDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn orderNumColumn {
                get {
                    return this.columnorderNum;
                }
            }
            
            internal DataColumn order_IdColumn {
                get {
                    return this.columnorder_Id;
                }
            }
            
            public orderRow this[int index] {
                get {
                    return ((orderRow)(this.Rows[index]));
                }
            }
            
            public event orderRowChangeEventHandler orderRowChanged;
            
            public event orderRowChangeEventHandler orderRowChanging;
            
            public event orderRowChangeEventHandler orderRowDeleted;
            
            public event orderRowChangeEventHandler orderRowDeleting;
            
            public void AddorderRow(orderRow row) {
                this.Rows.Add(row);
            }
            
            public orderRow AddorderRow(string orderNum) {
                orderRow roworderRow = ((orderRow)(this.NewRow()));
                roworderRow.ItemArray = new object[] {
                        orderNum,
                        null};
                this.Rows.Add(roworderRow);
                return roworderRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                orderDataTable cln = ((orderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new orderDataTable();
            }
            
            internal void InitVars() {
                this.columnorderNum = this.Columns["orderNum"];
                this.columnorder_Id = this.Columns["order_Id"];
            }
            
            private void InitClass() {
                this.columnorderNum = new DataColumn("orderNum", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnorderNum);
                this.columnorder_Id = new DataColumn("order_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnorder_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnorder_Id}, true));
                this.columnorder_Id.AutoIncrement = true;
                this.columnorder_Id.AllowDBNull = false;
                this.columnorder_Id.Unique = true;
            }
            
            public orderRow NeworderRow() {
                return ((orderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new orderRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(orderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.orderRowChanged != null)) {
                    this.orderRowChanged(this, new orderRowChangeEvent(((orderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.orderRowChanging != null)) {
                    this.orderRowChanging(this, new orderRowChangeEvent(((orderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.orderRowDeleted != null)) {
                    this.orderRowDeleted(this, new orderRowChangeEvent(((orderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.orderRowDeleting != null)) {
                    this.orderRowDeleting(this, new orderRowChangeEvent(((orderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveorderRow(orderRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class orderRow : DataRow {
            
            private orderDataTable tableorder;
            
            internal orderRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableorder = ((orderDataTable)(this.Table));
            }
            
            public string orderNum {
                get {
                    try {
                        return ((string)(this[this.tableorder.orderNumColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableorder.orderNumColumn] = value;
                }
            }
            
            public bool IsorderNumNull() {
                return this.IsNull(this.tableorder.orderNumColumn);
            }
            
            public void SetorderNumNull() {
                this[this.tableorder.orderNumColumn] = System.Convert.DBNull;
            }
            
            public SendToAddressRow[] GetSendToAddressRows() {
                return ((SendToAddressRow[])(this.GetChildRows(this.Table.ChildRelations["order_SendToAddress"])));
            }
            
            public itemsRow[] GetitemsRows() {
                return ((itemsRow[])(this.GetChildRows(this.Table.ChildRelations["order_items"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class orderRowChangeEvent : EventArgs {
            
            private orderRow eventRow;
            
            private DataRowAction eventAction;
            
            public orderRowChangeEvent(orderRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public orderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SendToAddressDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnstreet;
            
            private DataColumn columncity;
            
            private DataColumn columnstate;
            
            private DataColumn columnorder_Id;
            
            internal SendToAddressDataTable() : 
                    base("SendToAddress") {
                this.InitClass();
            }
            
            internal SendToAddressDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn streetColumn {
                get {
                    return this.columnstreet;
                }
            }
            
            internal DataColumn cityColumn {
                get {
                    return this.columncity;
                }
            }
            
            internal DataColumn stateColumn {
                get {
                    return this.columnstate;
                }
            }
            
            internal DataColumn order_IdColumn {
                get {
                    return this.columnorder_Id;
                }
            }
            
            public SendToAddressRow this[int index] {
                get {
                    return ((SendToAddressRow)(this.Rows[index]));
                }
            }
            
            public event SendToAddressRowChangeEventHandler SendToAddressRowChanged;
            
            public event SendToAddressRowChangeEventHandler SendToAddressRowChanging;
            
            public event SendToAddressRowChangeEventHandler SendToAddressRowDeleted;
            
            public event SendToAddressRowChangeEventHandler SendToAddressRowDeleting;
            
            public void AddSendToAddressRow(SendToAddressRow row) {
                this.Rows.Add(row);
            }
            
            public SendToAddressRow AddSendToAddressRow(string street, string city, string state, orderRow parentorderRowByorder_SendToAddress) {
                SendToAddressRow rowSendToAddressRow = ((SendToAddressRow)(this.NewRow()));
                rowSendToAddressRow.ItemArray = new object[] {
                        street,
                        city,
                        state,
                        parentorderRowByorder_SendToAddress[1]};
                this.Rows.Add(rowSendToAddressRow);
                return rowSendToAddressRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SendToAddressDataTable cln = ((SendToAddressDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SendToAddressDataTable();
            }
            
            internal void InitVars() {
                this.columnstreet = this.Columns["street"];
                this.columncity = this.Columns["city"];
                this.columnstate = this.Columns["state"];
                this.columnorder_Id = this.Columns["order_Id"];
            }
            
            private void InitClass() {
                this.columnstreet = new DataColumn("street", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstreet);
                this.columncity = new DataColumn("city", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncity);
                this.columnstate = new DataColumn("state", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstate);
                this.columnorder_Id = new DataColumn("order_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnorder_Id);
            }
            
            public SendToAddressRow NewSendToAddressRow() {
                return ((SendToAddressRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SendToAddressRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SendToAddressRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SendToAddressRowChanged != null)) {
                    this.SendToAddressRowChanged(this, new SendToAddressRowChangeEvent(((SendToAddressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SendToAddressRowChanging != null)) {
                    this.SendToAddressRowChanging(this, new SendToAddressRowChangeEvent(((SendToAddressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SendToAddressRowDeleted != null)) {
                    this.SendToAddressRowDeleted(this, new SendToAddressRowChangeEvent(((SendToAddressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SendToAddressRowDeleting != null)) {
                    this.SendToAddressRowDeleting(this, new SendToAddressRowChangeEvent(((SendToAddressRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSendToAddressRow(SendToAddressRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SendToAddressRow : DataRow {
            
            private SendToAddressDataTable tableSendToAddress;
            
            internal SendToAddressRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSendToAddress = ((SendToAddressDataTable)(this.Table));
            }
            
            public string street {
                get {
                    try {
                        return ((string)(this[this.tableSendToAddress.streetColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSendToAddress.streetColumn] = value;
                }
            }
            
            public string city {
                get {
                    try {
                        return ((string)(this[this.tableSendToAddress.cityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSendToAddress.cityColumn] = value;
                }
            }
            
            public string state {
                get {
                    try {
                        return ((string)(this[this.tableSendToAddress.stateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSendToAddress.stateColumn] = value;
                }
            }
            
            public orderRow orderRow {
                get {
                    return ((orderRow)(this.GetParentRow(this.Table.ParentRelations["order_SendToAddress"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["order_SendToAddress"]);
                }
            }
            
            public bool IsstreetNull() {
                return this.IsNull(this.tableSendToAddress.streetColumn);
            }
            
            public void SetstreetNull() {
                this[this.tableSendToAddress.streetColumn] = System.Convert.DBNull;
            }
            
            public bool IscityNull() {
                return this.IsNull(this.tableSendToAddress.cityColumn);
            }
            
            public void SetcityNull() {
                this[this.tableSendToAddress.cityColumn] = System.Convert.DBNull;
            }
            
            public bool IsstateNull() {
                return this.IsNull(this.tableSendToAddress.stateColumn);
            }
            
            public void SetstateNull() {
                this[this.tableSendToAddress.stateColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SendToAddressRowChangeEvent : EventArgs {
            
            private SendToAddressRow eventRow;
            
            private DataRowAction eventAction;
            
            public SendToAddressRowChangeEvent(SendToAddressRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SendToAddressRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class itemsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnitems_Id;
            
            private DataColumn columnorder_Id;
            
            internal itemsDataTable() : 
                    base("items") {
                this.InitClass();
            }
            
            internal itemsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn items_IdColumn {
                get {
                    return this.columnitems_Id;
                }
            }
            
            internal DataColumn order_IdColumn {
                get {
                    return this.columnorder_Id;
                }
            }
            
            public itemsRow this[int index] {
                get {
                    return ((itemsRow)(this.Rows[index]));
                }
            }
            
            public event itemsRowChangeEventHandler itemsRowChanged;
            
            public event itemsRowChangeEventHandler itemsRowChanging;
            
            public event itemsRowChangeEventHandler itemsRowDeleted;
            
            public event itemsRowChangeEventHandler itemsRowDeleting;
            
            public void AdditemsRow(itemsRow row) {
                this.Rows.Add(row);
            }
            
            public itemsRow AdditemsRow(orderRow parentorderRowByorder_items) {
                itemsRow rowitemsRow = ((itemsRow)(this.NewRow()));
                rowitemsRow.ItemArray = new object[] {
                        null,
                        parentorderRowByorder_items[1]};
                this.Rows.Add(rowitemsRow);
                return rowitemsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                itemsDataTable cln = ((itemsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new itemsDataTable();
            }
            
            internal void InitVars() {
                this.columnitems_Id = this.Columns["items_Id"];
                this.columnorder_Id = this.Columns["order_Id"];
            }
            
            private void InitClass() {
                this.columnitems_Id = new DataColumn("items_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnitems_Id);
                this.columnorder_Id = new DataColumn("order_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnorder_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnitems_Id}, true));
                this.columnitems_Id.AutoIncrement = true;
                this.columnitems_Id.AllowDBNull = false;
                this.columnitems_Id.Unique = true;
            }
            
            public itemsRow NewitemsRow() {
                return ((itemsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new itemsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(itemsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.itemsRowChanged != null)) {
                    this.itemsRowChanged(this, new itemsRowChangeEvent(((itemsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.itemsRowChanging != null)) {
                    this.itemsRowChanging(this, new itemsRowChangeEvent(((itemsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.itemsRowDeleted != null)) {
                    this.itemsRowDeleted(this, new itemsRowChangeEvent(((itemsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.itemsRowDeleting != null)) {
                    this.itemsRowDeleting(this, new itemsRowChangeEvent(((itemsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveitemsRow(itemsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class itemsRow : DataRow {
            
            private itemsDataTable tableitems;
            
            internal itemsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableitems = ((itemsDataTable)(this.Table));
            }
            
            public orderRow orderRow {
                get {
                    return ((orderRow)(this.GetParentRow(this.Table.ParentRelations["order_items"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["order_items"]);
                }
            }
            
            public itemRow[] GetitemRows() {
                return ((itemRow[])(this.GetChildRows(this.Table.ChildRelations["items_item"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class itemsRowChangeEvent : EventArgs {
            
            private itemsRow eventRow;
            
            private DataRowAction eventAction;
            
            public itemsRowChangeEvent(itemsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public itemsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class itemDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnname;
            
            private DataColumn columnunit_price;
            
            private DataColumn columnnumber;
            
            private DataColumn columnitems_Id;
            
            internal itemDataTable() : 
                    base("item") {
                this.InitClass();
            }
            
            internal itemDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn unit_priceColumn {
                get {
                    return this.columnunit_price;
                }
            }
            
            internal DataColumn numberColumn {
                get {
                    return this.columnnumber;
                }
            }
            
            internal DataColumn items_IdColumn {
                get {
                    return this.columnitems_Id;
                }
            }
            
            public itemRow this[int index] {
                get {
                    return ((itemRow)(this.Rows[index]));
                }
            }
            
            public event itemRowChangeEventHandler itemRowChanged;
            
            public event itemRowChangeEventHandler itemRowChanging;
            
            public event itemRowChangeEventHandler itemRowDeleted;
            
            public event itemRowChangeEventHandler itemRowDeleting;
            
            public void AdditemRow(itemRow row) {
                this.Rows.Add(row);
            }
            
            public itemRow AdditemRow(string name, string unit_price, string number, itemsRow parentitemsRowByitems_item) {
                itemRow rowitemRow = ((itemRow)(this.NewRow()));
                rowitemRow.ItemArray = new object[] {
                        name,
                        unit_price,
                        number,
                        parentitemsRowByitems_item[0]};
                this.Rows.Add(rowitemRow);
                return rowitemRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                itemDataTable cln = ((itemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new itemDataTable();
            }
            
            internal void InitVars() {
                this.columnname = this.Columns["name"];
                this.columnunit_price = this.Columns["unit_price"];
                this.columnnumber = this.Columns["number"];
                this.columnitems_Id = this.Columns["items_Id"];
            }
            
            private void InitClass() {
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnname);
                this.columnunit_price = new DataColumn("unit_price", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnunit_price);
                this.columnnumber = new DataColumn("number", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnnumber);
                this.columnitems_Id = new DataColumn("items_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnitems_Id);
                this.columnnumber.Namespace = "";
            }
            
            public itemRow NewitemRow() {
                return ((itemRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new itemRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(itemRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.itemRowChanged != null)) {
                    this.itemRowChanged(this, new itemRowChangeEvent(((itemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.itemRowChanging != null)) {
                    this.itemRowChanging(this, new itemRowChangeEvent(((itemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.itemRowDeleted != null)) {
                    this.itemRowDeleted(this, new itemRowChangeEvent(((itemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.itemRowDeleting != null)) {
                    this.itemRowDeleting(this, new itemRowChangeEvent(((itemRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveitemRow(itemRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class itemRow : DataRow {
            
            private itemDataTable tableitem;
            
            internal itemRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableitem = ((itemDataTable)(this.Table));
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableitem.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitem.nameColumn] = value;
                }
            }
            
            public string unit_price {
                get {
                    try {
                        return ((string)(this[this.tableitem.unit_priceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitem.unit_priceColumn] = value;
                }
            }
            
            public string number {
                get {
                    try {
                        return ((string)(this[this.tableitem.numberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitem.numberColumn] = value;
                }
            }
            
            public itemsRow itemsRow {
                get {
                    return ((itemsRow)(this.GetParentRow(this.Table.ParentRelations["items_item"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["items_item"]);
                }
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tableitem.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tableitem.nameColumn] = System.Convert.DBNull;
            }
            
            public bool Isunit_priceNull() {
                return this.IsNull(this.tableitem.unit_priceColumn);
            }
            
            public void Setunit_priceNull() {
                this[this.tableitem.unit_priceColumn] = System.Convert.DBNull;
            }
            
            public bool IsnumberNull() {
                return this.IsNull(this.tableitem.numberColumn);
            }
            
            public void SetnumberNull() {
                this[this.tableitem.numberColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class itemRowChangeEvent : EventArgs {
            
            private itemRow eventRow;
            
            private DataRowAction eventAction;
            
            public itemRowChangeEvent(itemRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public itemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
