'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet3
    Inherits DataSet
    
    Private tablestores As storesDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("stores")) Is Nothing) Then
                Me.Tables.Add(New storesDataTable(ds.Tables("stores")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property stores As storesDataTable
        Get
            Return Me.tablestores
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet3 = CType(MyBase.Clone,DataSet3)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("stores")) Is Nothing) Then
            Me.Tables.Add(New storesDataTable(ds.Tables("stores")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablestores = CType(Me.Tables("stores"),storesDataTable)
        If (Not (Me.tablestores) Is Nothing) Then
            Me.tablestores.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet3"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet3.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablestores = New storesDataTable
        Me.Tables.Add(Me.tablestores)
    End Sub
    
    Private Function ShouldSerializestores() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub storesRowChangeEventHandler(ByVal sender As Object, ByVal e As storesRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class storesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnstor_id As DataColumn
        
        Private columnstor_name As DataColumn
        
        Private columnstor_address As DataColumn
        
        Private columncity As DataColumn
        
        Private columnstate As DataColumn
        
        Private columnzip As DataColumn
        
        Friend Sub New()
            MyBase.New("stores")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property stor_idColumn As DataColumn
            Get
                Return Me.columnstor_id
            End Get
        End Property
        
        Friend ReadOnly Property stor_nameColumn As DataColumn
            Get
                Return Me.columnstor_name
            End Get
        End Property
        
        Friend ReadOnly Property stor_addressColumn As DataColumn
            Get
                Return Me.columnstor_address
            End Get
        End Property
        
        Friend ReadOnly Property cityColumn As DataColumn
            Get
                Return Me.columncity
            End Get
        End Property
        
        Friend ReadOnly Property stateColumn As DataColumn
            Get
                Return Me.columnstate
            End Get
        End Property
        
        Friend ReadOnly Property zipColumn As DataColumn
            Get
                Return Me.columnzip
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As storesRow
            Get
                Return CType(Me.Rows(index),storesRow)
            End Get
        End Property
        
        Public Event storesRowChanged As storesRowChangeEventHandler
        
        Public Event storesRowChanging As storesRowChangeEventHandler
        
        Public Event storesRowDeleted As storesRowChangeEventHandler
        
        Public Event storesRowDeleting As storesRowChangeEventHandler
        
        Public Overloads Sub AddstoresRow(ByVal row As storesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddstoresRow(ByVal stor_id As String, ByVal stor_name As String, ByVal stor_address As String, ByVal city As String, ByVal state As String, ByVal zip As String) As storesRow
            Dim rowstoresRow As storesRow = CType(Me.NewRow,storesRow)
            rowstoresRow.ItemArray = New Object() {stor_id, stor_name, stor_address, city, state, zip}
            Me.Rows.Add(rowstoresRow)
            Return rowstoresRow
        End Function
        
        Public Function FindBystor_id(ByVal stor_id As String) As storesRow
            Return CType(Me.Rows.Find(New Object() {stor_id}),storesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As storesDataTable = CType(MyBase.Clone,storesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New storesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnstor_id = Me.Columns("stor_id")
            Me.columnstor_name = Me.Columns("stor_name")
            Me.columnstor_address = Me.Columns("stor_address")
            Me.columncity = Me.Columns("city")
            Me.columnstate = Me.Columns("state")
            Me.columnzip = Me.Columns("zip")
        End Sub
        
        Private Sub InitClass()
            Me.columnstor_id = New DataColumn("stor_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstor_id)
            Me.columnstor_name = New DataColumn("stor_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstor_name)
            Me.columnstor_address = New DataColumn("stor_address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstor_address)
            Me.columncity = New DataColumn("city", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncity)
            Me.columnstate = New DataColumn("state", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstate)
            Me.columnzip = New DataColumn("zip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnzip)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnstor_id}, true))
            Me.columnstor_id.AllowDBNull = false
            Me.columnstor_id.Unique = true
        End Sub
        
        Public Function NewstoresRow() As storesRow
            Return CType(Me.NewRow,storesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New storesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(storesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.storesRowChangedEvent) Is Nothing) Then
                RaiseEvent storesRowChanged(Me, New storesRowChangeEvent(CType(e.Row,storesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.storesRowChangingEvent) Is Nothing) Then
                RaiseEvent storesRowChanging(Me, New storesRowChangeEvent(CType(e.Row,storesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.storesRowDeletedEvent) Is Nothing) Then
                RaiseEvent storesRowDeleted(Me, New storesRowChangeEvent(CType(e.Row,storesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.storesRowDeletingEvent) Is Nothing) Then
                RaiseEvent storesRowDeleting(Me, New storesRowChangeEvent(CType(e.Row,storesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovestoresRow(ByVal row As storesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class storesRow
        Inherits DataRow
        
        Private tablestores As storesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablestores = CType(Me.Table,storesDataTable)
        End Sub
        
        Public Property stor_id As String
            Get
                Return CType(Me(Me.tablestores.stor_idColumn),String)
            End Get
            Set
                Me(Me.tablestores.stor_idColumn) = value
            End Set
        End Property
        
        Public Property stor_name As String
            Get
                Try 
                    Return CType(Me(Me.tablestores.stor_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestores.stor_nameColumn) = value
            End Set
        End Property
        
        Public Property stor_address As String
            Get
                Try 
                    Return CType(Me(Me.tablestores.stor_addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestores.stor_addressColumn) = value
            End Set
        End Property
        
        Public Property city As String
            Get
                Try 
                    Return CType(Me(Me.tablestores.cityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestores.cityColumn) = value
            End Set
        End Property
        
        Public Property state As String
            Get
                Try 
                    Return CType(Me(Me.tablestores.stateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestores.stateColumn) = value
            End Set
        End Property
        
        Public Property zip As String
            Get
                Try 
                    Return CType(Me(Me.tablestores.zipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestores.zipColumn) = value
            End Set
        End Property
        
        Public Function Isstor_nameNull() As Boolean
            Return Me.IsNull(Me.tablestores.stor_nameColumn)
        End Function
        
        Public Sub Setstor_nameNull()
            Me(Me.tablestores.stor_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isstor_addressNull() As Boolean
            Return Me.IsNull(Me.tablestores.stor_addressColumn)
        End Function
        
        Public Sub Setstor_addressNull()
            Me(Me.tablestores.stor_addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscityNull() As Boolean
            Return Me.IsNull(Me.tablestores.cityColumn)
        End Function
        
        Public Sub SetcityNull()
            Me(Me.tablestores.cityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstateNull() As Boolean
            Return Me.IsNull(Me.tablestores.stateColumn)
        End Function
        
        Public Sub SetstateNull()
            Me(Me.tablestores.stateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IszipNull() As Boolean
            Return Me.IsNull(Me.tablestores.zipColumn)
        End Function
        
        Public Sub SetzipNull()
            Me(Me.tablestores.zipColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class storesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As storesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As storesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As storesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
