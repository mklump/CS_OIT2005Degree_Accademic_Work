//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.209
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BenefitsCS {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsDoctors : DataSet {
        
        private doctorsDataTable tabledoctors;
        
        public dsDoctors() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsDoctors(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["doctors"] != null)) {
                    this.Tables.Add(new doctorsDataTable(ds.Tables["doctors"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public doctorsDataTable doctors {
            get {
                return this.tabledoctors;
            }
        }
        
        public override DataSet Clone() {
            dsDoctors cln = ((dsDoctors)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["doctors"] != null)) {
                this.Tables.Add(new doctorsDataTable(ds.Tables["doctors"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tabledoctors = ((doctorsDataTable)(this.Tables["doctors"]));
            if ((this.tabledoctors != null)) {
                this.tabledoctors.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsDoctors";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsDoctors.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-GB");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tabledoctors = new doctorsDataTable();
            this.Tables.Add(this.tabledoctors);
        }
        
        private bool ShouldSerializedoctors() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void doctorsRowChangeEventHandler(object sender, doctorsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class doctorsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columndr_id;
            
            private DataColumn columndr_lname;
            
            private DataColumn columndr_fname;
            
            private DataColumn columnphone;
            
            private DataColumn columnaddress;
            
            private DataColumn columncity;
            
            private DataColumn columnstate;
            
            private DataColumn columnzip;
            
            internal doctorsDataTable() : 
                    base("doctors") {
                this.InitClass();
            }
            
            internal doctorsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn dr_idColumn {
                get {
                    return this.columndr_id;
                }
            }
            
            internal DataColumn dr_lnameColumn {
                get {
                    return this.columndr_lname;
                }
            }
            
            internal DataColumn dr_fnameColumn {
                get {
                    return this.columndr_fname;
                }
            }
            
            internal DataColumn phoneColumn {
                get {
                    return this.columnphone;
                }
            }
            
            internal DataColumn addressColumn {
                get {
                    return this.columnaddress;
                }
            }
            
            internal DataColumn cityColumn {
                get {
                    return this.columncity;
                }
            }
            
            internal DataColumn stateColumn {
                get {
                    return this.columnstate;
                }
            }
            
            internal DataColumn zipColumn {
                get {
                    return this.columnzip;
                }
            }
            
            public doctorsRow this[int index] {
                get {
                    return ((doctorsRow)(this.Rows[index]));
                }
            }
            
            public event doctorsRowChangeEventHandler doctorsRowChanged;
            
            public event doctorsRowChangeEventHandler doctorsRowChanging;
            
            public event doctorsRowChangeEventHandler doctorsRowDeleted;
            
            public event doctorsRowChangeEventHandler doctorsRowDeleting;
            
            public void AdddoctorsRow(doctorsRow row) {
                this.Rows.Add(row);
            }
            
            public doctorsRow AdddoctorsRow(string dr_id, string dr_lname, string dr_fname, string phone, string address, string city, string state, string zip) {
                doctorsRow rowdoctorsRow = ((doctorsRow)(this.NewRow()));
                rowdoctorsRow.ItemArray = new object[] {
                        dr_id,
                        dr_lname,
                        dr_fname,
                        phone,
                        address,
                        city,
                        state,
                        zip};
                this.Rows.Add(rowdoctorsRow);
                return rowdoctorsRow;
            }
            
            public doctorsRow FindBydr_id(string dr_id) {
                return ((doctorsRow)(this.Rows.Find(new object[] {
                            dr_id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                doctorsDataTable cln = ((doctorsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new doctorsDataTable();
            }
            
            internal void InitVars() {
                this.columndr_id = this.Columns["dr_id"];
                this.columndr_lname = this.Columns["dr_lname"];
                this.columndr_fname = this.Columns["dr_fname"];
                this.columnphone = this.Columns["phone"];
                this.columnaddress = this.Columns["address"];
                this.columncity = this.Columns["city"];
                this.columnstate = this.Columns["state"];
                this.columnzip = this.Columns["zip"];
            }
            
            private void InitClass() {
                this.columndr_id = new DataColumn("dr_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndr_id);
                this.columndr_lname = new DataColumn("dr_lname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndr_lname);
                this.columndr_fname = new DataColumn("dr_fname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndr_fname);
                this.columnphone = new DataColumn("phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnphone);
                this.columnaddress = new DataColumn("address", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnaddress);
                this.columncity = new DataColumn("city", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncity);
                this.columnstate = new DataColumn("state", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstate);
                this.columnzip = new DataColumn("zip", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnzip);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columndr_id}, true));
                this.columndr_id.AllowDBNull = false;
                this.columndr_id.Unique = true;
                this.columndr_lname.AllowDBNull = false;
                this.columndr_fname.AllowDBNull = false;
            }
            
            public doctorsRow NewdoctorsRow() {
                return ((doctorsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new doctorsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(doctorsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.doctorsRowChanged != null)) {
                    this.doctorsRowChanged(this, new doctorsRowChangeEvent(((doctorsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.doctorsRowChanging != null)) {
                    this.doctorsRowChanging(this, new doctorsRowChangeEvent(((doctorsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.doctorsRowDeleted != null)) {
                    this.doctorsRowDeleted(this, new doctorsRowChangeEvent(((doctorsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.doctorsRowDeleting != null)) {
                    this.doctorsRowDeleting(this, new doctorsRowChangeEvent(((doctorsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovedoctorsRow(doctorsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class doctorsRow : DataRow {
            
            private doctorsDataTable tabledoctors;
            
            internal doctorsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabledoctors = ((doctorsDataTable)(this.Table));
            }
            
            public string dr_id {
                get {
                    return ((string)(this[this.tabledoctors.dr_idColumn]));
                }
                set {
                    this[this.tabledoctors.dr_idColumn] = value;
                }
            }
            
            public string dr_lname {
                get {
                    return ((string)(this[this.tabledoctors.dr_lnameColumn]));
                }
                set {
                    this[this.tabledoctors.dr_lnameColumn] = value;
                }
            }
            
            public string dr_fname {
                get {
                    return ((string)(this[this.tabledoctors.dr_fnameColumn]));
                }
                set {
                    this[this.tabledoctors.dr_fnameColumn] = value;
                }
            }
            
            public string phone {
                get {
                    try {
                        return ((string)(this[this.tabledoctors.phoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledoctors.phoneColumn] = value;
                }
            }
            
            public string address {
                get {
                    try {
                        return ((string)(this[this.tabledoctors.addressColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledoctors.addressColumn] = value;
                }
            }
            
            public string city {
                get {
                    try {
                        return ((string)(this[this.tabledoctors.cityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledoctors.cityColumn] = value;
                }
            }
            
            public string state {
                get {
                    try {
                        return ((string)(this[this.tabledoctors.stateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledoctors.stateColumn] = value;
                }
            }
            
            public string zip {
                get {
                    try {
                        return ((string)(this[this.tabledoctors.zipColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledoctors.zipColumn] = value;
                }
            }
            
            public bool IsphoneNull() {
                return this.IsNull(this.tabledoctors.phoneColumn);
            }
            
            public void SetphoneNull() {
                this[this.tabledoctors.phoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsaddressNull() {
                return this.IsNull(this.tabledoctors.addressColumn);
            }
            
            public void SetaddressNull() {
                this[this.tabledoctors.addressColumn] = System.Convert.DBNull;
            }
            
            public bool IscityNull() {
                return this.IsNull(this.tabledoctors.cityColumn);
            }
            
            public void SetcityNull() {
                this[this.tabledoctors.cityColumn] = System.Convert.DBNull;
            }
            
            public bool IsstateNull() {
                return this.IsNull(this.tabledoctors.stateColumn);
            }
            
            public void SetstateNull() {
                this[this.tabledoctors.stateColumn] = System.Convert.DBNull;
            }
            
            public bool IszipNull() {
                return this.IsNull(this.tabledoctors.zipColumn);
            }
            
            public void SetzipNull() {
                this[this.tabledoctors.zipColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class doctorsRowChangeEvent : EventArgs {
            
            private doctorsRow eventRow;
            
            private DataRowAction eventAction;
            
            public doctorsRowChangeEvent(doctorsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public doctorsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
