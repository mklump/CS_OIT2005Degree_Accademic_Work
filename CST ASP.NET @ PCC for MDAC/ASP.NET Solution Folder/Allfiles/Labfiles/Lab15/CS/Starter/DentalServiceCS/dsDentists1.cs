//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.209
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DentalServiceCS {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsDentists1 : DataSet {
        
        private DentistsDataTable tableDentists;
        
        public dsDentists1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsDentists1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Dentists"] != null)) {
                    this.Tables.Add(new DentistsDataTable(ds.Tables["Dentists"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DentistsDataTable Dentists {
            get {
                return this.tableDentists;
            }
        }
        
        public override DataSet Clone() {
            dsDentists1 cln = ((dsDentists1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Dentists"] != null)) {
                this.Tables.Add(new DentistsDataTable(ds.Tables["Dentists"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableDentists = ((DentistsDataTable)(this.Tables["Dentists"]));
            if ((this.tableDentists != null)) {
                this.tableDentists.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsDentists1";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsDentists1.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-GB");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableDentists = new DentistsDataTable();
            this.Tables.Add(this.tableDentists);
        }
        
        private bool ShouldSerializeDentists() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void DentistsRowChangeEventHandler(object sender, DentistsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DentistsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFirstName;
            
            private DataColumn columnLastName;
            
            private DataColumn columnSpeciality;
            
            private DataColumn columnAddress;
            
            private DataColumn columnCity;
            
            private DataColumn columnRegion;
            
            private DataColumn columnState;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnCountry;
            
            private DataColumn columnPhone;
            
            private DataColumn columnFax;
            
            private DataColumn columnDentistID;
            
            internal DentistsDataTable() : 
                    base("Dentists") {
                this.InitClass();
            }
            
            internal DentistsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            internal DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            internal DataColumn SpecialityColumn {
                get {
                    return this.columnSpeciality;
                }
            }
            
            internal DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            internal DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            internal DataColumn DentistIDColumn {
                get {
                    return this.columnDentistID;
                }
            }
            
            public DentistsRow this[int index] {
                get {
                    return ((DentistsRow)(this.Rows[index]));
                }
            }
            
            public event DentistsRowChangeEventHandler DentistsRowChanged;
            
            public event DentistsRowChangeEventHandler DentistsRowChanging;
            
            public event DentistsRowChangeEventHandler DentistsRowDeleted;
            
            public event DentistsRowChangeEventHandler DentistsRowDeleting;
            
            public void AddDentistsRow(DentistsRow row) {
                this.Rows.Add(row);
            }
            
            public DentistsRow AddDentistsRow(string FirstName, string LastName, string Speciality, string Address, string City, string Region, string State, string PostalCode, string Country, string Phone, string Fax, string DentistID) {
                DentistsRow rowDentistsRow = ((DentistsRow)(this.NewRow()));
                rowDentistsRow.ItemArray = new object[] {
                        FirstName,
                        LastName,
                        Speciality,
                        Address,
                        City,
                        Region,
                        State,
                        PostalCode,
                        Country,
                        Phone,
                        Fax,
                        DentistID};
                this.Rows.Add(rowDentistsRow);
                return rowDentistsRow;
            }
            
            public DentistsRow FindByDentistID(string DentistID) {
                return ((DentistsRow)(this.Rows.Find(new object[] {
                            DentistID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DentistsDataTable cln = ((DentistsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DentistsDataTable();
            }
            
            internal void InitVars() {
                this.columnFirstName = this.Columns["FirstName"];
                this.columnLastName = this.Columns["LastName"];
                this.columnSpeciality = this.Columns["Speciality"];
                this.columnAddress = this.Columns["Address"];
                this.columnCity = this.Columns["City"];
                this.columnRegion = this.Columns["Region"];
                this.columnState = this.Columns["State"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnCountry = this.Columns["Country"];
                this.columnPhone = this.Columns["Phone"];
                this.columnFax = this.Columns["Fax"];
                this.columnDentistID = this.Columns["DentistID"];
            }
            
            private void InitClass() {
                this.columnFirstName = new DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFirstName);
                this.columnLastName = new DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastName);
                this.columnSpeciality = new DataColumn("Speciality", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSpeciality);
                this.columnAddress = new DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnRegion = new DataColumn("Region", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRegion);
                this.columnState = new DataColumn("State", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnState);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnCountry = new DataColumn("Country", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountry);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnFax = new DataColumn("Fax", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFax);
                this.columnDentistID = new DataColumn("DentistID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDentistID);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnDentistID}, true));
                this.columnLastName.AllowDBNull = false;
                this.columnDentistID.AllowDBNull = false;
                this.columnDentistID.Unique = true;
            }
            
            public DentistsRow NewDentistsRow() {
                return ((DentistsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DentistsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DentistsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DentistsRowChanged != null)) {
                    this.DentistsRowChanged(this, new DentistsRowChangeEvent(((DentistsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DentistsRowChanging != null)) {
                    this.DentistsRowChanging(this, new DentistsRowChangeEvent(((DentistsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DentistsRowDeleted != null)) {
                    this.DentistsRowDeleted(this, new DentistsRowChangeEvent(((DentistsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DentistsRowDeleting != null)) {
                    this.DentistsRowDeleting(this, new DentistsRowChangeEvent(((DentistsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDentistsRow(DentistsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DentistsRow : DataRow {
            
            private DentistsDataTable tableDentists;
            
            internal DentistsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDentists = ((DentistsDataTable)(this.Table));
            }
            
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableDentists.FirstNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDentists.FirstNameColumn] = value;
                }
            }
            
            public string LastName {
                get {
                    return ((string)(this[this.tableDentists.LastNameColumn]));
                }
                set {
                    this[this.tableDentists.LastNameColumn] = value;
                }
            }
            
            public string Speciality {
                get {
                    try {
                        return ((string)(this[this.tableDentists.SpecialityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDentists.SpecialityColumn] = value;
                }
            }
            
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableDentists.AddressColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDentists.AddressColumn] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableDentists.CityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDentists.CityColumn] = value;
                }
            }
            
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableDentists.RegionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDentists.RegionColumn] = value;
                }
            }
            
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableDentists.StateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDentists.StateColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableDentists.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDentists.PostalCodeColumn] = value;
                }
            }
            
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableDentists.CountryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDentists.CountryColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableDentists.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDentists.PhoneColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tableDentists.FaxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDentists.FaxColumn] = value;
                }
            }
            
            public string DentistID {
                get {
                    return ((string)(this[this.tableDentists.DentistIDColumn]));
                }
                set {
                    this[this.tableDentists.DentistIDColumn] = value;
                }
            }
            
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableDentists.FirstNameColumn);
            }
            
            public void SetFirstNameNull() {
                this[this.tableDentists.FirstNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsSpecialityNull() {
                return this.IsNull(this.tableDentists.SpecialityColumn);
            }
            
            public void SetSpecialityNull() {
                this[this.tableDentists.SpecialityColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressNull() {
                return this.IsNull(this.tableDentists.AddressColumn);
            }
            
            public void SetAddressNull() {
                this[this.tableDentists.AddressColumn] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tableDentists.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tableDentists.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsRegionNull() {
                return this.IsNull(this.tableDentists.RegionColumn);
            }
            
            public void SetRegionNull() {
                this[this.tableDentists.RegionColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateNull() {
                return this.IsNull(this.tableDentists.StateColumn);
            }
            
            public void SetStateNull() {
                this[this.tableDentists.StateColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableDentists.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableDentists.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryNull() {
                return this.IsNull(this.tableDentists.CountryColumn);
            }
            
            public void SetCountryNull() {
                this[this.tableDentists.CountryColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableDentists.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableDentists.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsFaxNull() {
                return this.IsNull(this.tableDentists.FaxColumn);
            }
            
            public void SetFaxNull() {
                this[this.tableDentists.FaxColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DentistsRowChangeEvent : EventArgs {
            
            private DentistsRow eventRow;
            
            private DataRowAction eventAction;
            
            public DentistsRowChangeEvent(DentistsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DentistsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
