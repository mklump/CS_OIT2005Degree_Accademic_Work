'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Runtime.Serialization
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.2032.
'
Namespace localhost
    
    '<remarks/>
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="SalesManagerSoap", [Namespace]:="http://tempuri.org/")>  _
    Public Class SalesManager
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        '<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://localhost/2389/Labs/Lab07/Solution/VB/OnTheRoadWS/SalesManager.asmx"
        End Sub
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDataSet", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDataSet(ByVal iEmployeeID As Integer, ByVal sServerName As String) As NWDataSet
            Dim results() As Object = Me.Invoke("GetDataSet", New Object() {iEmployeeID, sServerName})
            Return CType(results(0),NWDataSet)
        End Function
        
        '<remarks/>
        Public Function BeginGetDataSet(ByVal iEmployeeID As Integer, ByVal sServerName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDataSet", New Object() {iEmployeeID, sServerName}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndGetDataSet(ByVal asyncResult As System.IAsyncResult) As NWDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),NWDataSet)
        End Function
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDatabase", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateDatabase(ByVal dsNorthwind As NWDataSet)
            Me.Invoke("UpdateDatabase", New Object() {dsNorthwind})
        End Sub
        
        '<remarks/>
        Public Function BeginUpdateDatabase(ByVal dsNorthwind As NWDataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateDatabase", New Object() {dsNorthwind}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Sub EndUpdateDatabase(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
    End Class
    
    <Serializable(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Diagnostics.DebuggerStepThrough(),  _
     System.ComponentModel.ToolboxItem(true)>  _
    Public Class NWDataSet
        Inherits DataSet
        
        Private tableAppSettings As AppSettingsDataTable
        
        Private tableCustomers As CustomersDataTable
        
        Private tableEmployees As EmployeesDataTable
        
        Private tableOrderDetails As OrderDetailsDataTable
        
        Private tableOrders As OrdersDataTable
        
        Private tableProducts As ProductsDataTable
        
        Private relationCustomersOrders As DataRelation
        
        Private relationEmployeesOrders As DataRelation
        
        Private relationProductsOrderDetails As DataRelation
        
        Private relationOrdersOrderDetails As DataRelation
        
        Public Sub New()
            MyBase.New
            Me.InitClass
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
            MyBase.New
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
            If (Not (strSchema) Is Nothing) Then
                Dim ds As DataSet = New DataSet
                ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("AppSettings")) Is Nothing) Then
                    Me.Tables.Add(New AppSettingsDataTable(ds.Tables("AppSettings")))
                End If
                If (Not (ds.Tables("Customers")) Is Nothing) Then
                    Me.Tables.Add(New CustomersDataTable(ds.Tables("Customers")))
                End If
                If (Not (ds.Tables("Employees")) Is Nothing) Then
                    Me.Tables.Add(New EmployeesDataTable(ds.Tables("Employees")))
                End If
                If (Not (ds.Tables("OrderDetails")) Is Nothing) Then
                    Me.Tables.Add(New OrderDetailsDataTable(ds.Tables("OrderDetails")))
                End If
                If (Not (ds.Tables("Orders")) Is Nothing) Then
                    Me.Tables.Add(New OrdersDataTable(ds.Tables("Orders")))
                End If
                If (Not (ds.Tables("Products")) Is Nothing) Then
                    Me.Tables.Add(New ProductsDataTable(ds.Tables("Products")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.InitClass
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        <System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property AppSettings As AppSettingsDataTable
            Get
                Return Me.tableAppSettings
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Customers As CustomersDataTable
            Get
                Return Me.tableCustomers
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Employees As EmployeesDataTable
            Get
                Return Me.tableEmployees
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property OrderDetails As OrderDetailsDataTable
            Get
                Return Me.tableOrderDetails
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Orders As OrdersDataTable
            Get
                Return Me.tableOrders
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Products As ProductsDataTable
            Get
                Return Me.tableProducts
            End Get
        End Property
        
        Public Overrides Function Clone() As DataSet
            Dim cln As NWDataSet = CType(MyBase.Clone,NWDataSet)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
            Me.Reset
            Dim ds As DataSet = New DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("AppSettings")) Is Nothing) Then
                Me.Tables.Add(New AppSettingsDataTable(ds.Tables("AppSettings")))
            End If
            If (Not (ds.Tables("Customers")) Is Nothing) Then
                Me.Tables.Add(New CustomersDataTable(ds.Tables("Customers")))
            End If
            If (Not (ds.Tables("Employees")) Is Nothing) Then
                Me.Tables.Add(New EmployeesDataTable(ds.Tables("Employees")))
            End If
            If (Not (ds.Tables("OrderDetails")) Is Nothing) Then
                Me.Tables.Add(New OrderDetailsDataTable(ds.Tables("OrderDetails")))
            End If
            If (Not (ds.Tables("Orders")) Is Nothing) Then
                Me.Tables.Add(New OrdersDataTable(ds.Tables("Orders")))
            End If
            If (Not (ds.Tables("Products")) Is Nothing) Then
                Me.Tables.Add(New ProductsDataTable(ds.Tables("Products")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        End Sub
        
        Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
            Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
            Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
        End Function
        
        Friend Sub InitVars()
            Me.tableAppSettings = CType(Me.Tables("AppSettings"),AppSettingsDataTable)
            If (Not (Me.tableAppSettings) Is Nothing) Then
                Me.tableAppSettings.InitVars
            End If
            Me.tableCustomers = CType(Me.Tables("Customers"),CustomersDataTable)
            If (Not (Me.tableCustomers) Is Nothing) Then
                Me.tableCustomers.InitVars
            End If
            Me.tableEmployees = CType(Me.Tables("Employees"),EmployeesDataTable)
            If (Not (Me.tableEmployees) Is Nothing) Then
                Me.tableEmployees.InitVars
            End If
            Me.tableOrderDetails = CType(Me.Tables("OrderDetails"),OrderDetailsDataTable)
            If (Not (Me.tableOrderDetails) Is Nothing) Then
                Me.tableOrderDetails.InitVars
            End If
            Me.tableOrders = CType(Me.Tables("Orders"),OrdersDataTable)
            If (Not (Me.tableOrders) Is Nothing) Then
                Me.tableOrders.InitVars
            End If
            Me.tableProducts = CType(Me.Tables("Products"),ProductsDataTable)
            If (Not (Me.tableProducts) Is Nothing) Then
                Me.tableProducts.InitVars
            End If
            Me.relationCustomersOrders = Me.Relations("CustomersOrders")
            Me.relationEmployeesOrders = Me.Relations("EmployeesOrders")
            Me.relationProductsOrderDetails = Me.Relations("ProductsOrderDetails")
            Me.relationOrdersOrderDetails = Me.Relations("OrdersOrderDetails")
        End Sub
        
        Private Sub InitClass()
            Me.DataSetName = "NWDataSet"
            Me.Prefix = ""
            Me.Namespace = "http://www.tempuri.org/NWDataSet.xsd"
            Me.Locale = New System.Globalization.CultureInfo("en-US")
            Me.CaseSensitive = false
            Me.EnforceConstraints = true
            Me.tableAppSettings = New AppSettingsDataTable
            Me.Tables.Add(Me.tableAppSettings)
            Me.tableCustomers = New CustomersDataTable
            Me.Tables.Add(Me.tableCustomers)
            Me.tableEmployees = New EmployeesDataTable
            Me.Tables.Add(Me.tableEmployees)
            Me.tableOrderDetails = New OrderDetailsDataTable
            Me.Tables.Add(Me.tableOrderDetails)
            Me.tableOrders = New OrdersDataTable
            Me.Tables.Add(Me.tableOrders)
            Me.tableProducts = New ProductsDataTable
            Me.Tables.Add(Me.tableProducts)
            Dim fkc As ForeignKeyConstraint
            fkc = New ForeignKeyConstraint("ProductsOrderDetails", New DataColumn() {Me.tableProducts.ProductIDColumn}, New DataColumn() {Me.tableOrderDetails.ProductIDColumn})
            Me.tableOrderDetails.Constraints.Add(fkc)
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
            fkc.DeleteRule = System.Data.Rule.Cascade
            fkc.UpdateRule = System.Data.Rule.Cascade
            fkc = New ForeignKeyConstraint("OrdersOrderDetails", New DataColumn() {Me.tableOrders.OrderIDColumn}, New DataColumn() {Me.tableOrderDetails.OrderIDColumn})
            Me.tableOrderDetails.Constraints.Add(fkc)
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
            fkc.DeleteRule = System.Data.Rule.Cascade
            fkc.UpdateRule = System.Data.Rule.Cascade
            fkc = New ForeignKeyConstraint("CustomersOrders", New DataColumn() {Me.tableCustomers.CustomerIDColumn}, New DataColumn() {Me.tableOrders.CustomerIDColumn})
            Me.tableOrders.Constraints.Add(fkc)
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
            fkc.DeleteRule = System.Data.Rule.Cascade
            fkc.UpdateRule = System.Data.Rule.Cascade
            fkc = New ForeignKeyConstraint("EmployeesOrders", New DataColumn() {Me.tableEmployees.EmployeeIDColumn}, New DataColumn() {Me.tableOrders.EmployeeIDColumn})
            Me.tableOrders.Constraints.Add(fkc)
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
            fkc.DeleteRule = System.Data.Rule.Cascade
            fkc.UpdateRule = System.Data.Rule.Cascade
            Me.relationCustomersOrders = New DataRelation("CustomersOrders", New DataColumn() {Me.tableCustomers.CustomerIDColumn}, New DataColumn() {Me.tableOrders.CustomerIDColumn}, false)
            Me.Relations.Add(Me.relationCustomersOrders)
            Me.relationEmployeesOrders = New DataRelation("EmployeesOrders", New DataColumn() {Me.tableEmployees.EmployeeIDColumn}, New DataColumn() {Me.tableOrders.EmployeeIDColumn}, false)
            Me.Relations.Add(Me.relationEmployeesOrders)
            Me.relationProductsOrderDetails = New DataRelation("ProductsOrderDetails", New DataColumn() {Me.tableProducts.ProductIDColumn}, New DataColumn() {Me.tableOrderDetails.ProductIDColumn}, false)
            Me.Relations.Add(Me.relationProductsOrderDetails)
            Me.relationOrdersOrderDetails = New DataRelation("OrdersOrderDetails", New DataColumn() {Me.tableOrders.OrderIDColumn}, New DataColumn() {Me.tableOrderDetails.OrderIDColumn}, false)
            Me.Relations.Add(Me.relationOrdersOrderDetails)
        End Sub
        
        Private Function ShouldSerializeAppSettings() As Boolean
            Return false
        End Function
        
        Private Function ShouldSerializeCustomers() As Boolean
            Return false
        End Function
        
        Private Function ShouldSerializeEmployees() As Boolean
            Return false
        End Function
        
        Private Function ShouldSerializeOrderDetails() As Boolean
            Return false
        End Function
        
        Private Function ShouldSerializeOrders() As Boolean
            Return false
        End Function
        
        Private Function ShouldSerializeProducts() As Boolean
            Return false
        End Function
        
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        Public Delegate Sub AppSettingsRowChangeEventHandler(ByVal sender As Object, ByVal e As AppSettingsRowChangeEvent)
        
        Public Delegate Sub CustomersRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomersRowChangeEvent)
        
        Public Delegate Sub EmployeesRowChangeEventHandler(ByVal sender As Object, ByVal e As EmployeesRowChangeEvent)
        
        Public Delegate Sub OrderDetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As OrderDetailsRowChangeEvent)
        
        Public Delegate Sub OrdersRowChangeEventHandler(ByVal sender As Object, ByVal e As OrdersRowChangeEvent)
        
        Public Delegate Sub ProductsRowChangeEventHandler(ByVal sender As Object, ByVal e As ProductsRowChangeEvent)
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class AppSettingsDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable
            
            Private columnEmployeeID As DataColumn
            
            Private columnServerName As DataColumn
            
            Friend Sub New()
                MyBase.New("AppSettings")
                Me.InitClass
            End Sub
            
            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub
            
            <System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            Friend ReadOnly Property EmployeeIDColumn As DataColumn
                Get
                    Return Me.columnEmployeeID
                End Get
            End Property
            
            Friend ReadOnly Property ServerNameColumn As DataColumn
                Get
                    Return Me.columnServerName
                End Get
            End Property
            
            Public Default ReadOnly Property Item(ByVal index As Integer) As AppSettingsRow
                Get
                    Return CType(Me.Rows(index),AppSettingsRow)
                End Get
            End Property
            
            Public Event AppSettingsRowChanged As AppSettingsRowChangeEventHandler
            
            Public Event AppSettingsRowChanging As AppSettingsRowChangeEventHandler
            
            Public Event AppSettingsRowDeleted As AppSettingsRowChangeEventHandler
            
            Public Event AppSettingsRowDeleting As AppSettingsRowChangeEventHandler
            
            Public Overloads Sub AddAppSettingsRow(ByVal row As AppSettingsRow)
                Me.Rows.Add(row)
            End Sub
            
            Public Overloads Function AddAppSettingsRow(ByVal EmployeeID As Integer, ByVal ServerName As String) As AppSettingsRow
                Dim rowAppSettingsRow As AppSettingsRow = CType(Me.NewRow,AppSettingsRow)
                rowAppSettingsRow.ItemArray = New Object() {EmployeeID, ServerName}
                Me.Rows.Add(rowAppSettingsRow)
                Return rowAppSettingsRow
            End Function
            
            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            Public Overrides Function Clone() As DataTable
                Dim cln As AppSettingsDataTable = CType(MyBase.Clone,AppSettingsDataTable)
                cln.InitVars
                Return cln
            End Function
            
            Protected Overrides Function CreateInstance() As DataTable
                Return New AppSettingsDataTable
            End Function
            
            Friend Sub InitVars()
                Me.columnEmployeeID = Me.Columns("EmployeeID")
                Me.columnServerName = Me.Columns("ServerName")
            End Sub
            
            Private Sub InitClass()
                Me.columnEmployeeID = New DataColumn("EmployeeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnEmployeeID)
                Me.columnServerName = New DataColumn("ServerName", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnServerName)
            End Sub
            
            Public Function NewAppSettingsRow() As AppSettingsRow
                Return CType(Me.NewRow,AppSettingsRow)
            End Function
            
            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New AppSettingsRow(builder)
            End Function
            
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(AppSettingsRow)
            End Function
            
            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.AppSettingsRowChangedEvent) Is Nothing) Then
                    RaiseEvent AppSettingsRowChanged(Me, New AppSettingsRowChangeEvent(CType(e.Row,AppSettingsRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.AppSettingsRowChangingEvent) Is Nothing) Then
                    RaiseEvent AppSettingsRowChanging(Me, New AppSettingsRowChangeEvent(CType(e.Row,AppSettingsRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.AppSettingsRowDeletedEvent) Is Nothing) Then
                    RaiseEvent AppSettingsRowDeleted(Me, New AppSettingsRowChangeEvent(CType(e.Row,AppSettingsRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.AppSettingsRowDeletingEvent) Is Nothing) Then
                    RaiseEvent AppSettingsRowDeleting(Me, New AppSettingsRowChangeEvent(CType(e.Row,AppSettingsRow), e.Action))
                End If
            End Sub
            
            Public Sub RemoveAppSettingsRow(ByVal row As AppSettingsRow)
                Me.Rows.Remove(row)
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class AppSettingsRow
            Inherits DataRow
            
            Private tableAppSettings As AppSettingsDataTable
            
            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tableAppSettings = CType(Me.Table,AppSettingsDataTable)
            End Sub
            
            Public Property EmployeeID As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableAppSettings.EmployeeIDColumn),Integer)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableAppSettings.EmployeeIDColumn) = value
                End Set
            End Property
            
            Public Property ServerName As String
                Get
                    Try 
                        Return CType(Me(Me.tableAppSettings.ServerNameColumn),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableAppSettings.ServerNameColumn) = value
                End Set
            End Property
            
            Public Function IsEmployeeIDNull() As Boolean
                Return Me.IsNull(Me.tableAppSettings.EmployeeIDColumn)
            End Function
            
            Public Sub SetEmployeeIDNull()
                Me(Me.tableAppSettings.EmployeeIDColumn) = System.Convert.DBNull
            End Sub
            
            Public Function IsServerNameNull() As Boolean
                Return Me.IsNull(Me.tableAppSettings.ServerNameColumn)
            End Function
            
            Public Sub SetServerNameNull()
                Me(Me.tableAppSettings.ServerNameColumn) = System.Convert.DBNull
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class AppSettingsRowChangeEvent
            Inherits EventArgs
            
            Private eventRow As AppSettingsRow
            
            Private eventAction As DataRowAction
            
            Public Sub New(ByVal row As AppSettingsRow, ByVal action As DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            Public ReadOnly Property Row As AppSettingsRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            Public ReadOnly Property Action As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class CustomersDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable
            
            Private columnCustomerID As DataColumn
            
            Private columnCompanyName As DataColumn
            
            Private columnContactName As DataColumn
            
            Private columnCity As DataColumn
            
            Private columnPhone As DataColumn
            
            Friend Sub New()
                MyBase.New("Customers")
                Me.InitClass
            End Sub
            
            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub
            
            <System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            Friend ReadOnly Property CustomerIDColumn As DataColumn
                Get
                    Return Me.columnCustomerID
                End Get
            End Property
            
            Friend ReadOnly Property CompanyNameColumn As DataColumn
                Get
                    Return Me.columnCompanyName
                End Get
            End Property
            
            Friend ReadOnly Property ContactNameColumn As DataColumn
                Get
                    Return Me.columnContactName
                End Get
            End Property
            
            Friend ReadOnly Property CityColumn As DataColumn
                Get
                    Return Me.columnCity
                End Get
            End Property
            
            Friend ReadOnly Property PhoneColumn As DataColumn
                Get
                    Return Me.columnPhone
                End Get
            End Property
            
            Public Default ReadOnly Property Item(ByVal index As Integer) As CustomersRow
                Get
                    Return CType(Me.Rows(index),CustomersRow)
                End Get
            End Property
            
            Public Event CustomersRowChanged As CustomersRowChangeEventHandler
            
            Public Event CustomersRowChanging As CustomersRowChangeEventHandler
            
            Public Event CustomersRowDeleted As CustomersRowChangeEventHandler
            
            Public Event CustomersRowDeleting As CustomersRowChangeEventHandler
            
            Public Overloads Sub AddCustomersRow(ByVal row As CustomersRow)
                Me.Rows.Add(row)
            End Sub
            
            Public Overloads Function AddCustomersRow(ByVal CustomerID As String, ByVal CompanyName As String, ByVal ContactName As String, ByVal City As String, ByVal Phone As String) As CustomersRow
                Dim rowCustomersRow As CustomersRow = CType(Me.NewRow,CustomersRow)
                rowCustomersRow.ItemArray = New Object() {CustomerID, CompanyName, ContactName, City, Phone}
                Me.Rows.Add(rowCustomersRow)
                Return rowCustomersRow
            End Function
            
            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            Public Overrides Function Clone() As DataTable
                Dim cln As CustomersDataTable = CType(MyBase.Clone,CustomersDataTable)
                cln.InitVars
                Return cln
            End Function
            
            Protected Overrides Function CreateInstance() As DataTable
                Return New CustomersDataTable
            End Function
            
            Friend Sub InitVars()
                Me.columnCustomerID = Me.Columns("CustomerID")
                Me.columnCompanyName = Me.Columns("CompanyName")
                Me.columnContactName = Me.Columns("ContactName")
                Me.columnCity = Me.Columns("City")
                Me.columnPhone = Me.Columns("Phone")
            End Sub
            
            Private Sub InitClass()
                Me.columnCustomerID = New DataColumn("CustomerID", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnCustomerID)
                Me.columnCompanyName = New DataColumn("CompanyName", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnCompanyName)
                Me.columnContactName = New DataColumn("ContactName", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnContactName)
                Me.columnCity = New DataColumn("City", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnCity)
                Me.columnPhone = New DataColumn("Phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnPhone)
                Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCustomerID}, false))
                Me.columnCustomerID.AllowDBNull = false
                Me.columnCustomerID.Unique = true
                Me.columnCompanyName.AllowDBNull = false
            End Sub
            
            Public Function NewCustomersRow() As CustomersRow
                Return CType(Me.NewRow,CustomersRow)
            End Function
            
            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New CustomersRow(builder)
            End Function
            
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(CustomersRow)
            End Function
            
            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.CustomersRowChangedEvent) Is Nothing) Then
                    RaiseEvent CustomersRowChanged(Me, New CustomersRowChangeEvent(CType(e.Row,CustomersRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.CustomersRowChangingEvent) Is Nothing) Then
                    RaiseEvent CustomersRowChanging(Me, New CustomersRowChangeEvent(CType(e.Row,CustomersRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.CustomersRowDeletedEvent) Is Nothing) Then
                    RaiseEvent CustomersRowDeleted(Me, New CustomersRowChangeEvent(CType(e.Row,CustomersRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.CustomersRowDeletingEvent) Is Nothing) Then
                    RaiseEvent CustomersRowDeleting(Me, New CustomersRowChangeEvent(CType(e.Row,CustomersRow), e.Action))
                End If
            End Sub
            
            Public Sub RemoveCustomersRow(ByVal row As CustomersRow)
                Me.Rows.Remove(row)
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class CustomersRow
            Inherits DataRow
            
            Private tableCustomers As CustomersDataTable
            
            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tableCustomers = CType(Me.Table,CustomersDataTable)
            End Sub
            
            Public Property CustomerID As String
                Get
                    Return CType(Me(Me.tableCustomers.CustomerIDColumn),String)
                End Get
                Set
                    Me(Me.tableCustomers.CustomerIDColumn) = value
                End Set
            End Property
            
            Public Property CompanyName As String
                Get
                    Return CType(Me(Me.tableCustomers.CompanyNameColumn),String)
                End Get
                Set
                    Me(Me.tableCustomers.CompanyNameColumn) = value
                End Set
            End Property
            
            Public Property ContactName As String
                Get
                    Try 
                        Return CType(Me(Me.tableCustomers.ContactNameColumn),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCustomers.ContactNameColumn) = value
                End Set
            End Property
            
            Public Property City As String
                Get
                    Try 
                        Return CType(Me(Me.tableCustomers.CityColumn),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCustomers.CityColumn) = value
                End Set
            End Property
            
            Public Property Phone As String
                Get
                    Try 
                        Return CType(Me(Me.tableCustomers.PhoneColumn),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCustomers.PhoneColumn) = value
                End Set
            End Property
            
            Public Function IsContactNameNull() As Boolean
                Return Me.IsNull(Me.tableCustomers.ContactNameColumn)
            End Function
            
            Public Sub SetContactNameNull()
                Me(Me.tableCustomers.ContactNameColumn) = System.Convert.DBNull
            End Sub
            
            Public Function IsCityNull() As Boolean
                Return Me.IsNull(Me.tableCustomers.CityColumn)
            End Function
            
            Public Sub SetCityNull()
                Me(Me.tableCustomers.CityColumn) = System.Convert.DBNull
            End Sub
            
            Public Function IsPhoneNull() As Boolean
                Return Me.IsNull(Me.tableCustomers.PhoneColumn)
            End Function
            
            Public Sub SetPhoneNull()
                Me(Me.tableCustomers.PhoneColumn) = System.Convert.DBNull
            End Sub
            
            Public Function GetOrdersRows() As OrdersRow()
                Return CType(Me.GetChildRows(Me.Table.ChildRelations("CustomersOrders")),OrdersRow())
            End Function
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class CustomersRowChangeEvent
            Inherits EventArgs
            
            Private eventRow As CustomersRow
            
            Private eventAction As DataRowAction
            
            Public Sub New(ByVal row As CustomersRow, ByVal action As DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            Public ReadOnly Property Row As CustomersRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            Public ReadOnly Property Action As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class EmployeesDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable
            
            Private columnEmployeeID As DataColumn
            
            Private columnFullName As DataColumn
            
            Friend Sub New()
                MyBase.New("Employees")
                Me.InitClass
            End Sub
            
            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub
            
            <System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            Friend ReadOnly Property EmployeeIDColumn As DataColumn
                Get
                    Return Me.columnEmployeeID
                End Get
            End Property
            
            Friend ReadOnly Property FullNameColumn As DataColumn
                Get
                    Return Me.columnFullName
                End Get
            End Property
            
            Public Default ReadOnly Property Item(ByVal index As Integer) As EmployeesRow
                Get
                    Return CType(Me.Rows(index),EmployeesRow)
                End Get
            End Property
            
            Public Event EmployeesRowChanged As EmployeesRowChangeEventHandler
            
            Public Event EmployeesRowChanging As EmployeesRowChangeEventHandler
            
            Public Event EmployeesRowDeleted As EmployeesRowChangeEventHandler
            
            Public Event EmployeesRowDeleting As EmployeesRowChangeEventHandler
            
            Public Overloads Sub AddEmployeesRow(ByVal row As EmployeesRow)
                Me.Rows.Add(row)
            End Sub
            
            Public Overloads Function AddEmployeesRow(ByVal FullName As String) As EmployeesRow
                Dim rowEmployeesRow As EmployeesRow = CType(Me.NewRow,EmployeesRow)
                rowEmployeesRow.ItemArray = New Object() {Nothing, FullName}
                Me.Rows.Add(rowEmployeesRow)
                Return rowEmployeesRow
            End Function
            
            Public Function FindByEmployeeID(ByVal EmployeeID As Integer) As EmployeesRow
                Return CType(Me.Rows.Find(New Object() {EmployeeID}),EmployeesRow)
            End Function
            
            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            Public Overrides Function Clone() As DataTable
                Dim cln As EmployeesDataTable = CType(MyBase.Clone,EmployeesDataTable)
                cln.InitVars
                Return cln
            End Function
            
            Protected Overrides Function CreateInstance() As DataTable
                Return New EmployeesDataTable
            End Function
            
            Friend Sub InitVars()
                Me.columnEmployeeID = Me.Columns("EmployeeID")
                Me.columnFullName = Me.Columns("FullName")
            End Sub
            
            Private Sub InitClass()
                Me.columnEmployeeID = New DataColumn("EmployeeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnEmployeeID)
                Me.columnFullName = New DataColumn("FullName", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnFullName)
                Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnEmployeeID}, true))
                Me.columnEmployeeID.AutoIncrement = true
                Me.columnEmployeeID.AllowDBNull = false
                Me.columnEmployeeID.ReadOnly = true
                Me.columnEmployeeID.Unique = true
                Me.columnFullName.ReadOnly = true
            End Sub
            
            Public Function NewEmployeesRow() As EmployeesRow
                Return CType(Me.NewRow,EmployeesRow)
            End Function
            
            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New EmployeesRow(builder)
            End Function
            
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(EmployeesRow)
            End Function
            
            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.EmployeesRowChangedEvent) Is Nothing) Then
                    RaiseEvent EmployeesRowChanged(Me, New EmployeesRowChangeEvent(CType(e.Row,EmployeesRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.EmployeesRowChangingEvent) Is Nothing) Then
                    RaiseEvent EmployeesRowChanging(Me, New EmployeesRowChangeEvent(CType(e.Row,EmployeesRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.EmployeesRowDeletedEvent) Is Nothing) Then
                    RaiseEvent EmployeesRowDeleted(Me, New EmployeesRowChangeEvent(CType(e.Row,EmployeesRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.EmployeesRowDeletingEvent) Is Nothing) Then
                    RaiseEvent EmployeesRowDeleting(Me, New EmployeesRowChangeEvent(CType(e.Row,EmployeesRow), e.Action))
                End If
            End Sub
            
            Public Sub RemoveEmployeesRow(ByVal row As EmployeesRow)
                Me.Rows.Remove(row)
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class EmployeesRow
            Inherits DataRow
            
            Private tableEmployees As EmployeesDataTable
            
            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tableEmployees = CType(Me.Table,EmployeesDataTable)
            End Sub
            
            Public Property EmployeeID As Integer
                Get
                    Return CType(Me(Me.tableEmployees.EmployeeIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableEmployees.EmployeeIDColumn) = value
                End Set
            End Property
            
            Public Property FullName As String
                Get
                    Try 
                        Return CType(Me(Me.tableEmployees.FullNameColumn),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableEmployees.FullNameColumn) = value
                End Set
            End Property
            
            Public Function IsFullNameNull() As Boolean
                Return Me.IsNull(Me.tableEmployees.FullNameColumn)
            End Function
            
            Public Sub SetFullNameNull()
                Me(Me.tableEmployees.FullNameColumn) = System.Convert.DBNull
            End Sub
            
            Public Function GetOrdersRows() As OrdersRow()
                Return CType(Me.GetChildRows(Me.Table.ChildRelations("EmployeesOrders")),OrdersRow())
            End Function
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class EmployeesRowChangeEvent
            Inherits EventArgs
            
            Private eventRow As EmployeesRow
            
            Private eventAction As DataRowAction
            
            Public Sub New(ByVal row As EmployeesRow, ByVal action As DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            Public ReadOnly Property Row As EmployeesRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            Public ReadOnly Property Action As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class OrderDetailsDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable
            
            Private columnOrderID As DataColumn
            
            Private columnProductID As DataColumn
            
            Private columnUnitPrice As DataColumn
            
            Private columnQuantity As DataColumn
            
            Friend Sub New()
                MyBase.New("OrderDetails")
                Me.InitClass
            End Sub
            
            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub
            
            <System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            Friend ReadOnly Property OrderIDColumn As DataColumn
                Get
                    Return Me.columnOrderID
                End Get
            End Property
            
            Friend ReadOnly Property ProductIDColumn As DataColumn
                Get
                    Return Me.columnProductID
                End Get
            End Property
            
            Friend ReadOnly Property UnitPriceColumn As DataColumn
                Get
                    Return Me.columnUnitPrice
                End Get
            End Property
            
            Friend ReadOnly Property QuantityColumn As DataColumn
                Get
                    Return Me.columnQuantity
                End Get
            End Property
            
            Public Default ReadOnly Property Item(ByVal index As Integer) As OrderDetailsRow
                Get
                    Return CType(Me.Rows(index),OrderDetailsRow)
                End Get
            End Property
            
            Public Event OrderDetailsRowChanged As OrderDetailsRowChangeEventHandler
            
            Public Event OrderDetailsRowChanging As OrderDetailsRowChangeEventHandler
            
            Public Event OrderDetailsRowDeleted As OrderDetailsRowChangeEventHandler
            
            Public Event OrderDetailsRowDeleting As OrderDetailsRowChangeEventHandler
            
            Public Overloads Sub AddOrderDetailsRow(ByVal row As OrderDetailsRow)
                Me.Rows.Add(row)
            End Sub
            
            Public Overloads Function AddOrderDetailsRow(ByVal parentOrdersRowByOrdersOrderDetails As OrdersRow, ByVal parentProductsRowByProductsOrderDetails As ProductsRow, ByVal UnitPrice As Decimal, ByVal Quantity As Short) As OrderDetailsRow
                Dim rowOrderDetailsRow As OrderDetailsRow = CType(Me.NewRow,OrderDetailsRow)
                rowOrderDetailsRow.ItemArray = New Object() {parentOrdersRowByOrdersOrderDetails(0), parentProductsRowByProductsOrderDetails(0), UnitPrice, Quantity}
                Me.Rows.Add(rowOrderDetailsRow)
                Return rowOrderDetailsRow
            End Function
            
            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            Public Overrides Function Clone() As DataTable
                Dim cln As OrderDetailsDataTable = CType(MyBase.Clone,OrderDetailsDataTable)
                cln.InitVars
                Return cln
            End Function
            
            Protected Overrides Function CreateInstance() As DataTable
                Return New OrderDetailsDataTable
            End Function
            
            Friend Sub InitVars()
                Me.columnOrderID = Me.Columns("OrderID")
                Me.columnProductID = Me.Columns("ProductID")
                Me.columnUnitPrice = Me.Columns("UnitPrice")
                Me.columnQuantity = Me.Columns("Quantity")
            End Sub
            
            Private Sub InitClass()
                Me.columnOrderID = New DataColumn("OrderID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnOrderID)
                Me.columnProductID = New DataColumn("ProductID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnProductID)
                Me.columnUnitPrice = New DataColumn("UnitPrice", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnUnitPrice)
                Me.columnQuantity = New DataColumn("Quantity", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnQuantity)
                Me.columnOrderID.AllowDBNull = false
                Me.columnProductID.AllowDBNull = false
                Me.columnUnitPrice.AllowDBNull = false
                Me.columnQuantity.AllowDBNull = false
            End Sub
            
            Public Function NewOrderDetailsRow() As OrderDetailsRow
                Return CType(Me.NewRow,OrderDetailsRow)
            End Function
            
            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New OrderDetailsRow(builder)
            End Function
            
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(OrderDetailsRow)
            End Function
            
            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.OrderDetailsRowChangedEvent) Is Nothing) Then
                    RaiseEvent OrderDetailsRowChanged(Me, New OrderDetailsRowChangeEvent(CType(e.Row,OrderDetailsRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.OrderDetailsRowChangingEvent) Is Nothing) Then
                    RaiseEvent OrderDetailsRowChanging(Me, New OrderDetailsRowChangeEvent(CType(e.Row,OrderDetailsRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.OrderDetailsRowDeletedEvent) Is Nothing) Then
                    RaiseEvent OrderDetailsRowDeleted(Me, New OrderDetailsRowChangeEvent(CType(e.Row,OrderDetailsRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.OrderDetailsRowDeletingEvent) Is Nothing) Then
                    RaiseEvent OrderDetailsRowDeleting(Me, New OrderDetailsRowChangeEvent(CType(e.Row,OrderDetailsRow), e.Action))
                End If
            End Sub
            
            Public Sub RemoveOrderDetailsRow(ByVal row As OrderDetailsRow)
                Me.Rows.Remove(row)
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class OrderDetailsRow
            Inherits DataRow
            
            Private tableOrderDetails As OrderDetailsDataTable
            
            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tableOrderDetails = CType(Me.Table,OrderDetailsDataTable)
            End Sub
            
            Public Property OrderID As Integer
                Get
                    Return CType(Me(Me.tableOrderDetails.OrderIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableOrderDetails.OrderIDColumn) = value
                End Set
            End Property
            
            Public Property ProductID As Integer
                Get
                    Return CType(Me(Me.tableOrderDetails.ProductIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableOrderDetails.ProductIDColumn) = value
                End Set
            End Property
            
            Public Property UnitPrice As Decimal
                Get
                    Return CType(Me(Me.tableOrderDetails.UnitPriceColumn),Decimal)
                End Get
                Set
                    Me(Me.tableOrderDetails.UnitPriceColumn) = value
                End Set
            End Property
            
            Public Property Quantity As Short
                Get
                    Return CType(Me(Me.tableOrderDetails.QuantityColumn),Short)
                End Get
                Set
                    Me(Me.tableOrderDetails.QuantityColumn) = value
                End Set
            End Property
            
            Public Property ProductsRow As ProductsRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("ProductsOrderDetails")),ProductsRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("ProductsOrderDetails"))
                End Set
            End Property
            
            Public Property OrdersRow As OrdersRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("OrdersOrderDetails")),OrdersRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("OrdersOrderDetails"))
                End Set
            End Property
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class OrderDetailsRowChangeEvent
            Inherits EventArgs
            
            Private eventRow As OrderDetailsRow
            
            Private eventAction As DataRowAction
            
            Public Sub New(ByVal row As OrderDetailsRow, ByVal action As DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            Public ReadOnly Property Row As OrderDetailsRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            Public ReadOnly Property Action As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class OrdersDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable
            
            Private columnOrderID As DataColumn
            
            Private columnOrderDate As DataColumn
            
            Private columnEmployeeID As DataColumn
            
            Private columnCustomerID As DataColumn
            
            Friend Sub New()
                MyBase.New("Orders")
                Me.InitClass
            End Sub
            
            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub
            
            <System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            Friend ReadOnly Property OrderIDColumn As DataColumn
                Get
                    Return Me.columnOrderID
                End Get
            End Property
            
            Friend ReadOnly Property OrderDateColumn As DataColumn
                Get
                    Return Me.columnOrderDate
                End Get
            End Property
            
            Friend ReadOnly Property EmployeeIDColumn As DataColumn
                Get
                    Return Me.columnEmployeeID
                End Get
            End Property
            
            Friend ReadOnly Property CustomerIDColumn As DataColumn
                Get
                    Return Me.columnCustomerID
                End Get
            End Property
            
            Public Default ReadOnly Property Item(ByVal index As Integer) As OrdersRow
                Get
                    Return CType(Me.Rows(index),OrdersRow)
                End Get
            End Property
            
            Public Event OrdersRowChanged As OrdersRowChangeEventHandler
            
            Public Event OrdersRowChanging As OrdersRowChangeEventHandler
            
            Public Event OrdersRowDeleted As OrdersRowChangeEventHandler
            
            Public Event OrdersRowDeleting As OrdersRowChangeEventHandler
            
            Public Overloads Sub AddOrdersRow(ByVal row As OrdersRow)
                Me.Rows.Add(row)
            End Sub
            
            Public Overloads Function AddOrdersRow(ByVal OrderDate As Date, ByVal parentEmployeesRowByEmployeesOrders As EmployeesRow, ByVal parentCustomersRowByCustomersOrders As CustomersRow) As OrdersRow
                Dim rowOrdersRow As OrdersRow = CType(Me.NewRow,OrdersRow)
                rowOrdersRow.ItemArray = New Object() {Nothing, OrderDate, parentEmployeesRowByEmployeesOrders(0), parentCustomersRowByCustomersOrders(0)}
                Me.Rows.Add(rowOrdersRow)
                Return rowOrdersRow
            End Function
            
            Public Function FindByOrderID(ByVal OrderID As Integer) As OrdersRow
                Return CType(Me.Rows.Find(New Object() {OrderID}),OrdersRow)
            End Function
            
            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            Public Overrides Function Clone() As DataTable
                Dim cln As OrdersDataTable = CType(MyBase.Clone,OrdersDataTable)
                cln.InitVars
                Return cln
            End Function
            
            Protected Overrides Function CreateInstance() As DataTable
                Return New OrdersDataTable
            End Function
            
            Friend Sub InitVars()
                Me.columnOrderID = Me.Columns("OrderID")
                Me.columnOrderDate = Me.Columns("OrderDate")
                Me.columnEmployeeID = Me.Columns("EmployeeID")
                Me.columnCustomerID = Me.Columns("CustomerID")
            End Sub
            
            Private Sub InitClass()
                Me.columnOrderID = New DataColumn("OrderID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnOrderID)
                Me.columnOrderDate = New DataColumn("OrderDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnOrderDate)
                Me.columnEmployeeID = New DataColumn("EmployeeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnEmployeeID)
                Me.columnCustomerID = New DataColumn("CustomerID", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnCustomerID)
                Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnOrderID}, true))
                Me.columnOrderID.AutoIncrement = true
                Me.columnOrderID.AllowDBNull = false
                Me.columnOrderID.ReadOnly = true
                Me.columnOrderID.Unique = true
            End Sub
            
            Public Function NewOrdersRow() As OrdersRow
                Return CType(Me.NewRow,OrdersRow)
            End Function
            
            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New OrdersRow(builder)
            End Function
            
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(OrdersRow)
            End Function
            
            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.OrdersRowChangedEvent) Is Nothing) Then
                    RaiseEvent OrdersRowChanged(Me, New OrdersRowChangeEvent(CType(e.Row,OrdersRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.OrdersRowChangingEvent) Is Nothing) Then
                    RaiseEvent OrdersRowChanging(Me, New OrdersRowChangeEvent(CType(e.Row,OrdersRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.OrdersRowDeletedEvent) Is Nothing) Then
                    RaiseEvent OrdersRowDeleted(Me, New OrdersRowChangeEvent(CType(e.Row,OrdersRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.OrdersRowDeletingEvent) Is Nothing) Then
                    RaiseEvent OrdersRowDeleting(Me, New OrdersRowChangeEvent(CType(e.Row,OrdersRow), e.Action))
                End If
            End Sub
            
            Public Sub RemoveOrdersRow(ByVal row As OrdersRow)
                Me.Rows.Remove(row)
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class OrdersRow
            Inherits DataRow
            
            Private tableOrders As OrdersDataTable
            
            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tableOrders = CType(Me.Table,OrdersDataTable)
            End Sub
            
            Public Property OrderID As Integer
                Get
                    Return CType(Me(Me.tableOrders.OrderIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableOrders.OrderIDColumn) = value
                End Set
            End Property
            
            Public Property OrderDate As Date
                Get
                    Try 
                        Return CType(Me(Me.tableOrders.OrderDateColumn),Date)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableOrders.OrderDateColumn) = value
                End Set
            End Property
            
            Public Property EmployeeID As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableOrders.EmployeeIDColumn),Integer)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableOrders.EmployeeIDColumn) = value
                End Set
            End Property
            
            Public Property CustomerID As String
                Get
                    Try 
                        Return CType(Me(Me.tableOrders.CustomerIDColumn),String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableOrders.CustomerIDColumn) = value
                End Set
            End Property
            
            Public Property CustomersRow As CustomersRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("CustomersOrders")),CustomersRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("CustomersOrders"))
                End Set
            End Property
            
            Public Property EmployeesRow As EmployeesRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("EmployeesOrders")),EmployeesRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("EmployeesOrders"))
                End Set
            End Property
            
            Public Function IsOrderDateNull() As Boolean
                Return Me.IsNull(Me.tableOrders.OrderDateColumn)
            End Function
            
            Public Sub SetOrderDateNull()
                Me(Me.tableOrders.OrderDateColumn) = System.Convert.DBNull
            End Sub
            
            Public Function IsEmployeeIDNull() As Boolean
                Return Me.IsNull(Me.tableOrders.EmployeeIDColumn)
            End Function
            
            Public Sub SetEmployeeIDNull()
                Me(Me.tableOrders.EmployeeIDColumn) = System.Convert.DBNull
            End Sub
            
            Public Function IsCustomerIDNull() As Boolean
                Return Me.IsNull(Me.tableOrders.CustomerIDColumn)
            End Function
            
            Public Sub SetCustomerIDNull()
                Me(Me.tableOrders.CustomerIDColumn) = System.Convert.DBNull
            End Sub
            
            Public Function GetOrderDetailsRows() As OrderDetailsRow()
                Return CType(Me.GetChildRows(Me.Table.ChildRelations("OrdersOrderDetails")),OrderDetailsRow())
            End Function
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class OrdersRowChangeEvent
            Inherits EventArgs
            
            Private eventRow As OrdersRow
            
            Private eventAction As DataRowAction
            
            Public Sub New(ByVal row As OrdersRow, ByVal action As DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            Public ReadOnly Property Row As OrdersRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            Public ReadOnly Property Action As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class ProductsDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable
            
            Private columnProductID As DataColumn
            
            Private columnProductName As DataColumn
            
            Private columnUnitPrice As DataColumn
            
            Friend Sub New()
                MyBase.New("Products")
                Me.InitClass
            End Sub
            
            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub
            
            <System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            Friend ReadOnly Property ProductIDColumn As DataColumn
                Get
                    Return Me.columnProductID
                End Get
            End Property
            
            Friend ReadOnly Property ProductNameColumn As DataColumn
                Get
                    Return Me.columnProductName
                End Get
            End Property
            
            Friend ReadOnly Property UnitPriceColumn As DataColumn
                Get
                    Return Me.columnUnitPrice
                End Get
            End Property
            
            Public Default ReadOnly Property Item(ByVal index As Integer) As ProductsRow
                Get
                    Return CType(Me.Rows(index),ProductsRow)
                End Get
            End Property
            
            Public Event ProductsRowChanged As ProductsRowChangeEventHandler
            
            Public Event ProductsRowChanging As ProductsRowChangeEventHandler
            
            Public Event ProductsRowDeleted As ProductsRowChangeEventHandler
            
            Public Event ProductsRowDeleting As ProductsRowChangeEventHandler
            
            Public Overloads Sub AddProductsRow(ByVal row As ProductsRow)
                Me.Rows.Add(row)
            End Sub
            
            Public Overloads Function AddProductsRow(ByVal ProductName As String, ByVal UnitPrice As Decimal) As ProductsRow
                Dim rowProductsRow As ProductsRow = CType(Me.NewRow,ProductsRow)
                rowProductsRow.ItemArray = New Object() {Nothing, ProductName, UnitPrice}
                Me.Rows.Add(rowProductsRow)
                Return rowProductsRow
            End Function
            
            Public Function FindByProductID(ByVal ProductID As Integer) As ProductsRow
                Return CType(Me.Rows.Find(New Object() {ProductID}),ProductsRow)
            End Function
            
            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            Public Overrides Function Clone() As DataTable
                Dim cln As ProductsDataTable = CType(MyBase.Clone,ProductsDataTable)
                cln.InitVars
                Return cln
            End Function
            
            Protected Overrides Function CreateInstance() As DataTable
                Return New ProductsDataTable
            End Function
            
            Friend Sub InitVars()
                Me.columnProductID = Me.Columns("ProductID")
                Me.columnProductName = Me.Columns("ProductName")
                Me.columnUnitPrice = Me.Columns("UnitPrice")
            End Sub
            
            Private Sub InitClass()
                Me.columnProductID = New DataColumn("ProductID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnProductID)
                Me.columnProductName = New DataColumn("ProductName", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnProductName)
                Me.columnUnitPrice = New DataColumn("UnitPrice", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnUnitPrice)
                Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnProductID}, true))
                Me.columnProductID.AutoIncrement = true
                Me.columnProductID.AllowDBNull = false
                Me.columnProductID.ReadOnly = true
                Me.columnProductID.Unique = true
                Me.columnProductName.AllowDBNull = false
            End Sub
            
            Public Function NewProductsRow() As ProductsRow
                Return CType(Me.NewRow,ProductsRow)
            End Function
            
            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New ProductsRow(builder)
            End Function
            
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(ProductsRow)
            End Function
            
            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.ProductsRowChangedEvent) Is Nothing) Then
                    RaiseEvent ProductsRowChanged(Me, New ProductsRowChangeEvent(CType(e.Row,ProductsRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.ProductsRowChangingEvent) Is Nothing) Then
                    RaiseEvent ProductsRowChanging(Me, New ProductsRowChangeEvent(CType(e.Row,ProductsRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.ProductsRowDeletedEvent) Is Nothing) Then
                    RaiseEvent ProductsRowDeleted(Me, New ProductsRowChangeEvent(CType(e.Row,ProductsRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.ProductsRowDeletingEvent) Is Nothing) Then
                    RaiseEvent ProductsRowDeleting(Me, New ProductsRowChangeEvent(CType(e.Row,ProductsRow), e.Action))
                End If
            End Sub
            
            Public Sub RemoveProductsRow(ByVal row As ProductsRow)
                Me.Rows.Remove(row)
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class ProductsRow
            Inherits DataRow
            
            Private tableProducts As ProductsDataTable
            
            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tableProducts = CType(Me.Table,ProductsDataTable)
            End Sub
            
            Public Property ProductID As Integer
                Get
                    Return CType(Me(Me.tableProducts.ProductIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableProducts.ProductIDColumn) = value
                End Set
            End Property
            
            Public Property ProductName As String
                Get
                    Return CType(Me(Me.tableProducts.ProductNameColumn),String)
                End Get
                Set
                    Me(Me.tableProducts.ProductNameColumn) = value
                End Set
            End Property
            
            Public Property UnitPrice As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableProducts.UnitPriceColumn),Decimal)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableProducts.UnitPriceColumn) = value
                End Set
            End Property
            
            Public Function IsUnitPriceNull() As Boolean
                Return Me.IsNull(Me.tableProducts.UnitPriceColumn)
            End Function
            
            Public Sub SetUnitPriceNull()
                Me(Me.tableProducts.UnitPriceColumn) = System.Convert.DBNull
            End Sub
            
            Public Function GetOrderDetailsRows() As OrderDetailsRow()
                Return CType(Me.GetChildRows(Me.Table.ChildRelations("ProductsOrderDetails")),OrderDetailsRow())
            End Function
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class ProductsRowChangeEvent
            Inherits EventArgs
            
            Private eventRow As ProductsRow
            
            Private eventAction As DataRowAction
            
            Public Sub New(ByVal row As ProductsRow, ByVal action As DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            Public ReadOnly Property Row As ProductsRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            Public ReadOnly Property Action As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
End Namespace
