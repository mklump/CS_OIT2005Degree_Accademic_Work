'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.2914.16
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Public Class CustomerData
    Inherits System.Data.DataSet
    
    Private tablecustomers As customersDataTable
    
    Private tableorders As ordersDataTable
    
    Private tableorderdetails As orderdetailsDataTable
    
    Private relationorders_orderdetails As DataRelation
    
    Private relationcustomers_orders As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
    End Sub
    
    Private Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Me.InitClass
        Me.GetSerializationData(info, context)
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property customers As customersDataTable
        Get
            Return Me.tablecustomers
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property orders As ordersDataTable
        Get
            Return Me.tableorders
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property orderdetails As orderdetailsDataTable
        Get
            Return Me.tableorderdetails
        End Get
    End Property
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.ReadXml(reader, XmlReadMode.IgnoreSchema)
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Private Sub InitClass()
        Me.DataSetName = "CustomerData"
        Me.Namespace = "http://tempuri.org/customers.xsd"
        Me.tablecustomers = New customersDataTable
        Me.Tables.Add(Me.tablecustomers)
        Me.tableorders = New ordersDataTable
        Me.Tables.Add(Me.tableorders)
        Me.tableorderdetails = New orderdetailsDataTable
        Me.Tables.Add(Me.tableorderdetails)
        Me.tableorders.Constraints.Add(New System.Data.ForeignKeyConstraint("customers_orders", New DataColumn() {Me.tablecustomers.customers_IdColumn}, New DataColumn() {Me.tableorders.customers_IdColumn}))
        Me.tableorderdetails.Constraints.Add(New System.Data.ForeignKeyConstraint("orders_orderdetails", New DataColumn() {Me.tableorders.orders_IdColumn}, New DataColumn() {Me.tableorderdetails.orders_IdColumn}))
        Me.relationorders_orderdetails = New DataRelation("orders_orderdetails", New DataColumn() {Me.tableorders.orders_IdColumn}, New DataColumn() {Me.tableorderdetails.orders_IdColumn}, false)
        Me.relationorders_orderdetails.Nested = true
        Me.Relations.Add(Me.relationorders_orderdetails)
        Me.relationcustomers_orders = New DataRelation("customers_orders", New DataColumn() {Me.tablecustomers.customers_IdColumn}, New DataColumn() {Me.tableorders.customers_IdColumn}, false)
        Me.relationcustomers_orders.Nested = true
        Me.Relations.Add(Me.relationcustomers_orders)
    End Sub
    
    Private Function ShouldSerializecustomers() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeorders() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeorderdetails() As Boolean
        Return false
    End Function
    
    Public Delegate Sub customersRowChangeEventHandler(ByVal sender As Object, ByVal e As customersRowChangeEvent)
    
    Public Delegate Sub ordersRowChangeEventHandler(ByVal sender As Object, ByVal e As ordersRowChangeEvent)
    
    Public Delegate Sub orderdetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As orderdetailsRowChangeEvent)
    
    Public Class customersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCustomerID As DataColumn
        
        Private columnCompanyName As DataColumn
        
        Private columnContactName As DataColumn
        
        Private columnContactTitle As DataColumn
        
        Private columnAddress As DataColumn
        
        Private columnCity As DataColumn
        
        Private columnPostalCode As DataColumn
        
        Private columnCountry As DataColumn
        
        Private columnPhone As DataColumn
        
        Private columnFax As DataColumn
        
        Private columncustomers_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("customers")
            Me.InitClass
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CustomerIDColumn As DataColumn
            Get
                Return Me.columnCustomerID
            End Get
        End Property
        
        Friend ReadOnly Property CompanyNameColumn As DataColumn
            Get
                Return Me.columnCompanyName
            End Get
        End Property
        
        Friend ReadOnly Property ContactNameColumn As DataColumn
            Get
                Return Me.columnContactName
            End Get
        End Property
        
        Friend ReadOnly Property ContactTitleColumn As DataColumn
            Get
                Return Me.columnContactTitle
            End Get
        End Property
        
        Friend ReadOnly Property AddressColumn As DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        Friend ReadOnly Property CityColumn As DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        Friend ReadOnly Property PostalCodeColumn As DataColumn
            Get
                Return Me.columnPostalCode
            End Get
        End Property
        
        Friend ReadOnly Property CountryColumn As DataColumn
            Get
                Return Me.columnCountry
            End Get
        End Property
        
        Friend ReadOnly Property PhoneColumn As DataColumn
            Get
                Return Me.columnPhone
            End Get
        End Property
        
        Friend ReadOnly Property FaxColumn As DataColumn
            Get
                Return Me.columnFax
            End Get
        End Property
        
        Friend ReadOnly Property customers_IdColumn As DataColumn
            Get
                Return Me.columncustomers_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As customersRow
            Get
                Return CType(Me.Rows(index),customersRow)
            End Get
        End Property
        
        Public Event customersRowChanged As customersRowChangeEventHandler
        
        Public Event customersRowChanging As customersRowChangeEventHandler
        
        Public Event customersRowDeleted As customersRowChangeEventHandler
        
        Public Event customersRowDeleting As customersRowChangeEventHandler
        
        Public Overloads Sub AddcustomersRow(ByVal row As customersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddcustomersRow(ByVal CustomerID As String, ByVal CompanyName As String, ByVal ContactName As String, ByVal ContactTitle As String, ByVal Address As String, ByVal City As String, ByVal PostalCode As String, ByVal Country As String, ByVal Phone As String, ByVal Fax As String) As customersRow
            Dim rowcustomersRow As customersRow = CType(Me.NewRow,customersRow)
            rowcustomersRow.ItemArray = New Object() {CustomerID, CompanyName, ContactName, ContactTitle, Address, City, PostalCode, Country, Phone, Fax, Nothing}
            Me.Rows.Add(rowcustomersRow)
            Return rowcustomersRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Private Sub InitClass()
            Me.columnCustomerID = New DataColumn("CustomerID", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerID)
            Me.columnCompanyName = New DataColumn("CompanyName", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompanyName)
            Me.columnContactName = New DataColumn("ContactName", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContactName)
            Me.columnContactTitle = New DataColumn("ContactTitle", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContactTitle)
            Me.columnAddress = New DataColumn("Address", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddress)
            Me.columnCity = New DataColumn("City", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCity)
            Me.columnPostalCode = New DataColumn("PostalCode", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPostalCode)
            Me.columnCountry = New DataColumn("Country", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCountry)
            Me.columnPhone = New DataColumn("Phone", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPhone)
            Me.columnFax = New DataColumn("Fax", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFax)
            Me.columncustomers_Id = New DataColumn("customers_Id", GetType(System.Int32), "", System.Data.MappingType.Hidden)
            Me.columncustomers_Id.AutoIncrement = true
            Me.columncustomers_Id.AllowDBNull = false
            Me.columncustomers_Id.Unique = true
            Me.Columns.Add(Me.columncustomers_Id)
            Me.PrimaryKey = New DataColumn() {Me.columncustomers_Id}
        End Sub
        
        Public Function NewcustomersRow() As customersRow
            Return CType(Me.NewRow,customersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            'We need to ensure that all Rows in the tabled are typed rows.
            'Table calls newRow whenever it needs to create a row.
            'So the following conditions are covered by Row newRow(Record record)
            '* Cursor calls table.addRecord(record) 
            '* table.addRow(object[] values) calls newRow(record)    
            Return New customersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(customersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.customersRowChangedEvent) Is Nothing) Then
                RaiseEvent customersRowChanged(Me, New customersRowChangeEvent(CType(e.Row,customersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.customersRowChangingEvent) Is Nothing) Then
                RaiseEvent customersRowChanging(Me, New customersRowChangeEvent(CType(e.Row,customersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.customersRowDeletedEvent) Is Nothing) Then
                RaiseEvent customersRowDeleted(Me, New customersRowChangeEvent(CType(e.Row,customersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.customersRowDeletingEvent) Is Nothing) Then
                RaiseEvent customersRowDeleting(Me, New customersRowChangeEvent(CType(e.Row,customersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovecustomersRow(ByVal row As customersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    Public Class customersRow
        Inherits DataRow
        
        Private tablecustomers As customersDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecustomers = CType(Me.Table,customersDataTable)
        End Sub
        
        Public Property CustomerID As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.CustomerIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.CustomerIDColumn) = value
            End Set
        End Property
        
        Public Property CompanyName As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.CompanyNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.CompanyNameColumn) = value
            End Set
        End Property
        
        Public Property ContactName As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.ContactNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.ContactNameColumn) = value
            End Set
        End Property
        
        Public Property ContactTitle As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.ContactTitleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.ContactTitleColumn) = value
            End Set
        End Property
        
        Public Property Address As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.AddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.AddressColumn) = value
            End Set
        End Property
        
        Public Property City As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.CityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.CityColumn) = value
            End Set
        End Property
        
        Public Property PostalCode As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.PostalCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.PostalCodeColumn) = value
            End Set
        End Property
        
        Public Property Country As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.CountryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.CountryColumn) = value
            End Set
        End Property
        
        Public Property Phone As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.PhoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.PhoneColumn) = value
            End Set
        End Property
        
        Public Property Fax As String
            Get
                Try 
                    Return CType(Me(Me.tablecustomers.FaxColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecustomers.FaxColumn) = value
            End Set
        End Property
        
        Public Function IsCustomerIDNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.CustomerIDColumn)
        End Function
        
        Public Sub SetCustomerIDNull()
            Me(Me.tablecustomers.CustomerIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCompanyNameNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.CompanyNameColumn)
        End Function
        
        Public Sub SetCompanyNameNull()
            Me(Me.tablecustomers.CompanyNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsContactNameNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.ContactNameColumn)
        End Function
        
        Public Sub SetContactNameNull()
            Me(Me.tablecustomers.ContactNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsContactTitleNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.ContactTitleColumn)
        End Function
        
        Public Sub SetContactTitleNull()
            Me(Me.tablecustomers.ContactTitleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.AddressColumn)
        End Function
        
        Public Sub SetAddressNull()
            Me(Me.tablecustomers.AddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.CityColumn)
        End Function
        
        Public Sub SetCityNull()
            Me(Me.tablecustomers.CityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPostalCodeNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.PostalCodeColumn)
        End Function
        
        Public Sub SetPostalCodeNull()
            Me(Me.tablecustomers.PostalCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCountryNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.CountryColumn)
        End Function
        
        Public Sub SetCountryNull()
            Me(Me.tablecustomers.CountryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhoneNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.PhoneColumn)
        End Function
        
        Public Sub SetPhoneNull()
            Me(Me.tablecustomers.PhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFaxNull() As Boolean
            Return Me.IsNull(Me.tablecustomers.FaxColumn)
        End Function
        
        Public Sub SetFaxNull()
            Me(Me.tablecustomers.FaxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetordersRows() As ordersRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("customers_orders")),ordersRow())
        End Function
    End Class
    
    Public Class customersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As customersRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As customersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As customersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class ordersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnOrderID As DataColumn
        
        Private columnCustomerID As DataColumn
        
        Private columnEmployeeID As DataColumn
        
        Private columnOrderDate As DataColumn
        
        Private columnRequiredDate As DataColumn
        
        Private columnShippedDate As DataColumn
        
        Private columnShipVia As DataColumn
        
        Private columnFreight As DataColumn
        
        Private columnShipName As DataColumn
        
        Private columnShipAddress As DataColumn
        
        Private columnShipCity As DataColumn
        
        Private columnShipPostalCode As DataColumn
        
        Private columnShipCountry As DataColumn
        
        Private columnorders_Id As DataColumn
        
        Private columncustomers_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("orders")
            Me.InitClass
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property OrderIDColumn As DataColumn
            Get
                Return Me.columnOrderID
            End Get
        End Property
        
        Friend ReadOnly Property CustomerIDColumn As DataColumn
            Get
                Return Me.columnCustomerID
            End Get
        End Property
        
        Friend ReadOnly Property EmployeeIDColumn As DataColumn
            Get
                Return Me.columnEmployeeID
            End Get
        End Property
        
        Friend ReadOnly Property OrderDateColumn As DataColumn
            Get
                Return Me.columnOrderDate
            End Get
        End Property
        
        Friend ReadOnly Property RequiredDateColumn As DataColumn
            Get
                Return Me.columnRequiredDate
            End Get
        End Property
        
        Friend ReadOnly Property ShippedDateColumn As DataColumn
            Get
                Return Me.columnShippedDate
            End Get
        End Property
        
        Friend ReadOnly Property ShipViaColumn As DataColumn
            Get
                Return Me.columnShipVia
            End Get
        End Property
        
        Friend ReadOnly Property FreightColumn As DataColumn
            Get
                Return Me.columnFreight
            End Get
        End Property
        
        Friend ReadOnly Property ShipNameColumn As DataColumn
            Get
                Return Me.columnShipName
            End Get
        End Property
        
        Friend ReadOnly Property ShipAddressColumn As DataColumn
            Get
                Return Me.columnShipAddress
            End Get
        End Property
        
        Friend ReadOnly Property ShipCityColumn As DataColumn
            Get
                Return Me.columnShipCity
            End Get
        End Property
        
        Friend ReadOnly Property ShipPostalCodeColumn As DataColumn
            Get
                Return Me.columnShipPostalCode
            End Get
        End Property
        
        Friend ReadOnly Property ShipCountryColumn As DataColumn
            Get
                Return Me.columnShipCountry
            End Get
        End Property
        
        Friend ReadOnly Property orders_IdColumn As DataColumn
            Get
                Return Me.columnorders_Id
            End Get
        End Property
        
        Friend ReadOnly Property customers_IdColumn As DataColumn
            Get
                Return Me.columncustomers_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ordersRow
            Get
                Return CType(Me.Rows(index),ordersRow)
            End Get
        End Property
        
        Public Event ordersRowChanged As ordersRowChangeEventHandler
        
        Public Event ordersRowChanging As ordersRowChangeEventHandler
        
        Public Event ordersRowDeleted As ordersRowChangeEventHandler
        
        Public Event ordersRowDeleting As ordersRowChangeEventHandler
        
        Public Overloads Sub AddordersRow(ByVal row As ordersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddordersRow(ByVal OrderID As String, ByVal CustomerID As String, ByVal EmployeeID As String, ByVal OrderDate As String, ByVal RequiredDate As String, ByVal ShippedDate As String, ByVal ShipVia As String, ByVal Freight As String, ByVal ShipName As String, ByVal ShipAddress As String, ByVal ShipCity As String, ByVal ShipPostalCode As String, ByVal ShipCountry As String, ByVal parentcustomersRowBycustomers_orders As customersRow) As ordersRow
            Dim rowordersRow As ordersRow = CType(Me.NewRow,ordersRow)
            rowordersRow.ItemArray = New Object() {OrderID, CustomerID, EmployeeID, OrderDate, RequiredDate, ShippedDate, ShipVia, Freight, ShipName, ShipAddress, ShipCity, ShipPostalCode, ShipCountry, Nothing, parentcustomersRowBycustomers_orders(10)}
            Me.Rows.Add(rowordersRow)
            Return rowordersRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Private Sub InitClass()
            Me.columnOrderID = New DataColumn("OrderID", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderID)
            Me.columnCustomerID = New DataColumn("CustomerID", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerID)
            Me.columnEmployeeID = New DataColumn("EmployeeID", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmployeeID)
            Me.columnOrderDate = New DataColumn("OrderDate", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderDate)
            Me.columnRequiredDate = New DataColumn("RequiredDate", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRequiredDate)
            Me.columnShippedDate = New DataColumn("ShippedDate", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnShippedDate)
            Me.columnShipVia = New DataColumn("ShipVia", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnShipVia)
            Me.columnFreight = New DataColumn("Freight", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFreight)
            Me.columnShipName = New DataColumn("ShipName", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnShipName)
            Me.columnShipAddress = New DataColumn("ShipAddress", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnShipAddress)
            Me.columnShipCity = New DataColumn("ShipCity", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnShipCity)
            Me.columnShipPostalCode = New DataColumn("ShipPostalCode", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnShipPostalCode)
            Me.columnShipCountry = New DataColumn("ShipCountry", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnShipCountry)
            Me.columnorders_Id = New DataColumn("orders_Id", GetType(System.Int32), "", System.Data.MappingType.Hidden)
            Me.columnorders_Id.AutoIncrement = true
            Me.columnorders_Id.AllowDBNull = false
            Me.columnorders_Id.Unique = true
            Me.Columns.Add(Me.columnorders_Id)
            Me.columncustomers_Id = New DataColumn("customers_Id", GetType(System.Int32), "", System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columncustomers_Id)
            Me.PrimaryKey = New DataColumn() {Me.columnorders_Id}
        End Sub
        
        Public Function NewordersRow() As ordersRow
            Return CType(Me.NewRow,ordersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            'We need to ensure that all Rows in the tabled are typed rows.
            'Table calls newRow whenever it needs to create a row.
            'So the following conditions are covered by Row newRow(Record record)
            '* Cursor calls table.addRecord(record) 
            '* table.addRow(object[] values) calls newRow(record)    
            Return New ordersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ordersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ordersRowChangedEvent) Is Nothing) Then
                RaiseEvent ordersRowChanged(Me, New ordersRowChangeEvent(CType(e.Row,ordersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ordersRowChangingEvent) Is Nothing) Then
                RaiseEvent ordersRowChanging(Me, New ordersRowChangeEvent(CType(e.Row,ordersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ordersRowDeletedEvent) Is Nothing) Then
                RaiseEvent ordersRowDeleted(Me, New ordersRowChangeEvent(CType(e.Row,ordersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ordersRowDeletingEvent) Is Nothing) Then
                RaiseEvent ordersRowDeleting(Me, New ordersRowChangeEvent(CType(e.Row,ordersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveordersRow(ByVal row As ordersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    Public Class ordersRow
        Inherits DataRow
        
        Private tableorders As ordersDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableorders = CType(Me.Table,ordersDataTable)
        End Sub
        
        Public Property OrderID As String
            Get
                Try 
                    Return CType(Me(Me.tableorders.OrderIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableorders.OrderIDColumn) = value
            End Set
        End Property
        
        Public Property CustomerID As String
            Get
                Try 
                    Return CType(Me(Me.tableorders.CustomerIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableorders.CustomerIDColumn) = value
            End Set
        End Property
        
        Public Property EmployeeID As String
            Get
                Try 
                    Return CType(Me(Me.tableorders.EmployeeIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableorders.EmployeeIDColumn) = value
            End Set
        End Property
        
        Public Property OrderDate As String
            Get
                Try 
                    Return CType(Me(Me.tableorders.OrderDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableorders.OrderDateColumn) = value
            End Set
        End Property
        
        Public Property RequiredDate As String
            Get
                Try 
                    Return CType(Me(Me.tableorders.RequiredDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableorders.RequiredDateColumn) = value
            End Set
        End Property
        
        Public Property ShippedDate As String
            Get
                Try 
                    Return CType(Me(Me.tableorders.ShippedDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableorders.ShippedDateColumn) = value
            End Set
        End Property
        
        Public Property ShipVia As String
            Get
                Try 
                    Return CType(Me(Me.tableorders.ShipViaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableorders.ShipViaColumn) = value
            End Set
        End Property
        
        Public Property Freight As String
            Get
                Try 
                    Return CType(Me(Me.tableorders.FreightColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableorders.FreightColumn) = value
            End Set
        End Property
        
        Public Property ShipName As String
            Get
                Try 
                    Return CType(Me(Me.tableorders.ShipNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableorders.ShipNameColumn) = value
            End Set
        End Property
        
        Public Property ShipAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableorders.ShipAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableorders.ShipAddressColumn) = value
            End Set
        End Property
        
        Public Property ShipCity As String
            Get
                Try 
                    Return CType(Me(Me.tableorders.ShipCityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableorders.ShipCityColumn) = value
            End Set
        End Property
        
        Public Property ShipPostalCode As String
            Get
                Try 
                    Return CType(Me(Me.tableorders.ShipPostalCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableorders.ShipPostalCodeColumn) = value
            End Set
        End Property
        
        Public Property ShipCountry As String
            Get
                Try 
                    Return CType(Me(Me.tableorders.ShipCountryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableorders.ShipCountryColumn) = value
            End Set
        End Property
        
        Public Property customersRow As customersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("customers_orders")),customersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("customers_orders"))
            End Set
        End Property
        
        Public Function IsOrderIDNull() As Boolean
            Return Me.IsNull(Me.tableorders.OrderIDColumn)
        End Function
        
        Public Sub SetOrderIDNull()
            Me(Me.tableorders.OrderIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustomerIDNull() As Boolean
            Return Me.IsNull(Me.tableorders.CustomerIDColumn)
        End Function
        
        Public Sub SetCustomerIDNull()
            Me(Me.tableorders.CustomerIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmployeeIDNull() As Boolean
            Return Me.IsNull(Me.tableorders.EmployeeIDColumn)
        End Function
        
        Public Sub SetEmployeeIDNull()
            Me(Me.tableorders.EmployeeIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderDateNull() As Boolean
            Return Me.IsNull(Me.tableorders.OrderDateColumn)
        End Function
        
        Public Sub SetOrderDateNull()
            Me(Me.tableorders.OrderDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRequiredDateNull() As Boolean
            Return Me.IsNull(Me.tableorders.RequiredDateColumn)
        End Function
        
        Public Sub SetRequiredDateNull()
            Me(Me.tableorders.RequiredDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShippedDateNull() As Boolean
            Return Me.IsNull(Me.tableorders.ShippedDateColumn)
        End Function
        
        Public Sub SetShippedDateNull()
            Me(Me.tableorders.ShippedDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShipViaNull() As Boolean
            Return Me.IsNull(Me.tableorders.ShipViaColumn)
        End Function
        
        Public Sub SetShipViaNull()
            Me(Me.tableorders.ShipViaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFreightNull() As Boolean
            Return Me.IsNull(Me.tableorders.FreightColumn)
        End Function
        
        Public Sub SetFreightNull()
            Me(Me.tableorders.FreightColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShipNameNull() As Boolean
            Return Me.IsNull(Me.tableorders.ShipNameColumn)
        End Function
        
        Public Sub SetShipNameNull()
            Me(Me.tableorders.ShipNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShipAddressNull() As Boolean
            Return Me.IsNull(Me.tableorders.ShipAddressColumn)
        End Function
        
        Public Sub SetShipAddressNull()
            Me(Me.tableorders.ShipAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShipCityNull() As Boolean
            Return Me.IsNull(Me.tableorders.ShipCityColumn)
        End Function
        
        Public Sub SetShipCityNull()
            Me(Me.tableorders.ShipCityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShipPostalCodeNull() As Boolean
            Return Me.IsNull(Me.tableorders.ShipPostalCodeColumn)
        End Function
        
        Public Sub SetShipPostalCodeNull()
            Me(Me.tableorders.ShipPostalCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShipCountryNull() As Boolean
            Return Me.IsNull(Me.tableorders.ShipCountryColumn)
        End Function
        
        Public Sub SetShipCountryNull()
            Me(Me.tableorders.ShipCountryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetorderdetailsRows() As orderdetailsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("orders_orderdetails")),orderdetailsRow())
        End Function
    End Class
    
    Public Class ordersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ordersRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As ordersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ordersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class orderdetailsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnOrderID As DataColumn
        
        Private columnProductID As DataColumn
        
        Private columnUnitPrice As DataColumn
        
        Private columnQuantity As DataColumn
        
        Private columnDiscount As DataColumn
        
        Private columnorders_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("orderdetails")
            Me.InitClass
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property OrderIDColumn As DataColumn
            Get
                Return Me.columnOrderID
            End Get
        End Property
        
        Friend ReadOnly Property ProductIDColumn As DataColumn
            Get
                Return Me.columnProductID
            End Get
        End Property
        
        Friend ReadOnly Property UnitPriceColumn As DataColumn
            Get
                Return Me.columnUnitPrice
            End Get
        End Property
        
        Friend ReadOnly Property QuantityColumn As DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        Friend ReadOnly Property DiscountColumn As DataColumn
            Get
                Return Me.columnDiscount
            End Get
        End Property
        
        Friend ReadOnly Property orders_IdColumn As DataColumn
            Get
                Return Me.columnorders_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As orderdetailsRow
            Get
                Return CType(Me.Rows(index),orderdetailsRow)
            End Get
        End Property
        
        Public Event orderdetailsRowChanged As orderdetailsRowChangeEventHandler
        
        Public Event orderdetailsRowChanging As orderdetailsRowChangeEventHandler
        
        Public Event orderdetailsRowDeleted As orderdetailsRowChangeEventHandler
        
        Public Event orderdetailsRowDeleting As orderdetailsRowChangeEventHandler
        
        Public Overloads Sub AddorderdetailsRow(ByVal row As orderdetailsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddorderdetailsRow(ByVal OrderID As String, ByVal ProductID As String, ByVal UnitPrice As String, ByVal Quantity As String, ByVal Discount As String, ByVal parentordersRowByorders_orderdetails As ordersRow) As orderdetailsRow
            Dim roworderdetailsRow As orderdetailsRow = CType(Me.NewRow,orderdetailsRow)
            roworderdetailsRow.ItemArray = New Object() {OrderID, ProductID, UnitPrice, Quantity, Discount, parentordersRowByorders_orderdetails(13)}
            Me.Rows.Add(roworderdetailsRow)
            Return roworderdetailsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Private Sub InitClass()
            Me.columnOrderID = New DataColumn("OrderID", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderID)
            Me.columnProductID = New DataColumn("ProductID", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProductID)
            Me.columnUnitPrice = New DataColumn("UnitPrice", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUnitPrice)
            Me.columnQuantity = New DataColumn("Quantity", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQuantity)
            Me.columnDiscount = New DataColumn("Discount", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiscount)
            Me.columnorders_Id = New DataColumn("orders_Id", GetType(System.Int32), "", System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnorders_Id)
        End Sub
        
        Public Function NeworderdetailsRow() As orderdetailsRow
            Return CType(Me.NewRow,orderdetailsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            'We need to ensure that all Rows in the tabled are typed rows.
            'Table calls newRow whenever it needs to create a row.
            'So the following conditions are covered by Row newRow(Record record)
            '* Cursor calls table.addRecord(record) 
            '* table.addRow(object[] values) calls newRow(record)    
            Return New orderdetailsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(orderdetailsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.orderdetailsRowChangedEvent) Is Nothing) Then
                RaiseEvent orderdetailsRowChanged(Me, New orderdetailsRowChangeEvent(CType(e.Row,orderdetailsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.orderdetailsRowChangingEvent) Is Nothing) Then
                RaiseEvent orderdetailsRowChanging(Me, New orderdetailsRowChangeEvent(CType(e.Row,orderdetailsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.orderdetailsRowDeletedEvent) Is Nothing) Then
                RaiseEvent orderdetailsRowDeleted(Me, New orderdetailsRowChangeEvent(CType(e.Row,orderdetailsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.orderdetailsRowDeletingEvent) Is Nothing) Then
                RaiseEvent orderdetailsRowDeleting(Me, New orderdetailsRowChangeEvent(CType(e.Row,orderdetailsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveorderdetailsRow(ByVal row As orderdetailsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    Public Class orderdetailsRow
        Inherits DataRow
        
        Private tableorderdetails As orderdetailsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableorderdetails = CType(Me.Table,orderdetailsDataTable)
        End Sub
        
        Public Property OrderID As String
            Get
                Try 
                    Return CType(Me(Me.tableorderdetails.OrderIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableorderdetails.OrderIDColumn) = value
            End Set
        End Property
        
        Public Property ProductID As String
            Get
                Try 
                    Return CType(Me(Me.tableorderdetails.ProductIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableorderdetails.ProductIDColumn) = value
            End Set
        End Property
        
        Public Property UnitPrice As String
            Get
                Try 
                    Return CType(Me(Me.tableorderdetails.UnitPriceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableorderdetails.UnitPriceColumn) = value
            End Set
        End Property
        
        Public Property Quantity As String
            Get
                Try 
                    Return CType(Me(Me.tableorderdetails.QuantityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableorderdetails.QuantityColumn) = value
            End Set
        End Property
        
        Public Property Discount As String
            Get
                Try 
                    Return CType(Me(Me.tableorderdetails.DiscountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableorderdetails.DiscountColumn) = value
            End Set
        End Property
        
        Public Property ordersRow As ordersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("orders_orderdetails")),ordersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("orders_orderdetails"))
            End Set
        End Property
        
        Public Function IsOrderIDNull() As Boolean
            Return Me.IsNull(Me.tableorderdetails.OrderIDColumn)
        End Function
        
        Public Sub SetOrderIDNull()
            Me(Me.tableorderdetails.OrderIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsProductIDNull() As Boolean
            Return Me.IsNull(Me.tableorderdetails.ProductIDColumn)
        End Function
        
        Public Sub SetProductIDNull()
            Me(Me.tableorderdetails.ProductIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUnitPriceNull() As Boolean
            Return Me.IsNull(Me.tableorderdetails.UnitPriceColumn)
        End Function
        
        Public Sub SetUnitPriceNull()
            Me(Me.tableorderdetails.UnitPriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tableorderdetails.QuantityColumn)
        End Function
        
        Public Sub SetQuantityNull()
            Me(Me.tableorderdetails.QuantityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiscountNull() As Boolean
            Return Me.IsNull(Me.tableorderdetails.DiscountColumn)
        End Function
        
        Public Sub SetDiscountNull()
            Me(Me.tableorderdetails.DiscountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Public Class orderdetailsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As orderdetailsRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As orderdetailsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As orderdetailsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
