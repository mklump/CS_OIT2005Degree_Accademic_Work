//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.2914.16
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace GeneratingSchema {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public class CustomerData : System.Data.DataSet {
        
        private customersDataTable tablecustomers;
        
        private ordersDataTable tableorders;
        
        private orderdetailsDataTable tableorderdetails;
        
        private DataRelation relationorders_orderdetails;
        
        private DataRelation relationcustomers_orders;
        
        public CustomerData() {
            this.InitClass();
        }
        
        private CustomerData(SerializationInfo info, StreamingContext context) {
            this.InitClass();
            this.GetSerializationData(info, context);
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public customersDataTable customers {
            get {
                return this.tablecustomers;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ordersDataTable orders {
            get {
                return this.tableorders;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public orderdetailsDataTable orderdetails {
            get {
                return this.tableorderdetails;
            }
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.ReadXml(reader, XmlReadMode.IgnoreSchema);
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        private void InitClass() {
            this.DataSetName = "CustomerData";
            this.Namespace = "http://tempuri.org/customers.xsd";
            this.tablecustomers = new customersDataTable();
            this.Tables.Add(this.tablecustomers);
            this.tableorders = new ordersDataTable();
            this.Tables.Add(this.tableorders);
            this.tableorderdetails = new orderdetailsDataTable();
            this.Tables.Add(this.tableorderdetails);
            this.tableorders.Constraints.Add(new System.Data.ForeignKeyConstraint("customers_orders", new DataColumn[] {
                            this.tablecustomers.customers_IdColumn}, new DataColumn[] {
                            this.tableorders.customers_IdColumn}));
            this.tableorderdetails.Constraints.Add(new System.Data.ForeignKeyConstraint("orders_orderdetails", new DataColumn[] {
                            this.tableorders.orders_IdColumn}, new DataColumn[] {
                            this.tableorderdetails.orders_IdColumn}));
            this.relationorders_orderdetails = new DataRelation("orders_orderdetails", new DataColumn[] {
                        this.tableorders.orders_IdColumn}, new DataColumn[] {
                        this.tableorderdetails.orders_IdColumn}, false);
            this.relationorders_orderdetails.Nested = true;
            this.Relations.Add(this.relationorders_orderdetails);
            this.relationcustomers_orders = new DataRelation("customers_orders", new DataColumn[] {
                        this.tablecustomers.customers_IdColumn}, new DataColumn[] {
                        this.tableorders.customers_IdColumn}, false);
            this.relationcustomers_orders.Nested = true;
            this.Relations.Add(this.relationcustomers_orders);
        }
        
        private bool ShouldSerializecustomers() {
            return false;
        }
        
        private bool ShouldSerializeorders() {
            return false;
        }
        
        private bool ShouldSerializeorderdetails() {
            return false;
        }
        
        public delegate void customersRowChangeEventHandler(object sender, customersRowChangeEvent e);
        
        public delegate void ordersRowChangeEventHandler(object sender, ordersRowChangeEvent e);
        
        public delegate void orderdetailsRowChangeEventHandler(object sender, orderdetailsRowChangeEvent e);
        
        public class customersDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCustomerID;
            
            private DataColumn columnCompanyName;
            
            private DataColumn columnContactName;
            
            private DataColumn columnContactTitle;
            
            private DataColumn columnAddress;
            
            private DataColumn columnCity;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnCountry;
            
            private DataColumn columnPhone;
            
            private DataColumn columnFax;
            
            private DataColumn columncustomers_Id;
            
            internal customersDataTable() : 
                    base("customers") {
                this.InitClass();
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CustomerIDColumn {
                get {
                    return this.columnCustomerID;
                }
            }
            
            internal DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            internal DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            internal DataColumn ContactTitleColumn {
                get {
                    return this.columnContactTitle;
                }
            }
            
            internal DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            internal DataColumn customers_IdColumn {
                get {
                    return this.columncustomers_Id;
                }
            }
            
            public customersRow this[int index] {
                get {
                    return ((customersRow)(this.Rows[index]));
                }
            }
            
            public event customersRowChangeEventHandler customersRowChanged;
            
            public event customersRowChangeEventHandler customersRowChanging;
            
            public event customersRowChangeEventHandler customersRowDeleted;
            
            public event customersRowChangeEventHandler customersRowDeleting;
            
            public void AddcustomersRow(customersRow row) {
                this.Rows.Add(row);
            }
            
            public customersRow AddcustomersRow(string CustomerID, string CompanyName, string ContactName, string ContactTitle, string Address, string City, string PostalCode, string Country, string Phone, string Fax) {
                customersRow rowcustomersRow = ((customersRow)(this.NewRow()));
                rowcustomersRow.ItemArray = new object[] {
                        CustomerID,
                        CompanyName,
                        ContactName,
                        ContactTitle,
                        Address,
                        City,
                        PostalCode,
                        Country,
                        Phone,
                        Fax,
                        null};
                this.Rows.Add(rowcustomersRow);
                return rowcustomersRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            private void InitClass() {
                this.columnCustomerID = new DataColumn("CustomerID", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnCustomerID);
                this.columnCompanyName = new DataColumn("CompanyName", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompanyName);
                this.columnContactName = new DataColumn("ContactName", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactName);
                this.columnContactTitle = new DataColumn("ContactTitle", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactTitle);
                this.columnAddress = new DataColumn("Address", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress);
                this.columnCity = new DataColumn("City", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnCountry = new DataColumn("Country", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountry);
                this.columnPhone = new DataColumn("Phone", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnFax = new DataColumn("Fax", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnFax);
                this.columncustomers_Id = new DataColumn("customers_Id", typeof(int), "", System.Data.MappingType.Hidden);
                this.columncustomers_Id.AutoIncrement = true;
                this.columncustomers_Id.AllowDBNull = false;
                this.columncustomers_Id.Unique = true;
                this.Columns.Add(this.columncustomers_Id);
                this.PrimaryKey = new DataColumn[] {
                        this.columncustomers_Id};
            }
            
            public customersRow NewcustomersRow() {
                return ((customersRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                // We need to ensure that all Rows in the tabled are typed rows.
                // Table calls newRow whenever it needs to create a row.
                // So the following conditions are covered by Row newRow(Record record)
                // * Cursor calls table.addRecord(record) 
                // * table.addRow(object[] values) calls newRow(record)    
                return new customersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(customersRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.customersRowChanged != null)) {
                    this.customersRowChanged(this, new customersRowChangeEvent(((customersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.customersRowChanging != null)) {
                    this.customersRowChanging(this, new customersRowChangeEvent(((customersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.customersRowDeleted != null)) {
                    this.customersRowDeleted(this, new customersRowChangeEvent(((customersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.customersRowDeleting != null)) {
                    this.customersRowDeleting(this, new customersRowChangeEvent(((customersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovecustomersRow(customersRow row) {
                this.Rows.Remove(row);
            }
        }
        
        public class customersRow : DataRow {
            
            private customersDataTable tablecustomers;
            
            internal customersRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecustomers = ((customersDataTable)(this.Table));
            }
            
            public string CustomerID {
                get {
                    try {
                        return ((string)(this[this.tablecustomers.CustomerIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomers.CustomerIDColumn] = value;
                }
            }
            
            public string CompanyName {
                get {
                    try {
                        return ((string)(this[this.tablecustomers.CompanyNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomers.CompanyNameColumn] = value;
                }
            }
            
            public string ContactName {
                get {
                    try {
                        return ((string)(this[this.tablecustomers.ContactNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomers.ContactNameColumn] = value;
                }
            }
            
            public string ContactTitle {
                get {
                    try {
                        return ((string)(this[this.tablecustomers.ContactTitleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomers.ContactTitleColumn] = value;
                }
            }
            
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tablecustomers.AddressColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomers.AddressColumn] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tablecustomers.CityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomers.CityColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tablecustomers.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomers.PostalCodeColumn] = value;
                }
            }
            
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tablecustomers.CountryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomers.CountryColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tablecustomers.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomers.PhoneColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tablecustomers.FaxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomers.FaxColumn] = value;
                }
            }
            
            public bool IsCustomerIDNull() {
                return this.IsNull(this.tablecustomers.CustomerIDColumn);
            }
            
            public void SetCustomerIDNull() {
                this[this.tablecustomers.CustomerIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCompanyNameNull() {
                return this.IsNull(this.tablecustomers.CompanyNameColumn);
            }
            
            public void SetCompanyNameNull() {
                this[this.tablecustomers.CompanyNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactNameNull() {
                return this.IsNull(this.tablecustomers.ContactNameColumn);
            }
            
            public void SetContactNameNull() {
                this[this.tablecustomers.ContactNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactTitleNull() {
                return this.IsNull(this.tablecustomers.ContactTitleColumn);
            }
            
            public void SetContactTitleNull() {
                this[this.tablecustomers.ContactTitleColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressNull() {
                return this.IsNull(this.tablecustomers.AddressColumn);
            }
            
            public void SetAddressNull() {
                this[this.tablecustomers.AddressColumn] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tablecustomers.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tablecustomers.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tablecustomers.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tablecustomers.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryNull() {
                return this.IsNull(this.tablecustomers.CountryColumn);
            }
            
            public void SetCountryNull() {
                this[this.tablecustomers.CountryColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tablecustomers.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tablecustomers.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsFaxNull() {
                return this.IsNull(this.tablecustomers.FaxColumn);
            }
            
            public void SetFaxNull() {
                this[this.tablecustomers.FaxColumn] = System.Convert.DBNull;
            }
            
            public ordersRow[] GetordersRows() {
                return ((ordersRow[])(this.GetChildRows(this.Table.ChildRelations["customers_orders"])));
            }
        }
        
        public class customersRowChangeEvent : EventArgs {
            
            private customersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public customersRowChangeEvent(customersRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public customersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class ordersDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnOrderID;
            
            private DataColumn columnCustomerID;
            
            private DataColumn columnEmployeeID;
            
            private DataColumn columnOrderDate;
            
            private DataColumn columnRequiredDate;
            
            private DataColumn columnShippedDate;
            
            private DataColumn columnShipVia;
            
            private DataColumn columnFreight;
            
            private DataColumn columnShipName;
            
            private DataColumn columnShipAddress;
            
            private DataColumn columnShipCity;
            
            private DataColumn columnShipPostalCode;
            
            private DataColumn columnShipCountry;
            
            private DataColumn columnorders_Id;
            
            private DataColumn columncustomers_Id;
            
            internal ordersDataTable() : 
                    base("orders") {
                this.InitClass();
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn OrderIDColumn {
                get {
                    return this.columnOrderID;
                }
            }
            
            internal DataColumn CustomerIDColumn {
                get {
                    return this.columnCustomerID;
                }
            }
            
            internal DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            internal DataColumn OrderDateColumn {
                get {
                    return this.columnOrderDate;
                }
            }
            
            internal DataColumn RequiredDateColumn {
                get {
                    return this.columnRequiredDate;
                }
            }
            
            internal DataColumn ShippedDateColumn {
                get {
                    return this.columnShippedDate;
                }
            }
            
            internal DataColumn ShipViaColumn {
                get {
                    return this.columnShipVia;
                }
            }
            
            internal DataColumn FreightColumn {
                get {
                    return this.columnFreight;
                }
            }
            
            internal DataColumn ShipNameColumn {
                get {
                    return this.columnShipName;
                }
            }
            
            internal DataColumn ShipAddressColumn {
                get {
                    return this.columnShipAddress;
                }
            }
            
            internal DataColumn ShipCityColumn {
                get {
                    return this.columnShipCity;
                }
            }
            
            internal DataColumn ShipPostalCodeColumn {
                get {
                    return this.columnShipPostalCode;
                }
            }
            
            internal DataColumn ShipCountryColumn {
                get {
                    return this.columnShipCountry;
                }
            }
            
            internal DataColumn orders_IdColumn {
                get {
                    return this.columnorders_Id;
                }
            }
            
            internal DataColumn customers_IdColumn {
                get {
                    return this.columncustomers_Id;
                }
            }
            
            public ordersRow this[int index] {
                get {
                    return ((ordersRow)(this.Rows[index]));
                }
            }
            
            public event ordersRowChangeEventHandler ordersRowChanged;
            
            public event ordersRowChangeEventHandler ordersRowChanging;
            
            public event ordersRowChangeEventHandler ordersRowDeleted;
            
            public event ordersRowChangeEventHandler ordersRowDeleting;
            
            public void AddordersRow(ordersRow row) {
                this.Rows.Add(row);
            }
            
            public ordersRow AddordersRow(string OrderID, string CustomerID, string EmployeeID, string OrderDate, string RequiredDate, string ShippedDate, string ShipVia, string Freight, string ShipName, string ShipAddress, string ShipCity, string ShipPostalCode, string ShipCountry, customersRow parentcustomersRowBycustomers_orders) {
                ordersRow rowordersRow = ((ordersRow)(this.NewRow()));
                rowordersRow.ItemArray = new object[] {
                        OrderID,
                        CustomerID,
                        EmployeeID,
                        OrderDate,
                        RequiredDate,
                        ShippedDate,
                        ShipVia,
                        Freight,
                        ShipName,
                        ShipAddress,
                        ShipCity,
                        ShipPostalCode,
                        ShipCountry,
                        null,
                        parentcustomersRowBycustomers_orders[10]};
                this.Rows.Add(rowordersRow);
                return rowordersRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            private void InitClass() {
                this.columnOrderID = new DataColumn("OrderID", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderID);
                this.columnCustomerID = new DataColumn("CustomerID", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnCustomerID);
                this.columnEmployeeID = new DataColumn("EmployeeID", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmployeeID);
                this.columnOrderDate = new DataColumn("OrderDate", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderDate);
                this.columnRequiredDate = new DataColumn("RequiredDate", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequiredDate);
                this.columnShippedDate = new DataColumn("ShippedDate", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnShippedDate);
                this.columnShipVia = new DataColumn("ShipVia", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnShipVia);
                this.columnFreight = new DataColumn("Freight", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnFreight);
                this.columnShipName = new DataColumn("ShipName", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnShipName);
                this.columnShipAddress = new DataColumn("ShipAddress", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnShipAddress);
                this.columnShipCity = new DataColumn("ShipCity", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnShipCity);
                this.columnShipPostalCode = new DataColumn("ShipPostalCode", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnShipPostalCode);
                this.columnShipCountry = new DataColumn("ShipCountry", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnShipCountry);
                this.columnorders_Id = new DataColumn("orders_Id", typeof(int), "", System.Data.MappingType.Hidden);
                this.columnorders_Id.AutoIncrement = true;
                this.columnorders_Id.AllowDBNull = false;
                this.columnorders_Id.Unique = true;
                this.Columns.Add(this.columnorders_Id);
                this.columncustomers_Id = new DataColumn("customers_Id", typeof(int), "", System.Data.MappingType.Hidden);
                this.Columns.Add(this.columncustomers_Id);
                this.PrimaryKey = new DataColumn[] {
                        this.columnorders_Id};
            }
            
            public ordersRow NewordersRow() {
                return ((ordersRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                // We need to ensure that all Rows in the tabled are typed rows.
                // Table calls newRow whenever it needs to create a row.
                // So the following conditions are covered by Row newRow(Record record)
                // * Cursor calls table.addRecord(record) 
                // * table.addRow(object[] values) calls newRow(record)    
                return new ordersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ordersRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ordersRowChanged != null)) {
                    this.ordersRowChanged(this, new ordersRowChangeEvent(((ordersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ordersRowChanging != null)) {
                    this.ordersRowChanging(this, new ordersRowChangeEvent(((ordersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ordersRowDeleted != null)) {
                    this.ordersRowDeleted(this, new ordersRowChangeEvent(((ordersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ordersRowDeleting != null)) {
                    this.ordersRowDeleting(this, new ordersRowChangeEvent(((ordersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveordersRow(ordersRow row) {
                this.Rows.Remove(row);
            }
        }
        
        public class ordersRow : DataRow {
            
            private ordersDataTable tableorders;
            
            internal ordersRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableorders = ((ordersDataTable)(this.Table));
            }
            
            public string OrderID {
                get {
                    try {
                        return ((string)(this[this.tableorders.OrderIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableorders.OrderIDColumn] = value;
                }
            }
            
            public string CustomerID {
                get {
                    try {
                        return ((string)(this[this.tableorders.CustomerIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableorders.CustomerIDColumn] = value;
                }
            }
            
            public string EmployeeID {
                get {
                    try {
                        return ((string)(this[this.tableorders.EmployeeIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableorders.EmployeeIDColumn] = value;
                }
            }
            
            public string OrderDate {
                get {
                    try {
                        return ((string)(this[this.tableorders.OrderDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableorders.OrderDateColumn] = value;
                }
            }
            
            public string RequiredDate {
                get {
                    try {
                        return ((string)(this[this.tableorders.RequiredDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableorders.RequiredDateColumn] = value;
                }
            }
            
            public string ShippedDate {
                get {
                    try {
                        return ((string)(this[this.tableorders.ShippedDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableorders.ShippedDateColumn] = value;
                }
            }
            
            public string ShipVia {
                get {
                    try {
                        return ((string)(this[this.tableorders.ShipViaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableorders.ShipViaColumn] = value;
                }
            }
            
            public string Freight {
                get {
                    try {
                        return ((string)(this[this.tableorders.FreightColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableorders.FreightColumn] = value;
                }
            }
            
            public string ShipName {
                get {
                    try {
                        return ((string)(this[this.tableorders.ShipNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableorders.ShipNameColumn] = value;
                }
            }
            
            public string ShipAddress {
                get {
                    try {
                        return ((string)(this[this.tableorders.ShipAddressColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableorders.ShipAddressColumn] = value;
                }
            }
            
            public string ShipCity {
                get {
                    try {
                        return ((string)(this[this.tableorders.ShipCityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableorders.ShipCityColumn] = value;
                }
            }
            
            public string ShipPostalCode {
                get {
                    try {
                        return ((string)(this[this.tableorders.ShipPostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableorders.ShipPostalCodeColumn] = value;
                }
            }
            
            public string ShipCountry {
                get {
                    try {
                        return ((string)(this[this.tableorders.ShipCountryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableorders.ShipCountryColumn] = value;
                }
            }
            
            public customersRow customersRow {
                get {
                    return ((customersRow)(this.GetParentRow(this.Table.ParentRelations["customers_orders"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["customers_orders"]);
                }
            }
            
            public bool IsOrderIDNull() {
                return this.IsNull(this.tableorders.OrderIDColumn);
            }
            
            public void SetOrderIDNull() {
                this[this.tableorders.OrderIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCustomerIDNull() {
                return this.IsNull(this.tableorders.CustomerIDColumn);
            }
            
            public void SetCustomerIDNull() {
                this[this.tableorders.CustomerIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmployeeIDNull() {
                return this.IsNull(this.tableorders.EmployeeIDColumn);
            }
            
            public void SetEmployeeIDNull() {
                this[this.tableorders.EmployeeIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrderDateNull() {
                return this.IsNull(this.tableorders.OrderDateColumn);
            }
            
            public void SetOrderDateNull() {
                this[this.tableorders.OrderDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsRequiredDateNull() {
                return this.IsNull(this.tableorders.RequiredDateColumn);
            }
            
            public void SetRequiredDateNull() {
                this[this.tableorders.RequiredDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsShippedDateNull() {
                return this.IsNull(this.tableorders.ShippedDateColumn);
            }
            
            public void SetShippedDateNull() {
                this[this.tableorders.ShippedDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsShipViaNull() {
                return this.IsNull(this.tableorders.ShipViaColumn);
            }
            
            public void SetShipViaNull() {
                this[this.tableorders.ShipViaColumn] = System.Convert.DBNull;
            }
            
            public bool IsFreightNull() {
                return this.IsNull(this.tableorders.FreightColumn);
            }
            
            public void SetFreightNull() {
                this[this.tableorders.FreightColumn] = System.Convert.DBNull;
            }
            
            public bool IsShipNameNull() {
                return this.IsNull(this.tableorders.ShipNameColumn);
            }
            
            public void SetShipNameNull() {
                this[this.tableorders.ShipNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsShipAddressNull() {
                return this.IsNull(this.tableorders.ShipAddressColumn);
            }
            
            public void SetShipAddressNull() {
                this[this.tableorders.ShipAddressColumn] = System.Convert.DBNull;
            }
            
            public bool IsShipCityNull() {
                return this.IsNull(this.tableorders.ShipCityColumn);
            }
            
            public void SetShipCityNull() {
                this[this.tableorders.ShipCityColumn] = System.Convert.DBNull;
            }
            
            public bool IsShipPostalCodeNull() {
                return this.IsNull(this.tableorders.ShipPostalCodeColumn);
            }
            
            public void SetShipPostalCodeNull() {
                this[this.tableorders.ShipPostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsShipCountryNull() {
                return this.IsNull(this.tableorders.ShipCountryColumn);
            }
            
            public void SetShipCountryNull() {
                this[this.tableorders.ShipCountryColumn] = System.Convert.DBNull;
            }
            
            public orderdetailsRow[] GetorderdetailsRows() {
                return ((orderdetailsRow[])(this.GetChildRows(this.Table.ChildRelations["orders_orderdetails"])));
            }
        }
        
        public class ordersRowChangeEvent : EventArgs {
            
            private ordersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public ordersRowChangeEvent(ordersRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ordersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class orderdetailsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnOrderID;
            
            private DataColumn columnProductID;
            
            private DataColumn columnUnitPrice;
            
            private DataColumn columnQuantity;
            
            private DataColumn columnDiscount;
            
            private DataColumn columnorders_Id;
            
            internal orderdetailsDataTable() : 
                    base("orderdetails") {
                this.InitClass();
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn OrderIDColumn {
                get {
                    return this.columnOrderID;
                }
            }
            
            internal DataColumn ProductIDColumn {
                get {
                    return this.columnProductID;
                }
            }
            
            internal DataColumn UnitPriceColumn {
                get {
                    return this.columnUnitPrice;
                }
            }
            
            internal DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            internal DataColumn DiscountColumn {
                get {
                    return this.columnDiscount;
                }
            }
            
            internal DataColumn orders_IdColumn {
                get {
                    return this.columnorders_Id;
                }
            }
            
            public orderdetailsRow this[int index] {
                get {
                    return ((orderdetailsRow)(this.Rows[index]));
                }
            }
            
            public event orderdetailsRowChangeEventHandler orderdetailsRowChanged;
            
            public event orderdetailsRowChangeEventHandler orderdetailsRowChanging;
            
            public event orderdetailsRowChangeEventHandler orderdetailsRowDeleted;
            
            public event orderdetailsRowChangeEventHandler orderdetailsRowDeleting;
            
            public void AddorderdetailsRow(orderdetailsRow row) {
                this.Rows.Add(row);
            }
            
            public orderdetailsRow AddorderdetailsRow(string OrderID, string ProductID, string UnitPrice, string Quantity, string Discount, ordersRow parentordersRowByorders_orderdetails) {
                orderdetailsRow roworderdetailsRow = ((orderdetailsRow)(this.NewRow()));
                roworderdetailsRow.ItemArray = new object[] {
                        OrderID,
                        ProductID,
                        UnitPrice,
                        Quantity,
                        Discount,
                        parentordersRowByorders_orderdetails[13]};
                this.Rows.Add(roworderdetailsRow);
                return roworderdetailsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            private void InitClass() {
                this.columnOrderID = new DataColumn("OrderID", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderID);
                this.columnProductID = new DataColumn("ProductID", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnProductID);
                this.columnUnitPrice = new DataColumn("UnitPrice", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnUnitPrice);
                this.columnQuantity = new DataColumn("Quantity", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuantity);
                this.columnDiscount = new DataColumn("Discount", typeof(string), "", System.Data.MappingType.Element);
                this.Columns.Add(this.columnDiscount);
                this.columnorders_Id = new DataColumn("orders_Id", typeof(int), "", System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnorders_Id);
            }
            
            public orderdetailsRow NeworderdetailsRow() {
                return ((orderdetailsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                // We need to ensure that all Rows in the tabled are typed rows.
                // Table calls newRow whenever it needs to create a row.
                // So the following conditions are covered by Row newRow(Record record)
                // * Cursor calls table.addRecord(record) 
                // * table.addRow(object[] values) calls newRow(record)    
                return new orderdetailsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(orderdetailsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.orderdetailsRowChanged != null)) {
                    this.orderdetailsRowChanged(this, new orderdetailsRowChangeEvent(((orderdetailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.orderdetailsRowChanging != null)) {
                    this.orderdetailsRowChanging(this, new orderdetailsRowChangeEvent(((orderdetailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.orderdetailsRowDeleted != null)) {
                    this.orderdetailsRowDeleted(this, new orderdetailsRowChangeEvent(((orderdetailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.orderdetailsRowDeleting != null)) {
                    this.orderdetailsRowDeleting(this, new orderdetailsRowChangeEvent(((orderdetailsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveorderdetailsRow(orderdetailsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        public class orderdetailsRow : DataRow {
            
            private orderdetailsDataTable tableorderdetails;
            
            internal orderdetailsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableorderdetails = ((orderdetailsDataTable)(this.Table));
            }
            
            public string OrderID {
                get {
                    try {
                        return ((string)(this[this.tableorderdetails.OrderIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableorderdetails.OrderIDColumn] = value;
                }
            }
            
            public string ProductID {
                get {
                    try {
                        return ((string)(this[this.tableorderdetails.ProductIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableorderdetails.ProductIDColumn] = value;
                }
            }
            
            public string UnitPrice {
                get {
                    try {
                        return ((string)(this[this.tableorderdetails.UnitPriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableorderdetails.UnitPriceColumn] = value;
                }
            }
            
            public string Quantity {
                get {
                    try {
                        return ((string)(this[this.tableorderdetails.QuantityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableorderdetails.QuantityColumn] = value;
                }
            }
            
            public string Discount {
                get {
                    try {
                        return ((string)(this[this.tableorderdetails.DiscountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableorderdetails.DiscountColumn] = value;
                }
            }
            
            public ordersRow ordersRow {
                get {
                    return ((ordersRow)(this.GetParentRow(this.Table.ParentRelations["orders_orderdetails"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["orders_orderdetails"]);
                }
            }
            
            public bool IsOrderIDNull() {
                return this.IsNull(this.tableorderdetails.OrderIDColumn);
            }
            
            public void SetOrderIDNull() {
                this[this.tableorderdetails.OrderIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsProductIDNull() {
                return this.IsNull(this.tableorderdetails.ProductIDColumn);
            }
            
            public void SetProductIDNull() {
                this[this.tableorderdetails.ProductIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsUnitPriceNull() {
                return this.IsNull(this.tableorderdetails.UnitPriceColumn);
            }
            
            public void SetUnitPriceNull() {
                this[this.tableorderdetails.UnitPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsQuantityNull() {
                return this.IsNull(this.tableorderdetails.QuantityColumn);
            }
            
            public void SetQuantityNull() {
                this[this.tableorderdetails.QuantityColumn] = System.Convert.DBNull;
            }
            
            public bool IsDiscountNull() {
                return this.IsNull(this.tableorderdetails.DiscountColumn);
            }
            
            public void SetDiscountNull() {
                this[this.tableorderdetails.DiscountColumn] = System.Convert.DBNull;
            }
        }
        
        public class orderdetailsRowChangeEvent : EventArgs {
            
            private orderdetailsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public orderdetailsRowChangeEvent(orderdetailsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public orderdetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
