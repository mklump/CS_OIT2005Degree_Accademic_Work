<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0034)http://cslibrary.stanford.edu/105/ -->
<HTML><HEAD><TITLE>Linked List Problems</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<META 
content="Stanford CS Education Library: a 33 page collection of 18 linked list problems and their solutions in the C language. Includes explanations, C code, and some memory drawings. Working with real code like this is is the best way to improve your skill with complex pointer code." 
name=description>
<META 
content="linked lists, linked list problems, linked list, insert, delete, reverse, iterative, recursive, introduction, manual, explanation, reference" 
name=keywords>
<META content="MSHTML 6.00.2462.0" name=GENERATOR>
<META 
content="Stanford CS Education Library: a 33 page collection of 18 linked list problems and their solutions in the C language. Includes explanations, C code, and some memory drawings. Working with real code like this is is the best way to improve your skill with complex pointer code." 
name=Description>
<META 
content="linked lists, linked list problems, linked list, insert, delete, reverse, iterative, recursive, problems, linked list, linked list problems" 
name=KeyWords></HEAD>
<BODY bgColor=#ffffff>
<H1>Linked List Problems</H1>Stanford CS Education Library: A quick review of 
linked list basics followed by 18 linked list problems, basic through advanced, 
with solution code in C/C++.&nbsp; Nobody really uses linked lists any more, so 
why bother with these problems? Linked lists are a superb source of complex 
practice problems. Link list problems are simple to define, yet can have 
complicated, pointer-intensive solutions (which is why they are often used on 
exams and in interviews). If you are serious about your pointer/algorithm 
skills, there's no substitute for practice and this is the place to start. 
<P>For a few problems, multiple solutions are presented, such as iteration vs. 
recursion or dummy node vs. reference pointer. The problems are: Count, GetNth, 
DeleteList, Pop, InsertNth, SortedInsert, InsertSort, Append, FrontBackSplit, 
RemoveDuplicates, MoveNode, AlternatingSplit, ShuffleMerge, SortedMerge, 
SortedIntersect, Reverse, and RecursiveReverse. 
<H3>Download <A 
href="http://cslibrary.stanford.edu/105/LinkedListProblems.pdf">LinkedListProblems.pdf</A></H3>(revised 
Jan, 2002) 
<P>See also... 
<UL>
  <LI>The silly <A href="http://cslibrary.stanford.edu/104/">Binky Pointer 
  Fun</A>&nbsp; video -- animated introduction to pointers 
  <LI><A href="http://cslibrary.stanford.edu/102/">Pointers and Memory</A> -- 
  basic concepts of pointers and memory 
  <LI><A href="http://cslibrary.stanford.edu/103/">Linked List Basics</A> -- 
  introduction to the basics of linked lists 
  <LI><A href="http://cslibrary.stanford.edu/110/">Binary Trees</A> -- all about 
  binary trees 
  <LI><A href="http://cslibrary.stanford.edu/109/">The Great Tree-List Recursion 
  Problem</A> -- the greatest pointer/recursion problem ever&nbsp; (advanced) 
  </LI></UL>
<P><BR><A href="http://cslibrary.stanford.edu/help.html">Downloading help 
<HR>
</A>Up to the <A href="http://cslibrary.stanford.edu/">CS Education Library 
Home</A> </BODY></HTML>
