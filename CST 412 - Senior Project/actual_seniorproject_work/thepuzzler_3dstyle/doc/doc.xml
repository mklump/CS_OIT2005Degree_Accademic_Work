<?xml version="1.0" encoding="utf-8"?><ndoc SchemaVersion="1.3"><feedbackEmail>matthew@klump-pdx.com</feedbackEmail><copyright text="Hedron Inc. 2004" /><threadsafety static="true" instance="true" /><preliminary /><namespaceHierarchies><namespaceHierarchy name="ns_RedBlack"><hierarchyType id="T:System.Object"><hierarchyType id="T:ns_RedBlack.RedBlack" /><hierarchyType id="T:ns_RedBlack.RedBlack_TestClass" /><hierarchyType id="T:ns_RedBlack.Sentinel" /></hierarchyType></namespaceHierarchy><namespaceHierarchy name="Puzzle_Creation"><hierarchyType id="T:System.Object"><hierarchyType id="T:Puzzle_Creation.PuzzleCreator_TestClass" /><hierarchyType id="T:Puzzle_Solution.Solution"><hierarchyType id="T:Puzzle_Creation.PuzzleCreator"><hierarchyType id="T:Puzzle_Creation.CCTE_LW" /><hierarchyType id="T:Puzzle_Creation.CCTN_LS" /><hierarchyType id="T:Puzzle_Creation.CCTS_LN" /><hierarchyType id="T:Puzzle_Creation.CCTW_LE" /><hierarchyType id="T:Puzzle_Creation.NESide_SWSide" /><hierarchyType id="T:Puzzle_Creation.NETE_SWLE" /><hierarchyType id="T:Puzzle_Creation.NVE_SVE" /><hierarchyType id="T:Puzzle_Creation.NWSide_SESide" /><hierarchyType id="T:Puzzle_Creation.NWTE_SELE" /><hierarchyType id="T:Puzzle_Creation.SETE_NWLE" /><hierarchyType id="T:Puzzle_Creation.SWTE_NELE" /><hierarchyType id="T:Puzzle_Creation.Top_Bottom" /><hierarchyType id="T:Puzzle_Creation.WVE_EVE" /></hierarchyType></hierarchyType></hierarchyType></namespaceHierarchy><namespaceHierarchy name="ns_DictionaryCreator"><hierarchyType id="T:System.Object"><hierarchyType id="T:ns_DictionaryCreator.DictionaryCreator_TestClass" /><hierarchyType id="T:Puzzle_Solution.Solution"><hierarchyType id="T:ns_DictionaryCreator.DictionaryCreator" /></hierarchyType></hierarchyType></namespaceHierarchy><namespaceHierarchy name="ns_ManageStats"><hierarchyType id="T:System.Object"><hierarchyType id="T:ns_ManageStats.ManageStats" /></hierarchyType></namespaceHierarchy><namespaceHierarchy name="ManageDB"><hierarchyType id="T:System.Object"><hierarchyType id="T:ManageDB.ManageDataBase" /></hierarchyType></namespaceHierarchy><namespaceHierarchy name="PuzzleConfig"><hierarchyType id="T:System.Object"><hierarchyType id="T:PuzzleConfig.PuzzleConfiguration" /></hierarchyType></namespaceHierarchy><namespaceHierarchy name="Puzzle_Solution"><hierarchyType id="T:System.Object"><hierarchyType id="T:Puzzle_Solution.Solution"><hierarchyType id="T:Puzzle_Solution.Solution_CCTELW" /><hierarchyType id="T:Puzzle_Solution.Solution_CCTNLS" /><hierarchyType id="T:Puzzle_Solution.Solution_CCTSLN" /><hierarchyType id="T:Puzzle_Solution.Solution_CCTWLE" /><hierarchyType id="T:Puzzle_Solution.Solution_NESideSWSide" /><hierarchyType id="T:Puzzle_Solution.Solution_NETESWLE" /><hierarchyType id="T:Puzzle_Solution.Solution_NVESVE" /><hierarchyType id="T:Puzzle_Solution.Solution_NWSideSESide" /><hierarchyType id="T:Puzzle_Solution.Solution_NWTESELE" /><hierarchyType id="T:Puzzle_Solution.Solution_SETENWLE" /><hierarchyType id="T:Puzzle_Solution.Solution_SWTENELE" /><hierarchyType id="T:Puzzle_Solution.Solution_TOPBOTTOM" /><hierarchyType id="T:Puzzle_Solution.Solution_WVEEVE" /></hierarchyType><hierarchyType id="T:Puzzle_Solution.Solution_TestClass" /></hierarchyType></namespaceHierarchy></namespaceHierarchies><assembly name="PuzzleConfig" version="1.0.1948.40942"><attribute name="System.Reflection.AssemblyKeyNameAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyKeyNameAttribute" /></attribute><attribute name="System.Reflection.AssemblyKeyFileAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyKeyFileAttribute" /></attribute><attribute name="System.Reflection.AssemblyDelaySignAttribute" target="assembly"><property name="DelaySign" type="System.Boolean" value="False" /><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyDelaySignAttribute" /></attribute><attribute name="System.Reflection.AssemblyTrademarkAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyTrademarkAttribute" /></attribute><attribute name="System.Reflection.AssemblyCopyrightAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyCopyrightAttribute" /></attribute><attribute name="System.Reflection.AssemblyProductAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyProductAttribute" /></attribute><attribute name="System.Reflection.AssemblyCompanyAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyCompanyAttribute" /></attribute><attribute name="System.Reflection.AssemblyConfigurationAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyConfigurationAttribute" /></attribute><attribute name="System.Reflection.AssemblyDescriptionAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyDescriptionAttribute" /></attribute><attribute name="System.Reflection.AssemblyTitleAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyTitleAttribute" /></attribute><attribute name="System.Diagnostics.DebuggableAttribute" target="assembly"><property name="IsJITTrackingEnabled" type="System.Boolean" value="True" /><property name="IsJITOptimizerDisabled" type="System.Boolean" value="True" /><property name="TypeId" type="System.Object" value="System.Diagnostics.DebuggableAttribute" /></attribute><module name="PuzzleConfig.dll"><namespace name="PuzzleConfig"><class name="PuzzleConfiguration" id="T:PuzzleConfig.PuzzleConfiguration" access="Public"><documentation><summary> This class accepts and checks the users input to The Puzzler - 3D Style and checks for validity. </summary></documentation><constructor name=".ctor" id="M:PuzzleConfig.PuzzleConfiguration.#ctor" access="Public" contract="Normal"><documentation><summary> Default constructor </summary></documentation></constructor><field name="dictionarySpecs" id="F:PuzzleConfig.PuzzleConfiguration.dictionarySpecs" access="Public" contract="Static" type="System.Int32[]" valueType="false"><documentation><summary> Represents the dictionary specifications for passing to Main.aspx Page </summary></documentation></field><field name="puzzleSizes" id="F:PuzzleConfig.PuzzleConfiguration.puzzleSizes" access="Public" contract="Static" type="System.Int32[]" valueType="false"><documentation><summary> Represents the three puzzle dimentions for verification </summary></documentation></field><method name="Finalize" id="M:PuzzleConfig.PuzzleConfiguration.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:PuzzleConfig.PuzzleConfiguration.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:PuzzleConfig.PuzzleConfiguration.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:PuzzleConfig.PuzzleConfiguration.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="CheckIntegerInput" id="M:PuzzleConfig.PuzzleConfiguration.CheckIntegerInput(System.String,System.String,System.String,System.String,System.String,System.String)" access="Public" contract="Static" returnType="System.String" valueType="false"><documentation><summary> This public operation will check all the user's data enteries for valid values as all integers within the boundaries of a valid System.Int32 </summary>
            <param name="baseDiction">Base Dictionary Selection</param>
            <param name="dictionSize">Dictionary Size Specification</param>
            <param name="minWord">Minimum Word Size Specification</param>
            <param name="Xpuzzle">X Dimentional Length Specification</param>
            <param name="Ypuzzle">Y Dimentional Length Specification</param>
            <param name="Zpuzzle">Z Dimentional Length Specification</param>
            <returns>The appropriate error condition if any exists and based on user input.</returns></documentation><parameter name="baseDiction" type="System.String" valueType="false" /><parameter name="dictionSize" type="System.String" valueType="false" /><parameter name="minWord" type="System.String" valueType="false" /><parameter name="Xpuzzle" type="System.String" valueType="false" /><parameter name="Ypuzzle" type="System.String" valueType="false" /><parameter name="Zpuzzle" type="System.String" valueType="false" /></method><method name="CheckDictionaryParameters" id="M:PuzzleConfig.PuzzleConfiguration.CheckDictionaryParameters(System.Int32,System.Int32,System.Int32,System.Int32[])" access="Public" contract="Static" returnType="System.String" valueType="false"><documentation><summary> This helper method will validate the arguements provided by the user. The static number limitations are based solely on the known contents of each dictionary word list file. </summary>
            <param name="baseDictionary">The number specifying which base dictionary to use.</param>
            <param name="dictionarySize">The number specifying how many words to randomly select.</param>
            <param name="minWordSize">The number specifying the minimum dictionary word size.</param>
            <param name="puzzleSizes">Contains the puzzle dimentions to check minimum word length.</param>
            <returns>The error string specific to the dictionary's current configuration, if any.</returns></documentation><parameter name="baseDictionary" type="System.Int32" valueType="true" /><parameter name="dictionarySize" type="System.Int32" valueType="true" /><parameter name="minWordSize" type="System.Int32" valueType="true" /><parameter name="puzzleSizes" type="System.Int32[]" valueType="false" /></method><method name="CheckPuzzleParameters" id="M:PuzzleConfig.PuzzleConfiguration.CheckPuzzleParameters(System.Int32[])" access="Public" contract="Static" returnType="System.String" valueType="false"><documentation><summary> This operation checks the dimentional lengths of the puzzle as provided by the user to see if they'd considered "reasonable" not to leave the user waiting for an eternity for the creation and solution algorithms to finish processing. </summary>
            <param name="puzzleSizes">Specifies the dimentional lengths to check.</param>
            <returns>The error string specific to the puzzle's current configuration.</returns></documentation><parameter name="puzzleSizes" type="System.Int32[]" valueType="false" /></method><method name="IsNumeric" id="M:PuzzleConfig.PuzzleConfiguration.IsNumeric(System.String)" access="Private" contract="Static" returnType="System.Boolean" valueType="true"><documentation><summary> This helper method determines, by the specified parameter str, wheather or not all the characters of this string instance are numeric. </summary>
            <param name="str">System.string to check.</param>
            <returns>True if all of word's characters are numeric, and false if any single character is not other than the negative sign or the decimal point.</returns></documentation><parameter name="str" type="System.String" valueType="false" /></method><method name="GetType" id="M:PuzzleConfig.PuzzleConfiguration.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:PuzzleConfig.PuzzleConfiguration.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:PuzzleConfig.PuzzleConfiguration.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:PuzzleConfig.PuzzleConfiguration.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class></namespace></module></assembly><assembly name="Puzzle_Creation" version="1.0.1948.40944"><attribute name="System.Reflection.AssemblyTrademarkAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyTrademarkAttribute" /></attribute><attribute name="System.Diagnostics.DebuggableAttribute" target="assembly"><property name="IsJITTrackingEnabled" type="System.Boolean" value="True" /><property name="IsJITOptimizerDisabled" type="System.Boolean" value="True" /><property name="TypeId" type="System.Object" value="System.Diagnostics.DebuggableAttribute" /></attribute><attribute name="System.Reflection.AssemblyKeyNameAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyKeyNameAttribute" /></attribute><attribute name="System.Reflection.AssemblyKeyFileAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyKeyFileAttribute" /></attribute><attribute name="System.Reflection.AssemblyDelaySignAttribute" target="assembly"><property name="DelaySign" type="System.Boolean" value="False" /><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyDelaySignAttribute" /></attribute><attribute name="System.Reflection.AssemblyCopyrightAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyCopyrightAttribute" /></attribute><attribute name="System.Reflection.AssemblyProductAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyProductAttribute" /></attribute><attribute name="System.Reflection.AssemblyCompanyAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyCompanyAttribute" /></attribute><attribute name="System.Reflection.AssemblyConfigurationAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyConfigurationAttribute" /></attribute><attribute name="System.Reflection.AssemblyDescriptionAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyDescriptionAttribute" /></attribute><attribute name="System.Reflection.AssemblyTitleAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyTitleAttribute" /></attribute><module name="Puzzle_Creation.dll"><namespace name="Puzzle_Creation"><class name="PuzzleCreator" id="T:Puzzle_Creation.PuzzleCreator" access="Public" baseType="Solution"><documentation><summary> This class is responsible for random creating an appropriate 3D puzzle. </summary></documentation><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /><derivedBy id="T:Puzzle_Creation.CCTE_LW" /><derivedBy id="T:Puzzle_Creation.CCTN_LS" /><derivedBy id="T:Puzzle_Creation.CCTS_LN" /><derivedBy id="T:Puzzle_Creation.CCTW_LE" /><derivedBy id="T:Puzzle_Creation.NESide_SWSide" /><derivedBy id="T:Puzzle_Creation.NETE_SWLE" /><derivedBy id="T:Puzzle_Creation.NVE_SVE" /><derivedBy id="T:Puzzle_Creation.NWSide_SESide" /><derivedBy id="T:Puzzle_Creation.NWTE_SELE" /><derivedBy id="T:Puzzle_Creation.SETE_NWLE" /><derivedBy id="T:Puzzle_Creation.SWTE_NELE" /><derivedBy id="T:Puzzle_Creation.Top_Bottom" /><derivedBy id="T:Puzzle_Creation.WVE_EVE" /><constructor name=".ctor" id="M:Puzzle_Creation.PuzzleCreator.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor for the PuzzleCreator class. </summary></documentation></constructor><field name="dictionaryCreator" id="F:Puzzle_Creation.PuzzleCreator.dictionaryCreator" access="Family" contract="Normal" type="ns_DictionaryCreator.DictionaryCreator" valueType="false"><documentation><summary> DictionaryCreator reference needed for the puzzle's constructon. </summary></documentation></field><field name="random" id="F:Puzzle_Creation.PuzzleCreator.random" access="Family" contract="Normal" type="System.Random" valueType="false"><documentation><summary> Random number generator of the puzzle construction. </summary></documentation></field><field name="ccts_ln" id="F:Puzzle_Creation.PuzzleCreator.ccts_ln" access="Private" contract="Normal" type="Puzzle_Creation.CCTS_LN" valueType="false" /><field name="cctn_ls" id="F:Puzzle_Creation.PuzzleCreator.cctn_ls" access="Private" contract="Normal" type="Puzzle_Creation.CCTN_LS" valueType="false" /><field name="ccte_lw" id="F:Puzzle_Creation.PuzzleCreator.ccte_lw" access="Private" contract="Normal" type="Puzzle_Creation.CCTE_LW" valueType="false" /><field name="cctw_le" id="F:Puzzle_Creation.PuzzleCreator.cctw_le" access="Private" contract="Normal" type="Puzzle_Creation.CCTW_LE" valueType="false" /><field name="swte_nele" id="F:Puzzle_Creation.PuzzleCreator.swte_nele" access="Private" contract="Normal" type="Puzzle_Creation.SWTE_NELE" valueType="false" /><field name="sete_nwle" id="F:Puzzle_Creation.PuzzleCreator.sete_nwle" access="Private" contract="Normal" type="Puzzle_Creation.SETE_NWLE" valueType="false" /><field name="nete_swle" id="F:Puzzle_Creation.PuzzleCreator.nete_swle" access="Private" contract="Normal" type="Puzzle_Creation.NETE_SWLE" valueType="false" /><field name="nwte_sele" id="F:Puzzle_Creation.PuzzleCreator.nwte_sele" access="Private" contract="Normal" type="Puzzle_Creation.NWTE_SELE" valueType="false" /><field name="wve_eve" id="F:Puzzle_Creation.PuzzleCreator.wve_eve" access="Private" contract="Normal" type="Puzzle_Creation.WVE_EVE" valueType="false" /><field name="nve_sve" id="F:Puzzle_Creation.PuzzleCreator.nve_sve" access="Private" contract="Normal" type="Puzzle_Creation.NVE_SVE" valueType="false" /><field name="top_bottom" id="F:Puzzle_Creation.PuzzleCreator.top_bottom" access="Private" contract="Normal" type="Puzzle_Creation.Top_Bottom" valueType="false" /><field name="nwside_seside" id="F:Puzzle_Creation.PuzzleCreator.nwside_seside" access="Private" contract="Normal" type="Puzzle_Creation.NWSide_SESide" valueType="false" /><field name="neside_swside" id="F:Puzzle_Creation.PuzzleCreator.neside_swside" access="Private" contract="Normal" type="Puzzle_Creation.NESide_SWSide" valueType="false" /><field name="direction" id="F:Puzzle_Creation.PuzzleCreator.direction" access="Private" contract="Static" type="System.Int32" valueType="true"><documentation><summary> This is an index variable that will navigate the the puzzle char[,,] structure. </summary></documentation></field><field name="xBoundary" id="F:Puzzle_Creation.PuzzleCreator.xBoundary" access="Family" contract="Static" type="System.Int32" valueType="true"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="yBoundary" id="F:Puzzle_Creation.PuzzleCreator.yBoundary" access="Family" contract="Static" type="System.Int32" valueType="true"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="zBoundary" id="F:Puzzle_Creation.PuzzleCreator.zBoundary" access="Family" contract="Static" type="System.Int32" valueType="true"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="puzzle" id="F:Puzzle_Creation.PuzzleCreator.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Creation.PuzzleCreator.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Creation.PuzzleCreator.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Creation.PuzzleCreator.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Creation.PuzzleCreator.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Creation.PuzzleCreator.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Creation.PuzzleCreator.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Creation.PuzzleCreator.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Creation.PuzzleCreator.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Creation.PuzzleCreator.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Creation.PuzzleCreator.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Creation.PuzzleCreator.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="Direction" id="P:Puzzle_Creation.PuzzleCreator.Direction" access="Public" contract="Normal" type="System.Int32" valueType="true" get="true" set="false"><documentation><summary> Property Direction (int) read access to directional argorithm indicator. </summary></documentation></property><property name="WordsFound" id="P:Puzzle_Creation.PuzzleCreator.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Creation.PuzzleCreator.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Creation.PuzzleCreator.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Parse" id="M:Puzzle_Creation.PuzzleCreator.Parse(ns_RedBlack.RedBlack)" access="Family" contract="Virtual" returnType="System.Void" valueType="true"><documentation><summary> Polymorphically overrideable method for respective parsing. </summary>
            <param name="head">This RedBlack Tree node is the head node of the tree representing the dictionary.</param></documentation><parameter name="head" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="Finalize" id="M:Puzzle_Creation.PuzzleCreator.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Creation.PuzzleCreator.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.PuzzleCreator.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Creation.PuzzleCreator.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetBoundaries" id="M:Puzzle_Creation.PuzzleCreator.GetBoundaries" access="Public" contract="Normal" returnType="System.Int32[]" valueType="false"><documentation><summary> Public helper method for getting the puzzle boundaries. </summary>
            <returns>The boundaries in the form of an int[] of three elements each containing the respective boundaries.</returns></documentation></method><method name="FillRemainingCubes" id="M:Puzzle_Creation.PuzzleCreator.FillRemainingCubes" access="Private" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This method is responsible for cheching the remaining empty cubes in the puzzle, and then fill them with a random character from a to z lowercase. </summary></documentation></method><method name="GeneratePuzzle" id="M:Puzzle_Creation.PuzzleCreator.GeneratePuzzle" access="Public" contract="Normal" returnType="System.Char[,,]" valueType="false"><documentation><summary> This method calls all of the overriden Parse() methods and merges all of the resultant puzzle directions into one puzzle. </summary>
            <returns>The method will return the Randomly Generated Puzzle.</returns></documentation></method><method name="GetLengthDimentions" id="M:Puzzle_Creation.PuzzleCreator.GetLengthDimentions" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will will get the length of each x, y, and z side of the char[,,] puzzle </summary></documentation></method><method name="Reverse" id="M:Puzzle_Creation.PuzzleCreator.Reverse(System.Char[])" access="Public" contract="Normal" returnType="System.Char[]" valueType="false" hiding="true"><documentation><summary> This method will reverse a C# char[]. </summary>
            <param name="str">This parameter is the char[] string to reverse.</param>
            <returns>The reversed char[] str string.</returns></documentation><parameter name="str" type="System.Char[]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Creation.PuzzleCreator.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Creation.PuzzleCreator.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Creation.PuzzleCreator.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Creation.PuzzleCreator.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Creation.PuzzleCreator.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Creation.PuzzleCreator.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Creation.PuzzleCreator.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Creation.PuzzleCreator.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Creation.PuzzleCreator.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Creation.PuzzleCreator.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Creation.PuzzleCreator.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Creation.PuzzleCreator.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Creation.PuzzleCreator.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Creation.PuzzleCreator.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Creation.PuzzleCreator.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Creation.PuzzleCreator.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Creation.PuzzleCreator.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Creation.PuzzleCreator.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Creation.PuzzleCreator.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Creation.PuzzleCreator.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Creation.PuzzleCreator.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.PuzzleCreator.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Creation.PuzzleCreator.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="CCTE_LW" id="T:Puzzle_Creation.CCTE_LW" access="Public" sealed="true" baseType="PuzzleCreator"><documentation><summary> Summary description for CCTE_LW. </summary></documentation><base name="PuzzleCreator" id="T:Puzzle_Creation.PuzzleCreator" type="Puzzle_Creation.PuzzleCreator"><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /></base><constructor name=".ctor" id="M:Puzzle_Creation.CCTE_LW.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor for Corner to Corner Top East to Lower West. </summary></documentation></constructor><field name="slots" id="F:Puzzle_Creation.CCTE_LW.slots" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Part of temporary helper interger variable. </summary></documentation></field><field name="topHalf" id="F:Puzzle_Creation.CCTE_LW.topHalf" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Part of temporary helper interger variable. </summary></documentation></field><field name="dictionaryCreator" id="F:Puzzle_Creation.CCTE_LW.dictionaryCreator" access="Family" contract="Normal" type="ns_DictionaryCreator.DictionaryCreator" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> DictionaryCreator reference needed for the puzzle's constructon. </summary></documentation></field><field name="random" id="F:Puzzle_Creation.CCTE_LW.random" access="Family" contract="Normal" type="System.Random" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Random number generator of the puzzle construction. </summary></documentation></field><field name="xBoundary" id="F:Puzzle_Creation.CCTE_LW.xBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="yBoundary" id="F:Puzzle_Creation.CCTE_LW.yBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="zBoundary" id="F:Puzzle_Creation.CCTE_LW.zBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="puzzle" id="F:Puzzle_Creation.CCTE_LW.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Creation.CCTE_LW.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Creation.CCTE_LW.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Creation.CCTE_LW.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Creation.CCTE_LW.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Creation.CCTE_LW.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Creation.CCTE_LW.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Creation.CCTE_LW.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Creation.CCTE_LW.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Creation.CCTE_LW.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Creation.CCTE_LW.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Creation.CCTE_LW.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="Direction" id="P:Puzzle_Creation.CCTE_LW.Direction" access="Public" contract="Normal" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator" get="true" set="false"><documentation><summary> Property Direction (int) read access to directional argorithm indicator. </summary></documentation></property><property name="WordsFound" id="P:Puzzle_Creation.CCTE_LW.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Creation.CCTE_LW.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Creation.CCTE_LW.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Parse" id="M:Puzzle_Creation.CCTE_LW.Parse(ns_RedBlack.RedBlack)" access="Family" contract="Override" returnType="System.Void" valueType="true"><documentation><summary> Polymorphically overrideable method for respective parsing. </summary>
            <param name="node">This RedBlack Tree node is the next node in the tree representing the dictionary.</param></documentation><parameter name="node" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="Finalize" id="M:Puzzle_Creation.CCTE_LW.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Creation.CCTE_LW.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.CCTE_LW.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Creation.CCTE_LW.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="CountInsertLength" id="M:Puzzle_Creation.CCTE_LW.CountInsertLength(System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Int32" valueType="true"><documentation><summary> This helper method count the next available set of cells to insert into. </summary>
            <returns>The next available amount of cells.</returns>
            <param name="posx">X start position.</param>
            <param name="posy">Y start position.</param>
            <param name="posz">Z start position.</param></documentation><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="InsertWord" id="M:Puzzle_Creation.CCTE_LW.InsertWord(System.Char[],System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will insert the specified word starting at the (posx,posy,posz) position along the CCTS_LN direction inside the puzzle. </summary>
            <param name="word">Next word to insert.</param>
            <param name="posx">X start position to insert.</param>
            <param name="posy">Y start position to insert.</param>
            <param name="posz">Z start position to insert.</param></documentation><parameter name="word" type="System.Char[]" valueType="false" /><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="GetBoundaries" id="M:Puzzle_Creation.CCTE_LW.GetBoundaries" access="Public" contract="Normal" returnType="System.Int32[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Public helper method for getting the puzzle boundaries. </summary></documentation></method><method name="GeneratePuzzle" id="M:Puzzle_Creation.CCTE_LW.GeneratePuzzle" access="Public" contract="Normal" returnType="System.Char[,,]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method calls all of the overriden Parse() methods and merges all of the resultant puzzle directions into one puzzle. </summary></documentation></method><method name="GetLengthDimentions" id="M:Puzzle_Creation.CCTE_LW.GetLengthDimentions" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This helper method will will get the length of each x, y, and z side of the char[,,] puzzle </summary></documentation></method><method name="Reverse" id="M:Puzzle_Creation.CCTE_LW.Reverse(System.Char[])" access="Public" contract="Normal" returnType="System.Char[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method will reverse a C# char[]. </summary></documentation><parameter name="str" type="System.Char[]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Creation.CCTE_LW.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Creation.CCTE_LW.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Creation.CCTE_LW.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Creation.CCTE_LW.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Creation.CCTE_LW.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Creation.CCTE_LW.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Creation.CCTE_LW.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Creation.CCTE_LW.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Creation.CCTE_LW.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Creation.CCTE_LW.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Creation.CCTE_LW.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Creation.CCTE_LW.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Creation.CCTE_LW.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Creation.CCTE_LW.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Creation.CCTE_LW.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Creation.CCTE_LW.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Creation.CCTE_LW.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Creation.CCTE_LW.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Creation.CCTE_LW.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Creation.CCTE_LW.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Creation.CCTE_LW.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.CCTE_LW.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Creation.CCTE_LW.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="CCTN_LS" id="T:Puzzle_Creation.CCTN_LS" access="Public" sealed="true" baseType="PuzzleCreator"><documentation><summary> Summary description for CCTN_LS. </summary></documentation><base name="PuzzleCreator" id="T:Puzzle_Creation.PuzzleCreator" type="Puzzle_Creation.PuzzleCreator"><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /></base><constructor name=".ctor" id="M:Puzzle_Creation.CCTN_LS.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor for Corner to Corner Top North to Lower South Class. </summary></documentation></constructor><field name="slots" id="F:Puzzle_Creation.CCTN_LS.slots" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Part of temporary helper interger variable. </summary></documentation></field><field name="topHalf" id="F:Puzzle_Creation.CCTN_LS.topHalf" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Part of temporary helper interger variable. </summary></documentation></field><field name="dictionaryCreator" id="F:Puzzle_Creation.CCTN_LS.dictionaryCreator" access="Family" contract="Normal" type="ns_DictionaryCreator.DictionaryCreator" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> DictionaryCreator reference needed for the puzzle's constructon. </summary></documentation></field><field name="random" id="F:Puzzle_Creation.CCTN_LS.random" access="Family" contract="Normal" type="System.Random" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Random number generator of the puzzle construction. </summary></documentation></field><field name="xBoundary" id="F:Puzzle_Creation.CCTN_LS.xBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="yBoundary" id="F:Puzzle_Creation.CCTN_LS.yBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="zBoundary" id="F:Puzzle_Creation.CCTN_LS.zBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="puzzle" id="F:Puzzle_Creation.CCTN_LS.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Creation.CCTN_LS.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Creation.CCTN_LS.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Creation.CCTN_LS.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Creation.CCTN_LS.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Creation.CCTN_LS.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Creation.CCTN_LS.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Creation.CCTN_LS.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Creation.CCTN_LS.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Creation.CCTN_LS.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Creation.CCTN_LS.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Creation.CCTN_LS.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="Direction" id="P:Puzzle_Creation.CCTN_LS.Direction" access="Public" contract="Normal" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator" get="true" set="false"><documentation><summary> Property Direction (int) read access to directional argorithm indicator. </summary></documentation></property><property name="WordsFound" id="P:Puzzle_Creation.CCTN_LS.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Creation.CCTN_LS.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Creation.CCTN_LS.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Parse" id="M:Puzzle_Creation.CCTN_LS.Parse(ns_RedBlack.RedBlack)" access="Family" contract="Override" returnType="System.Void" valueType="true"><documentation><summary> Polymorphically overrideable method for respective parsing. </summary>
            <param name="node">This RedBlack Tree node is the next node in the tree representing the dictionary.</param></documentation><parameter name="node" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="Finalize" id="M:Puzzle_Creation.CCTN_LS.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Creation.CCTN_LS.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.CCTN_LS.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Creation.CCTN_LS.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="CountInsertLength" id="M:Puzzle_Creation.CCTN_LS.CountInsertLength(System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Int32" valueType="true"><documentation><summary> This helper method count the next available set of cells to insert into. </summary>
            <returns>The next available amount of cells.</returns>
            <param name="posx">X start position.</param>
            <param name="posy">Y start position.</param>
            <param name="posz">Z start position.</param></documentation><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="InsertWord" id="M:Puzzle_Creation.CCTN_LS.InsertWord(System.Char[],System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will insert the specified word starting at the (posx,posy,posz) position along the CCTS_LN direction inside the puzzle. </summary>
            <param name="word">Next word to insert.</param>
            <param name="posx">X start position to insert.</param>
            <param name="posy">Y start position to insert.</param>
            <param name="posz">Z start position to insert.</param></documentation><parameter name="word" type="System.Char[]" valueType="false" /><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="GetBoundaries" id="M:Puzzle_Creation.CCTN_LS.GetBoundaries" access="Public" contract="Normal" returnType="System.Int32[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Public helper method for getting the puzzle boundaries. </summary></documentation></method><method name="GeneratePuzzle" id="M:Puzzle_Creation.CCTN_LS.GeneratePuzzle" access="Public" contract="Normal" returnType="System.Char[,,]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method calls all of the overriden Parse() methods and merges all of the resultant puzzle directions into one puzzle. </summary></documentation></method><method name="GetLengthDimentions" id="M:Puzzle_Creation.CCTN_LS.GetLengthDimentions" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This helper method will will get the length of each x, y, and z side of the char[,,] puzzle </summary></documentation></method><method name="Reverse" id="M:Puzzle_Creation.CCTN_LS.Reverse(System.Char[])" access="Public" contract="Normal" returnType="System.Char[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method will reverse a C# char[]. </summary></documentation><parameter name="str" type="System.Char[]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Creation.CCTN_LS.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Creation.CCTN_LS.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Creation.CCTN_LS.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Creation.CCTN_LS.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Creation.CCTN_LS.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Creation.CCTN_LS.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Creation.CCTN_LS.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Creation.CCTN_LS.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Creation.CCTN_LS.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Creation.CCTN_LS.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Creation.CCTN_LS.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Creation.CCTN_LS.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Creation.CCTN_LS.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Creation.CCTN_LS.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Creation.CCTN_LS.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Creation.CCTN_LS.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Creation.CCTN_LS.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Creation.CCTN_LS.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Creation.CCTN_LS.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Creation.CCTN_LS.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Creation.CCTN_LS.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.CCTN_LS.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Creation.CCTN_LS.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="CCTS_LN" id="T:Puzzle_Creation.CCTS_LN" access="Public" sealed="true" baseType="PuzzleCreator"><documentation><summary> Summary description for CCTS_LN. This class is responsible for addressing all puzzle cell in the perpendicular direction of Corner to Coner, Top South to the Lower North as well well as the reverse direction Lower North to Top South. </summary></documentation><base name="PuzzleCreator" id="T:Puzzle_Creation.PuzzleCreator" type="Puzzle_Creation.PuzzleCreator"><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /></base><constructor name=".ctor" id="M:Puzzle_Creation.CCTS_LN.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor for Corner to Corner Top South to Lower North Class. </summary></documentation></constructor><field name="slots" id="F:Puzzle_Creation.CCTS_LN.slots" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Part of temporary helper interger variable. </summary></documentation></field><field name="topHalf" id="F:Puzzle_Creation.CCTS_LN.topHalf" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Part of temporary helper interger variable. </summary></documentation></field><field name="dictionaryCreator" id="F:Puzzle_Creation.CCTS_LN.dictionaryCreator" access="Family" contract="Normal" type="ns_DictionaryCreator.DictionaryCreator" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> DictionaryCreator reference needed for the puzzle's constructon. </summary></documentation></field><field name="random" id="F:Puzzle_Creation.CCTS_LN.random" access="Family" contract="Normal" type="System.Random" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Random number generator of the puzzle construction. </summary></documentation></field><field name="xBoundary" id="F:Puzzle_Creation.CCTS_LN.xBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="yBoundary" id="F:Puzzle_Creation.CCTS_LN.yBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="zBoundary" id="F:Puzzle_Creation.CCTS_LN.zBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="puzzle" id="F:Puzzle_Creation.CCTS_LN.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Creation.CCTS_LN.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Creation.CCTS_LN.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Creation.CCTS_LN.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Creation.CCTS_LN.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Creation.CCTS_LN.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Creation.CCTS_LN.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Creation.CCTS_LN.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Creation.CCTS_LN.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Creation.CCTS_LN.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Creation.CCTS_LN.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Creation.CCTS_LN.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="Direction" id="P:Puzzle_Creation.CCTS_LN.Direction" access="Public" contract="Normal" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator" get="true" set="false"><documentation><summary> Property Direction (int) read access to directional argorithm indicator. </summary></documentation></property><property name="WordsFound" id="P:Puzzle_Creation.CCTS_LN.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Creation.CCTS_LN.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Creation.CCTS_LN.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Parse" id="M:Puzzle_Creation.CCTS_LN.Parse(ns_RedBlack.RedBlack)" access="Family" contract="Override" returnType="System.Void" valueType="true"><documentation><summary> Polymorphically overrideable method for respective parsing. </summary>
            <param name="node">This RedBlack Tree node is the next node in the tree representing the dictionary.</param></documentation><parameter name="node" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="Finalize" id="M:Puzzle_Creation.CCTS_LN.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Creation.CCTS_LN.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.CCTS_LN.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Creation.CCTS_LN.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="CountInsertLength" id="M:Puzzle_Creation.CCTS_LN.CountInsertLength(System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Int32" valueType="true"><documentation><summary> This helper method count the next available set of cells to insert into. </summary>
            <returns>The next available amount of cells.</returns>
            <param name="posx">X start position.</param>
            <param name="posy">Y start position.</param>
            <param name="posz">Z start position.</param></documentation><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="InsertWord" id="M:Puzzle_Creation.CCTS_LN.InsertWord(System.Char[],System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will insert the specified word starting at the (posx,posy,posz) position along the CCTS_LN direction inside the puzzle. </summary>
            <param name="word">Next word to insert.</param>
            <param name="posx">X start position to insert.</param>
            <param name="posy">Y start position to insert.</param>
            <param name="posz">Z start position to insert.</param></documentation><parameter name="word" type="System.Char[]" valueType="false" /><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="GetBoundaries" id="M:Puzzle_Creation.CCTS_LN.GetBoundaries" access="Public" contract="Normal" returnType="System.Int32[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Public helper method for getting the puzzle boundaries. </summary></documentation></method><method name="GeneratePuzzle" id="M:Puzzle_Creation.CCTS_LN.GeneratePuzzle" access="Public" contract="Normal" returnType="System.Char[,,]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method calls all of the overriden Parse() methods and merges all of the resultant puzzle directions into one puzzle. </summary></documentation></method><method name="GetLengthDimentions" id="M:Puzzle_Creation.CCTS_LN.GetLengthDimentions" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This helper method will will get the length of each x, y, and z side of the char[,,] puzzle </summary></documentation></method><method name="Reverse" id="M:Puzzle_Creation.CCTS_LN.Reverse(System.Char[])" access="Public" contract="Normal" returnType="System.Char[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method will reverse a C# char[]. </summary></documentation><parameter name="str" type="System.Char[]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Creation.CCTS_LN.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Creation.CCTS_LN.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Creation.CCTS_LN.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Creation.CCTS_LN.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Creation.CCTS_LN.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Creation.CCTS_LN.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Creation.CCTS_LN.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Creation.CCTS_LN.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Creation.CCTS_LN.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Creation.CCTS_LN.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Creation.CCTS_LN.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Creation.CCTS_LN.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Creation.CCTS_LN.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Creation.CCTS_LN.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Creation.CCTS_LN.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Creation.CCTS_LN.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Creation.CCTS_LN.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Creation.CCTS_LN.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Creation.CCTS_LN.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Creation.CCTS_LN.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Creation.CCTS_LN.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.CCTS_LN.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Creation.CCTS_LN.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="CCTW_LE" id="T:Puzzle_Creation.CCTW_LE" access="Public" sealed="true" baseType="PuzzleCreator"><documentation><summary> Summary description for CCTW_LE. </summary></documentation><base name="PuzzleCreator" id="T:Puzzle_Creation.PuzzleCreator" type="Puzzle_Creation.PuzzleCreator"><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /></base><constructor name=".ctor" id="M:Puzzle_Creation.CCTW_LE.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor for Corner to Corner Top West to Lower East Class. </summary></documentation></constructor><field name="slots" id="F:Puzzle_Creation.CCTW_LE.slots" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Part of temporary helper interger variable. </summary></documentation></field><field name="topHalf" id="F:Puzzle_Creation.CCTW_LE.topHalf" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Part of temporary helper interger variable. </summary></documentation></field><field name="dictionaryCreator" id="F:Puzzle_Creation.CCTW_LE.dictionaryCreator" access="Family" contract="Normal" type="ns_DictionaryCreator.DictionaryCreator" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> DictionaryCreator reference needed for the puzzle's constructon. </summary></documentation></field><field name="random" id="F:Puzzle_Creation.CCTW_LE.random" access="Family" contract="Normal" type="System.Random" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Random number generator of the puzzle construction. </summary></documentation></field><field name="xBoundary" id="F:Puzzle_Creation.CCTW_LE.xBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="yBoundary" id="F:Puzzle_Creation.CCTW_LE.yBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="zBoundary" id="F:Puzzle_Creation.CCTW_LE.zBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="puzzle" id="F:Puzzle_Creation.CCTW_LE.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Creation.CCTW_LE.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Creation.CCTW_LE.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Creation.CCTW_LE.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Creation.CCTW_LE.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Creation.CCTW_LE.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Creation.CCTW_LE.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Creation.CCTW_LE.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Creation.CCTW_LE.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Creation.CCTW_LE.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Creation.CCTW_LE.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Creation.CCTW_LE.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="Direction" id="P:Puzzle_Creation.CCTW_LE.Direction" access="Public" contract="Normal" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator" get="true" set="false"><documentation><summary> Property Direction (int) read access to directional argorithm indicator. </summary></documentation></property><property name="WordsFound" id="P:Puzzle_Creation.CCTW_LE.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Creation.CCTW_LE.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Creation.CCTW_LE.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Parse" id="M:Puzzle_Creation.CCTW_LE.Parse(ns_RedBlack.RedBlack)" access="Family" contract="Override" returnType="System.Void" valueType="true"><documentation><summary> Polymorphically overrideable method for respective parsing. </summary>
            <param name="node">This RedBlack Tree node is the next node in the tree representing the dictionary.</param></documentation><parameter name="node" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="Finalize" id="M:Puzzle_Creation.CCTW_LE.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Creation.CCTW_LE.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.CCTW_LE.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Creation.CCTW_LE.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="CountInsertLength" id="M:Puzzle_Creation.CCTW_LE.CountInsertLength(System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Int32" valueType="true"><documentation><summary> This helper method count the next available set of cells to insert into. </summary>
            <returns>The next available amount of cells.</returns>
            <param name="posx">X start position.</param>
            <param name="posy">Y start position.</param>
            <param name="posz">Z start position.</param></documentation><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="InsertWord" id="M:Puzzle_Creation.CCTW_LE.InsertWord(System.Char[],System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will insert the specified word starting at the (posx,posy,posz) position along the CCTS_LN direction inside the puzzle. </summary>
            <param name="word">Next word to insert.</param>
            <param name="posx">X start position to insert.</param>
            <param name="posy">Y start position to insert.</param>
            <param name="posz">Z start position to insert.</param></documentation><parameter name="word" type="System.Char[]" valueType="false" /><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="GetBoundaries" id="M:Puzzle_Creation.CCTW_LE.GetBoundaries" access="Public" contract="Normal" returnType="System.Int32[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Public helper method for getting the puzzle boundaries. </summary></documentation></method><method name="GeneratePuzzle" id="M:Puzzle_Creation.CCTW_LE.GeneratePuzzle" access="Public" contract="Normal" returnType="System.Char[,,]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method calls all of the overriden Parse() methods and merges all of the resultant puzzle directions into one puzzle. </summary></documentation></method><method name="GetLengthDimentions" id="M:Puzzle_Creation.CCTW_LE.GetLengthDimentions" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This helper method will will get the length of each x, y, and z side of the char[,,] puzzle </summary></documentation></method><method name="Reverse" id="M:Puzzle_Creation.CCTW_LE.Reverse(System.Char[])" access="Public" contract="Normal" returnType="System.Char[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method will reverse a C# char[]. </summary></documentation><parameter name="str" type="System.Char[]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Creation.CCTW_LE.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Creation.CCTW_LE.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Creation.CCTW_LE.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Creation.CCTW_LE.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Creation.CCTW_LE.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Creation.CCTW_LE.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Creation.CCTW_LE.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Creation.CCTW_LE.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Creation.CCTW_LE.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Creation.CCTW_LE.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Creation.CCTW_LE.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Creation.CCTW_LE.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Creation.CCTW_LE.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Creation.CCTW_LE.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Creation.CCTW_LE.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Creation.CCTW_LE.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Creation.CCTW_LE.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Creation.CCTW_LE.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Creation.CCTW_LE.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Creation.CCTW_LE.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Creation.CCTW_LE.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.CCTW_LE.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Creation.CCTW_LE.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="NESide_SWSide" id="T:Puzzle_Creation.NESide_SWSide" access="Public" sealed="true" baseType="PuzzleCreator"><documentation><summary> Puzzle Creation Class NESide_SWSide. </summary></documentation><base name="PuzzleCreator" id="T:Puzzle_Creation.PuzzleCreator" type="Puzzle_Creation.PuzzleCreator"><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /></base><constructor name=".ctor" id="M:Puzzle_Creation.NESide_SWSide.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor for the Top Puzzle Side to Bottom Puzzle Side Puzzle Creation Class. </summary></documentation></constructor><field name="slots" id="F:Puzzle_Creation.NESide_SWSide.slots" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Available spaces to insert the next word. </summary></documentation></field><field name="checkAgain" id="F:Puzzle_Creation.NESide_SWSide.checkAgain" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Top half of the puzzle checking switch. </summary></documentation></field><field name="dictionaryCreator" id="F:Puzzle_Creation.NESide_SWSide.dictionaryCreator" access="Family" contract="Normal" type="ns_DictionaryCreator.DictionaryCreator" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> DictionaryCreator reference needed for the puzzle's constructon. </summary></documentation></field><field name="random" id="F:Puzzle_Creation.NESide_SWSide.random" access="Family" contract="Normal" type="System.Random" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Random number generator of the puzzle construction. </summary></documentation></field><field name="xBoundary" id="F:Puzzle_Creation.NESide_SWSide.xBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="yBoundary" id="F:Puzzle_Creation.NESide_SWSide.yBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="zBoundary" id="F:Puzzle_Creation.NESide_SWSide.zBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="puzzle" id="F:Puzzle_Creation.NESide_SWSide.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Creation.NESide_SWSide.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Creation.NESide_SWSide.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Creation.NESide_SWSide.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Creation.NESide_SWSide.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Creation.NESide_SWSide.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Creation.NESide_SWSide.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Creation.NESide_SWSide.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Creation.NESide_SWSide.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Creation.NESide_SWSide.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Creation.NESide_SWSide.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Creation.NESide_SWSide.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="Direction" id="P:Puzzle_Creation.NESide_SWSide.Direction" access="Public" contract="Normal" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator" get="true" set="false"><documentation><summary> Property Direction (int) read access to directional argorithm indicator. </summary></documentation></property><property name="WordsFound" id="P:Puzzle_Creation.NESide_SWSide.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Creation.NESide_SWSide.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Creation.NESide_SWSide.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Parse" id="M:Puzzle_Creation.NESide_SWSide.Parse(ns_RedBlack.RedBlack)" access="Family" contract="Override" returnType="System.Void" valueType="true"><documentation><summary> Polymorphically overrideable method for respective parsing. </summary>
            <param name="head">This RedBlack Tree node is the head node of the tree representing the dictionary.</param></documentation><parameter name="head" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="Finalize" id="M:Puzzle_Creation.NESide_SWSide.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Creation.NESide_SWSide.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.NESide_SWSide.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Creation.NESide_SWSide.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="CountInsertLength" id="M:Puzzle_Creation.NESide_SWSide.CountInsertLength(System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Int32" valueType="true"><documentation><summary> This helper method count the next available set of cells to insert into. </summary>
            <returns>The next available amount of cells.</returns>
            <param name="posx">X start position.</param>
            <param name="posy">Y start position.</param>
            <param name="posz">Z start position.</param></documentation><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="InsertWord" id="M:Puzzle_Creation.NESide_SWSide.InsertWord(System.Char[],System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will insert the specified word starting at the (posx,posy,posz) position along the CCTS_LN direction inside the puzzle. </summary>
            <param name="word">Next word to insert.</param>
            <param name="posx">X start position to insert.</param>
            <param name="posy">Y start position to insert.</param>
            <param name="posz">Z start position to insert.</param></documentation><parameter name="word" type="System.Char[]" valueType="false" /><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="GetBoundaries" id="M:Puzzle_Creation.NESide_SWSide.GetBoundaries" access="Public" contract="Normal" returnType="System.Int32[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Public helper method for getting the puzzle boundaries. </summary></documentation></method><method name="GeneratePuzzle" id="M:Puzzle_Creation.NESide_SWSide.GeneratePuzzle" access="Public" contract="Normal" returnType="System.Char[,,]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method calls all of the overriden Parse() methods and merges all of the resultant puzzle directions into one puzzle. </summary></documentation></method><method name="GetLengthDimentions" id="M:Puzzle_Creation.NESide_SWSide.GetLengthDimentions" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This helper method will will get the length of each x, y, and z side of the char[,,] puzzle </summary></documentation></method><method name="Reverse" id="M:Puzzle_Creation.NESide_SWSide.Reverse(System.Char[])" access="Public" contract="Normal" returnType="System.Char[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method will reverse a C# char[]. </summary></documentation><parameter name="str" type="System.Char[]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Creation.NESide_SWSide.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Creation.NESide_SWSide.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Creation.NESide_SWSide.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Creation.NESide_SWSide.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Creation.NESide_SWSide.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Creation.NESide_SWSide.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Creation.NESide_SWSide.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Creation.NESide_SWSide.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Creation.NESide_SWSide.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Creation.NESide_SWSide.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Creation.NESide_SWSide.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Creation.NESide_SWSide.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Creation.NESide_SWSide.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Creation.NESide_SWSide.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Creation.NESide_SWSide.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Creation.NESide_SWSide.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Creation.NESide_SWSide.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Creation.NESide_SWSide.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Creation.NESide_SWSide.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Creation.NESide_SWSide.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Creation.NESide_SWSide.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.NESide_SWSide.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Creation.NESide_SWSide.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="NETE_SWLE" id="T:Puzzle_Creation.NETE_SWLE" access="Public" sealed="true" baseType="PuzzleCreator"><documentation><summary> Summary description for NETP_SWLE. </summary></documentation><base name="PuzzleCreator" id="T:Puzzle_Creation.PuzzleCreator" type="Puzzle_Creation.PuzzleCreator"><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /></base><constructor name=".ctor" id="M:Puzzle_Creation.NETE_SWLE.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor for North East Top Edge to South West Lower Edge. </summary></documentation></constructor><field name="slots" id="F:Puzzle_Creation.NETE_SWLE.slots" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Available spaces to insert the next word. </summary></documentation></field><field name="checkAgain" id="F:Puzzle_Creation.NETE_SWLE.checkAgain" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Top half of the puzzle checking switch. </summary></documentation></field><field name="dictionaryCreator" id="F:Puzzle_Creation.NETE_SWLE.dictionaryCreator" access="Family" contract="Normal" type="ns_DictionaryCreator.DictionaryCreator" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> DictionaryCreator reference needed for the puzzle's constructon. </summary></documentation></field><field name="random" id="F:Puzzle_Creation.NETE_SWLE.random" access="Family" contract="Normal" type="System.Random" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Random number generator of the puzzle construction. </summary></documentation></field><field name="xBoundary" id="F:Puzzle_Creation.NETE_SWLE.xBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="yBoundary" id="F:Puzzle_Creation.NETE_SWLE.yBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="zBoundary" id="F:Puzzle_Creation.NETE_SWLE.zBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="puzzle" id="F:Puzzle_Creation.NETE_SWLE.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Creation.NETE_SWLE.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Creation.NETE_SWLE.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Creation.NETE_SWLE.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Creation.NETE_SWLE.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Creation.NETE_SWLE.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Creation.NETE_SWLE.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Creation.NETE_SWLE.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Creation.NETE_SWLE.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Creation.NETE_SWLE.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Creation.NETE_SWLE.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Creation.NETE_SWLE.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="Direction" id="P:Puzzle_Creation.NETE_SWLE.Direction" access="Public" contract="Normal" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator" get="true" set="false"><documentation><summary> Property Direction (int) read access to directional argorithm indicator. </summary></documentation></property><property name="WordsFound" id="P:Puzzle_Creation.NETE_SWLE.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Creation.NETE_SWLE.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Creation.NETE_SWLE.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Parse" id="M:Puzzle_Creation.NETE_SWLE.Parse(ns_RedBlack.RedBlack)" access="Family" contract="Override" returnType="System.Void" valueType="true"><documentation><summary> Polymorphically overrideable method for respective parsing. </summary>
            <param name="head">This RedBlack Tree node is the head node of the tree representing the dictionary.</param></documentation><parameter name="head" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="Finalize" id="M:Puzzle_Creation.NETE_SWLE.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Creation.NETE_SWLE.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.NETE_SWLE.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Creation.NETE_SWLE.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="CountInsertLength" id="M:Puzzle_Creation.NETE_SWLE.CountInsertLength(System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Int32" valueType="true"><documentation><summary> This helper method count the next available set of cells to insert into. </summary>
            <returns>The next available amount of cells.</returns>
            <param name="posx">X start position.</param>
            <param name="posy">Y start position.</param>
            <param name="posz">Z start position.</param></documentation><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="InsertWord" id="M:Puzzle_Creation.NETE_SWLE.InsertWord(System.Char[],System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will insert the specified word starting at the (posx,posy,posz) position along the CCTS_LN direction inside the puzzle. </summary>
            <param name="word">Next word to insert.</param>
            <param name="posx">X start position to insert.</param>
            <param name="posy">Y start position to insert.</param>
            <param name="posz">Z start position to insert.</param></documentation><parameter name="word" type="System.Char[]" valueType="false" /><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="GetBoundaries" id="M:Puzzle_Creation.NETE_SWLE.GetBoundaries" access="Public" contract="Normal" returnType="System.Int32[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Public helper method for getting the puzzle boundaries. </summary></documentation></method><method name="GeneratePuzzle" id="M:Puzzle_Creation.NETE_SWLE.GeneratePuzzle" access="Public" contract="Normal" returnType="System.Char[,,]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method calls all of the overriden Parse() methods and merges all of the resultant puzzle directions into one puzzle. </summary></documentation></method><method name="GetLengthDimentions" id="M:Puzzle_Creation.NETE_SWLE.GetLengthDimentions" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This helper method will will get the length of each x, y, and z side of the char[,,] puzzle </summary></documentation></method><method name="Reverse" id="M:Puzzle_Creation.NETE_SWLE.Reverse(System.Char[])" access="Public" contract="Normal" returnType="System.Char[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method will reverse a C# char[]. </summary></documentation><parameter name="str" type="System.Char[]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Creation.NETE_SWLE.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Creation.NETE_SWLE.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Creation.NETE_SWLE.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Creation.NETE_SWLE.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Creation.NETE_SWLE.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Creation.NETE_SWLE.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Creation.NETE_SWLE.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Creation.NETE_SWLE.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Creation.NETE_SWLE.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Creation.NETE_SWLE.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Creation.NETE_SWLE.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Creation.NETE_SWLE.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Creation.NETE_SWLE.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Creation.NETE_SWLE.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Creation.NETE_SWLE.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Creation.NETE_SWLE.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Creation.NETE_SWLE.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Creation.NETE_SWLE.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Creation.NETE_SWLE.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Creation.NETE_SWLE.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Creation.NETE_SWLE.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.NETE_SWLE.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Creation.NETE_SWLE.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="NVE_SVE" id="T:Puzzle_Creation.NVE_SVE" access="Public" sealed="true" baseType="PuzzleCreator"><documentation><summary> Summary description for NVE_SVE. </summary></documentation><base name="PuzzleCreator" id="T:Puzzle_Creation.PuzzleCreator" type="Puzzle_Creation.PuzzleCreator"><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /></base><constructor name=".ctor" id="M:Puzzle_Creation.NVE_SVE.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor for North Vertical Edge (on the Y axis behind the Original Orientation) to South Vertical Edge (on the Y axis on the front of the Original Orientation) Class. </summary></documentation></constructor><field name="slots" id="F:Puzzle_Creation.NVE_SVE.slots" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Available spaces to insert the next word. </summary></documentation></field><field name="checkAgain" id="F:Puzzle_Creation.NVE_SVE.checkAgain" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Top half of the puzzle checking switch. </summary></documentation></field><field name="dictionaryCreator" id="F:Puzzle_Creation.NVE_SVE.dictionaryCreator" access="Family" contract="Normal" type="ns_DictionaryCreator.DictionaryCreator" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> DictionaryCreator reference needed for the puzzle's constructon. </summary></documentation></field><field name="random" id="F:Puzzle_Creation.NVE_SVE.random" access="Family" contract="Normal" type="System.Random" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Random number generator of the puzzle construction. </summary></documentation></field><field name="xBoundary" id="F:Puzzle_Creation.NVE_SVE.xBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="yBoundary" id="F:Puzzle_Creation.NVE_SVE.yBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="zBoundary" id="F:Puzzle_Creation.NVE_SVE.zBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="puzzle" id="F:Puzzle_Creation.NVE_SVE.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Creation.NVE_SVE.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Creation.NVE_SVE.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Creation.NVE_SVE.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Creation.NVE_SVE.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Creation.NVE_SVE.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Creation.NVE_SVE.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Creation.NVE_SVE.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Creation.NVE_SVE.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Creation.NVE_SVE.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Creation.NVE_SVE.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Creation.NVE_SVE.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="Direction" id="P:Puzzle_Creation.NVE_SVE.Direction" access="Public" contract="Normal" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator" get="true" set="false"><documentation><summary> Property Direction (int) read access to directional argorithm indicator. </summary></documentation></property><property name="WordsFound" id="P:Puzzle_Creation.NVE_SVE.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Creation.NVE_SVE.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Creation.NVE_SVE.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Parse" id="M:Puzzle_Creation.NVE_SVE.Parse(ns_RedBlack.RedBlack)" access="Family" contract="Override" returnType="System.Void" valueType="true"><documentation><summary> Polymorphically overrideable method for respective parsing. </summary>
            <param name="head">This RedBlack Tree node is the head node of the tree representing the dictionary.</param></documentation><parameter name="head" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="Finalize" id="M:Puzzle_Creation.NVE_SVE.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Creation.NVE_SVE.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.NVE_SVE.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Creation.NVE_SVE.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="CountInsertLength" id="M:Puzzle_Creation.NVE_SVE.CountInsertLength(System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Int32" valueType="true"><documentation><summary> This helper method count the next available set of cells to insert into. </summary>
            <returns>The next available amount of cells.</returns>
            <param name="posx">X start position.</param>
            <param name="posy">Y start position.</param>
            <param name="posz">Z start position.</param></documentation><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="InsertWord" id="M:Puzzle_Creation.NVE_SVE.InsertWord(System.Char[],System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will insert the specified word starting at the (posx,posy,posz) position along the CCTS_LN direction inside the puzzle. </summary>
            <param name="word">Next word to insert.</param>
            <param name="posx">X start position to insert.</param>
            <param name="posy">Y start position to insert.</param>
            <param name="posz">Z start position to insert.</param></documentation><parameter name="word" type="System.Char[]" valueType="false" /><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="GetBoundaries" id="M:Puzzle_Creation.NVE_SVE.GetBoundaries" access="Public" contract="Normal" returnType="System.Int32[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Public helper method for getting the puzzle boundaries. </summary></documentation></method><method name="GeneratePuzzle" id="M:Puzzle_Creation.NVE_SVE.GeneratePuzzle" access="Public" contract="Normal" returnType="System.Char[,,]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method calls all of the overriden Parse() methods and merges all of the resultant puzzle directions into one puzzle. </summary></documentation></method><method name="GetLengthDimentions" id="M:Puzzle_Creation.NVE_SVE.GetLengthDimentions" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This helper method will will get the length of each x, y, and z side of the char[,,] puzzle </summary></documentation></method><method name="Reverse" id="M:Puzzle_Creation.NVE_SVE.Reverse(System.Char[])" access="Public" contract="Normal" returnType="System.Char[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method will reverse a C# char[]. </summary></documentation><parameter name="str" type="System.Char[]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Creation.NVE_SVE.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Creation.NVE_SVE.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Creation.NVE_SVE.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Creation.NVE_SVE.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Creation.NVE_SVE.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Creation.NVE_SVE.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Creation.NVE_SVE.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Creation.NVE_SVE.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Creation.NVE_SVE.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Creation.NVE_SVE.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Creation.NVE_SVE.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Creation.NVE_SVE.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Creation.NVE_SVE.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Creation.NVE_SVE.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Creation.NVE_SVE.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Creation.NVE_SVE.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Creation.NVE_SVE.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Creation.NVE_SVE.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Creation.NVE_SVE.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Creation.NVE_SVE.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Creation.NVE_SVE.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.NVE_SVE.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Creation.NVE_SVE.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="NWSide_SESide" id="T:Puzzle_Creation.NWSide_SESide" access="Public" sealed="true" baseType="PuzzleCreator"><documentation><summary> Puzzle Creation Class NWSide_SESide. </summary></documentation><base name="PuzzleCreator" id="T:Puzzle_Creation.PuzzleCreator" type="Puzzle_Creation.PuzzleCreator"><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /></base><constructor name=".ctor" id="M:Puzzle_Creation.NWSide_SESide.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor for the Top Puzzle Side to Bottom Puzzle Side Puzzle Creation Class. </summary></documentation></constructor><field name="slots" id="F:Puzzle_Creation.NWSide_SESide.slots" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Available spaces to insert the next word. </summary></documentation></field><field name="checkAgain" id="F:Puzzle_Creation.NWSide_SESide.checkAgain" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Top half of the puzzle checking switch. </summary></documentation></field><field name="dictionaryCreator" id="F:Puzzle_Creation.NWSide_SESide.dictionaryCreator" access="Family" contract="Normal" type="ns_DictionaryCreator.DictionaryCreator" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> DictionaryCreator reference needed for the puzzle's constructon. </summary></documentation></field><field name="random" id="F:Puzzle_Creation.NWSide_SESide.random" access="Family" contract="Normal" type="System.Random" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Random number generator of the puzzle construction. </summary></documentation></field><field name="xBoundary" id="F:Puzzle_Creation.NWSide_SESide.xBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="yBoundary" id="F:Puzzle_Creation.NWSide_SESide.yBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="zBoundary" id="F:Puzzle_Creation.NWSide_SESide.zBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="puzzle" id="F:Puzzle_Creation.NWSide_SESide.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Creation.NWSide_SESide.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Creation.NWSide_SESide.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Creation.NWSide_SESide.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Creation.NWSide_SESide.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Creation.NWSide_SESide.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Creation.NWSide_SESide.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Creation.NWSide_SESide.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Creation.NWSide_SESide.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Creation.NWSide_SESide.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Creation.NWSide_SESide.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Creation.NWSide_SESide.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="Direction" id="P:Puzzle_Creation.NWSide_SESide.Direction" access="Public" contract="Normal" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator" get="true" set="false"><documentation><summary> Property Direction (int) read access to directional argorithm indicator. </summary></documentation></property><property name="WordsFound" id="P:Puzzle_Creation.NWSide_SESide.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Creation.NWSide_SESide.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Creation.NWSide_SESide.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Parse" id="M:Puzzle_Creation.NWSide_SESide.Parse(ns_RedBlack.RedBlack)" access="Family" contract="Override" returnType="System.Void" valueType="true"><documentation><summary> Polymorphically overrideable method for respective parsing. </summary>
            <param name="head">This RedBlack Tree node is the head node of the tree representing the dictionary.</param></documentation><parameter name="head" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="Finalize" id="M:Puzzle_Creation.NWSide_SESide.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Creation.NWSide_SESide.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.NWSide_SESide.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Creation.NWSide_SESide.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="CountInsertLength" id="M:Puzzle_Creation.NWSide_SESide.CountInsertLength(System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Int32" valueType="true"><documentation><summary> This helper method count the next available set of cells to insert into. </summary>
            <returns>The next available amount of cells.</returns>
            <param name="posx">X start position.</param>
            <param name="posy">Y start position.</param>
            <param name="posz">Z start position.</param></documentation><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="InsertWord" id="M:Puzzle_Creation.NWSide_SESide.InsertWord(System.Char[],System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will insert the specified word starting at the (posx,posy,posz) position along the CCTS_LN direction inside the puzzle. </summary>
            <param name="word">Next word to insert.</param>
            <param name="posx">X start position to insert.</param>
            <param name="posy">Y start position to insert.</param>
            <param name="posz">Z start position to insert.</param></documentation><parameter name="word" type="System.Char[]" valueType="false" /><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="GetBoundaries" id="M:Puzzle_Creation.NWSide_SESide.GetBoundaries" access="Public" contract="Normal" returnType="System.Int32[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Public helper method for getting the puzzle boundaries. </summary></documentation></method><method name="GeneratePuzzle" id="M:Puzzle_Creation.NWSide_SESide.GeneratePuzzle" access="Public" contract="Normal" returnType="System.Char[,,]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method calls all of the overriden Parse() methods and merges all of the resultant puzzle directions into one puzzle. </summary></documentation></method><method name="GetLengthDimentions" id="M:Puzzle_Creation.NWSide_SESide.GetLengthDimentions" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This helper method will will get the length of each x, y, and z side of the char[,,] puzzle </summary></documentation></method><method name="Reverse" id="M:Puzzle_Creation.NWSide_SESide.Reverse(System.Char[])" access="Public" contract="Normal" returnType="System.Char[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method will reverse a C# char[]. </summary></documentation><parameter name="str" type="System.Char[]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Creation.NWSide_SESide.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Creation.NWSide_SESide.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Creation.NWSide_SESide.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Creation.NWSide_SESide.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Creation.NWSide_SESide.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Creation.NWSide_SESide.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Creation.NWSide_SESide.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Creation.NWSide_SESide.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Creation.NWSide_SESide.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Creation.NWSide_SESide.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Creation.NWSide_SESide.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Creation.NWSide_SESide.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Creation.NWSide_SESide.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Creation.NWSide_SESide.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Creation.NWSide_SESide.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Creation.NWSide_SESide.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Creation.NWSide_SESide.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Creation.NWSide_SESide.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Creation.NWSide_SESide.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Creation.NWSide_SESide.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Creation.NWSide_SESide.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.NWSide_SESide.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Creation.NWSide_SESide.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="NWTE_SELE" id="T:Puzzle_Creation.NWTE_SELE" access="Public" sealed="true" baseType="PuzzleCreator"><documentation><summary> Summary description for NWTE_SELE. </summary></documentation><base name="PuzzleCreator" id="T:Puzzle_Creation.PuzzleCreator" type="Puzzle_Creation.PuzzleCreator"><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /></base><constructor name=".ctor" id="M:Puzzle_Creation.NWTE_SELE.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor for North West Top Edge to South East Lower Edge Class. </summary></documentation></constructor><field name="slots" id="F:Puzzle_Creation.NWTE_SELE.slots" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Available spaces to insert the next word. </summary></documentation></field><field name="checkAgain" id="F:Puzzle_Creation.NWTE_SELE.checkAgain" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Top half of the puzzle checking switch. </summary></documentation></field><field name="dictionaryCreator" id="F:Puzzle_Creation.NWTE_SELE.dictionaryCreator" access="Family" contract="Normal" type="ns_DictionaryCreator.DictionaryCreator" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> DictionaryCreator reference needed for the puzzle's constructon. </summary></documentation></field><field name="random" id="F:Puzzle_Creation.NWTE_SELE.random" access="Family" contract="Normal" type="System.Random" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Random number generator of the puzzle construction. </summary></documentation></field><field name="xBoundary" id="F:Puzzle_Creation.NWTE_SELE.xBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="yBoundary" id="F:Puzzle_Creation.NWTE_SELE.yBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="zBoundary" id="F:Puzzle_Creation.NWTE_SELE.zBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="puzzle" id="F:Puzzle_Creation.NWTE_SELE.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Creation.NWTE_SELE.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Creation.NWTE_SELE.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Creation.NWTE_SELE.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Creation.NWTE_SELE.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Creation.NWTE_SELE.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Creation.NWTE_SELE.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Creation.NWTE_SELE.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Creation.NWTE_SELE.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Creation.NWTE_SELE.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Creation.NWTE_SELE.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Creation.NWTE_SELE.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="Direction" id="P:Puzzle_Creation.NWTE_SELE.Direction" access="Public" contract="Normal" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator" get="true" set="false"><documentation><summary> Property Direction (int) read access to directional argorithm indicator. </summary></documentation></property><property name="WordsFound" id="P:Puzzle_Creation.NWTE_SELE.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Creation.NWTE_SELE.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Creation.NWTE_SELE.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Parse" id="M:Puzzle_Creation.NWTE_SELE.Parse(ns_RedBlack.RedBlack)" access="Family" contract="Override" returnType="System.Void" valueType="true"><documentation><summary> Polymorphically overrideable method for respective parsing. </summary>
            <param name="head">This RedBlack Tree node is the head node of the tree representing the dictionary.</param></documentation><parameter name="head" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="Finalize" id="M:Puzzle_Creation.NWTE_SELE.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Creation.NWTE_SELE.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.NWTE_SELE.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Creation.NWTE_SELE.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="CountInsertLength" id="M:Puzzle_Creation.NWTE_SELE.CountInsertLength(System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Int32" valueType="true"><documentation><summary> This helper method count the next available set of cells to insert into. </summary>
            <returns>The next available amount of cells.</returns>
            <param name="posx">X start position.</param>
            <param name="posy">Y start position.</param>
            <param name="posz">Z start position.</param></documentation><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="InsertWord" id="M:Puzzle_Creation.NWTE_SELE.InsertWord(System.Char[],System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will insert the specified word starting at the (posx,posy,posz) position along the CCTS_LN direction inside the puzzle. </summary>
            <param name="word">Next word to insert.</param>
            <param name="posx">X start position to insert.</param>
            <param name="posy">Y start position to insert.</param>
            <param name="posz">Z start position to insert.</param></documentation><parameter name="word" type="System.Char[]" valueType="false" /><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="GetBoundaries" id="M:Puzzle_Creation.NWTE_SELE.GetBoundaries" access="Public" contract="Normal" returnType="System.Int32[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Public helper method for getting the puzzle boundaries. </summary></documentation></method><method name="GeneratePuzzle" id="M:Puzzle_Creation.NWTE_SELE.GeneratePuzzle" access="Public" contract="Normal" returnType="System.Char[,,]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method calls all of the overriden Parse() methods and merges all of the resultant puzzle directions into one puzzle. </summary></documentation></method><method name="GetLengthDimentions" id="M:Puzzle_Creation.NWTE_SELE.GetLengthDimentions" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This helper method will will get the length of each x, y, and z side of the char[,,] puzzle </summary></documentation></method><method name="Reverse" id="M:Puzzle_Creation.NWTE_SELE.Reverse(System.Char[])" access="Public" contract="Normal" returnType="System.Char[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method will reverse a C# char[]. </summary></documentation><parameter name="str" type="System.Char[]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Creation.NWTE_SELE.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Creation.NWTE_SELE.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Creation.NWTE_SELE.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Creation.NWTE_SELE.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Creation.NWTE_SELE.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Creation.NWTE_SELE.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Creation.NWTE_SELE.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Creation.NWTE_SELE.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Creation.NWTE_SELE.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Creation.NWTE_SELE.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Creation.NWTE_SELE.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Creation.NWTE_SELE.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Creation.NWTE_SELE.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Creation.NWTE_SELE.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Creation.NWTE_SELE.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Creation.NWTE_SELE.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Creation.NWTE_SELE.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Creation.NWTE_SELE.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Creation.NWTE_SELE.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Creation.NWTE_SELE.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Creation.NWTE_SELE.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.NWTE_SELE.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Creation.NWTE_SELE.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="PuzzleCreator_TestClass" id="T:Puzzle_Creation.PuzzleCreator_TestClass" access="Public"><documentation><summary> Means for Testing the PuzzleCreator </summary></documentation><attribute name="NUnit.Framework.TestFixtureAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestFixtureAttribute" /></attribute><constructor name=".ctor" id="M:Puzzle_Creation.PuzzleCreator_TestClass.#ctor" access="Public" contract="Normal"><documentation><summary>Initializes a new instance of the <see cref="T:Puzzle_Creation.PuzzleCreator_TestClass" /> class.</summary></documentation></constructor><field name="puzzleCreator" id="F:Puzzle_Creation.PuzzleCreator_TestClass.puzzleCreator" access="Private" contract="Normal" type="Puzzle_Creation.PuzzleCreator" valueType="false" /><field name="solution" id="F:Puzzle_Creation.PuzzleCreator_TestClass.solution" access="Private" contract="Normal" type="Puzzle_Solution.Solution" valueType="false" /><method name="Finalize" id="M:Puzzle_Creation.PuzzleCreator_TestClass.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Creation.PuzzleCreator_TestClass.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.PuzzleCreator_TestClass.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Creation.PuzzleCreator_TestClass.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="SetUp" id="M:Puzzle_Creation.PuzzleCreator_TestClass.SetUp" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Test Class default constructor </summary></documentation><attribute name="NUnit.Framework.SetUpAttribute"><property name="TypeId" type="System.Object" value="NUnit.Framework.SetUpAttribute" /></attribute></method><method name="TestGetLengthDimentions" id="M:Puzzle_Creation.PuzzleCreator_TestClass.TestGetLengthDimentions" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> The method will test the GetLengthDimentions() method for accuratly counting the side lengths / maximum dimentions of the puzzle. </summary></documentation><attribute name="NUnit.Framework.TestAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestAttribute" /></attribute></method><method name="TestGeneratePuzzle" id="M:Puzzle_Creation.PuzzleCreator_TestClass.TestGeneratePuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Test method to Gererate the entire puzzle. </summary></documentation><attribute name="NUnit.Framework.TestAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestAttribute" /></attribute></method><method name="Main" id="M:Puzzle_Creation.PuzzleCreator_TestClass.Main(System.String[])" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Entry point for PuzzleCreator_TestClass </summary>
            <param name="args">Arguements specified with PuzzlerCreator when the puzzle is built as a Console App for testing.</param></documentation><parameter name="args" type="System.String[]" valueType="false" /></method><method name="GetType" id="M:Puzzle_Creation.PuzzleCreator_TestClass.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Creation.PuzzleCreator_TestClass.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.PuzzleCreator_TestClass.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Creation.PuzzleCreator_TestClass.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="SETE_NWLE" id="T:Puzzle_Creation.SETE_NWLE" access="Public" sealed="true" baseType="PuzzleCreator"><documentation><summary> Summary description for SETE_NWLE. </summary></documentation><base name="PuzzleCreator" id="T:Puzzle_Creation.PuzzleCreator" type="Puzzle_Creation.PuzzleCreator"><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /></base><constructor name=".ctor" id="M:Puzzle_Creation.SETE_NWLE.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor for South East Top Edge to North West Lower Edge Class. </summary></documentation></constructor><field name="slots" id="F:Puzzle_Creation.SETE_NWLE.slots" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Available spaces to insert the next word. </summary></documentation></field><field name="checkAgain" id="F:Puzzle_Creation.SETE_NWLE.checkAgain" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Top half of the puzzle checking switch. </summary></documentation></field><field name="dictionaryCreator" id="F:Puzzle_Creation.SETE_NWLE.dictionaryCreator" access="Family" contract="Normal" type="ns_DictionaryCreator.DictionaryCreator" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> DictionaryCreator reference needed for the puzzle's constructon. </summary></documentation></field><field name="random" id="F:Puzzle_Creation.SETE_NWLE.random" access="Family" contract="Normal" type="System.Random" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Random number generator of the puzzle construction. </summary></documentation></field><field name="xBoundary" id="F:Puzzle_Creation.SETE_NWLE.xBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="yBoundary" id="F:Puzzle_Creation.SETE_NWLE.yBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="zBoundary" id="F:Puzzle_Creation.SETE_NWLE.zBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="puzzle" id="F:Puzzle_Creation.SETE_NWLE.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Creation.SETE_NWLE.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Creation.SETE_NWLE.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Creation.SETE_NWLE.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Creation.SETE_NWLE.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Creation.SETE_NWLE.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Creation.SETE_NWLE.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Creation.SETE_NWLE.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Creation.SETE_NWLE.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Creation.SETE_NWLE.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Creation.SETE_NWLE.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Creation.SETE_NWLE.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="Direction" id="P:Puzzle_Creation.SETE_NWLE.Direction" access="Public" contract="Normal" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator" get="true" set="false"><documentation><summary> Property Direction (int) read access to directional argorithm indicator. </summary></documentation></property><property name="WordsFound" id="P:Puzzle_Creation.SETE_NWLE.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Creation.SETE_NWLE.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Creation.SETE_NWLE.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Parse" id="M:Puzzle_Creation.SETE_NWLE.Parse(ns_RedBlack.RedBlack)" access="Family" contract="Override" returnType="System.Void" valueType="true"><documentation><summary> Polymorphically overrideable method for respective parsing. </summary>
            <param name="head">This RedBlack Tree node is the head node of the tree representing the dictionary.</param></documentation><parameter name="head" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="Finalize" id="M:Puzzle_Creation.SETE_NWLE.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Creation.SETE_NWLE.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.SETE_NWLE.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Creation.SETE_NWLE.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="CountInsertLength" id="M:Puzzle_Creation.SETE_NWLE.CountInsertLength(System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Int32" valueType="true"><documentation><summary> This helper method count the next available set of cells to insert into. </summary>
            <returns>The next available amount of cells.</returns>
            <param name="posx">X start position.</param>
            <param name="posy">Y start position.</param>
            <param name="posz">Z start position.</param></documentation><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="InsertWord" id="M:Puzzle_Creation.SETE_NWLE.InsertWord(System.Char[],System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will insert the specified word starting at the (posx,posy,posz) position along the CCTS_LN direction inside the puzzle. </summary>
            <param name="word">Next word to insert.</param>
            <param name="posx">X start position to insert.</param>
            <param name="posy">Y start position to insert.</param>
            <param name="posz">Z start position to insert.</param></documentation><parameter name="word" type="System.Char[]" valueType="false" /><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="GetBoundaries" id="M:Puzzle_Creation.SETE_NWLE.GetBoundaries" access="Public" contract="Normal" returnType="System.Int32[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Public helper method for getting the puzzle boundaries. </summary></documentation></method><method name="GeneratePuzzle" id="M:Puzzle_Creation.SETE_NWLE.GeneratePuzzle" access="Public" contract="Normal" returnType="System.Char[,,]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method calls all of the overriden Parse() methods and merges all of the resultant puzzle directions into one puzzle. </summary></documentation></method><method name="GetLengthDimentions" id="M:Puzzle_Creation.SETE_NWLE.GetLengthDimentions" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This helper method will will get the length of each x, y, and z side of the char[,,] puzzle </summary></documentation></method><method name="Reverse" id="M:Puzzle_Creation.SETE_NWLE.Reverse(System.Char[])" access="Public" contract="Normal" returnType="System.Char[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method will reverse a C# char[]. </summary></documentation><parameter name="str" type="System.Char[]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Creation.SETE_NWLE.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Creation.SETE_NWLE.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Creation.SETE_NWLE.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Creation.SETE_NWLE.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Creation.SETE_NWLE.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Creation.SETE_NWLE.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Creation.SETE_NWLE.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Creation.SETE_NWLE.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Creation.SETE_NWLE.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Creation.SETE_NWLE.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Creation.SETE_NWLE.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Creation.SETE_NWLE.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Creation.SETE_NWLE.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Creation.SETE_NWLE.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Creation.SETE_NWLE.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Creation.SETE_NWLE.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Creation.SETE_NWLE.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Creation.SETE_NWLE.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Creation.SETE_NWLE.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Creation.SETE_NWLE.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Creation.SETE_NWLE.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.SETE_NWLE.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Creation.SETE_NWLE.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="SWTE_NELE" id="T:Puzzle_Creation.SWTE_NELE" access="Public" sealed="true" baseType="PuzzleCreator"><documentation><summary> Summary description for SWTE_NELE. </summary></documentation><base name="PuzzleCreator" id="T:Puzzle_Creation.PuzzleCreator" type="Puzzle_Creation.PuzzleCreator"><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /></base><constructor name=".ctor" id="M:Puzzle_Creation.SWTE_NELE.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor for South West Top Edge to North East Lower Edge Class. </summary></documentation></constructor><field name="slots" id="F:Puzzle_Creation.SWTE_NELE.slots" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Available spaces to insert the next word. </summary></documentation></field><field name="topHalf" id="F:Puzzle_Creation.SWTE_NELE.topHalf" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Top half of the puzzle checking switch. </summary></documentation></field><field name="dictionaryCreator" id="F:Puzzle_Creation.SWTE_NELE.dictionaryCreator" access="Family" contract="Normal" type="ns_DictionaryCreator.DictionaryCreator" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> DictionaryCreator reference needed for the puzzle's constructon. </summary></documentation></field><field name="random" id="F:Puzzle_Creation.SWTE_NELE.random" access="Family" contract="Normal" type="System.Random" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Random number generator of the puzzle construction. </summary></documentation></field><field name="xBoundary" id="F:Puzzle_Creation.SWTE_NELE.xBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="yBoundary" id="F:Puzzle_Creation.SWTE_NELE.yBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="zBoundary" id="F:Puzzle_Creation.SWTE_NELE.zBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="puzzle" id="F:Puzzle_Creation.SWTE_NELE.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Creation.SWTE_NELE.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Creation.SWTE_NELE.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Creation.SWTE_NELE.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Creation.SWTE_NELE.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Creation.SWTE_NELE.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Creation.SWTE_NELE.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Creation.SWTE_NELE.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Creation.SWTE_NELE.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Creation.SWTE_NELE.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Creation.SWTE_NELE.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Creation.SWTE_NELE.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="Direction" id="P:Puzzle_Creation.SWTE_NELE.Direction" access="Public" contract="Normal" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator" get="true" set="false"><documentation><summary> Property Direction (int) read access to directional argorithm indicator. </summary></documentation></property><property name="WordsFound" id="P:Puzzle_Creation.SWTE_NELE.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Creation.SWTE_NELE.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Creation.SWTE_NELE.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Parse" id="M:Puzzle_Creation.SWTE_NELE.Parse(ns_RedBlack.RedBlack)" access="Family" contract="Override" returnType="System.Void" valueType="true"><documentation><summary> Polymorphically overrideable method for respective parsing. </summary>
            <param name="head">This RedBlack Tree node is the head node of the tree representing the dictionary.</param></documentation><parameter name="head" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="Finalize" id="M:Puzzle_Creation.SWTE_NELE.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Creation.SWTE_NELE.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.SWTE_NELE.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Creation.SWTE_NELE.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="CountInsertLength" id="M:Puzzle_Creation.SWTE_NELE.CountInsertLength(System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Int32" valueType="true"><documentation><summary> This helper method count the next available set of cells to insert into. </summary>
            <returns>The next available amount of cells.</returns>
            <param name="posx">X start position.</param>
            <param name="posy">Y start position.</param>
            <param name="posz">Z start position.</param></documentation><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="InsertWord" id="M:Puzzle_Creation.SWTE_NELE.InsertWord(System.Char[],System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will insert the specified word starting at the (posx,posy,posz) position along the CCTS_LN direction inside the puzzle. </summary>
            <param name="word">Next word to insert.</param>
            <param name="posx">X start position to insert.</param>
            <param name="posy">Y start position to insert.</param>
            <param name="posz">Z start position to insert.</param></documentation><parameter name="word" type="System.Char[]" valueType="false" /><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="GetBoundaries" id="M:Puzzle_Creation.SWTE_NELE.GetBoundaries" access="Public" contract="Normal" returnType="System.Int32[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Public helper method for getting the puzzle boundaries. </summary></documentation></method><method name="GeneratePuzzle" id="M:Puzzle_Creation.SWTE_NELE.GeneratePuzzle" access="Public" contract="Normal" returnType="System.Char[,,]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method calls all of the overriden Parse() methods and merges all of the resultant puzzle directions into one puzzle. </summary></documentation></method><method name="GetLengthDimentions" id="M:Puzzle_Creation.SWTE_NELE.GetLengthDimentions" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This helper method will will get the length of each x, y, and z side of the char[,,] puzzle </summary></documentation></method><method name="Reverse" id="M:Puzzle_Creation.SWTE_NELE.Reverse(System.Char[])" access="Public" contract="Normal" returnType="System.Char[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method will reverse a C# char[]. </summary></documentation><parameter name="str" type="System.Char[]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Creation.SWTE_NELE.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Creation.SWTE_NELE.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Creation.SWTE_NELE.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Creation.SWTE_NELE.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Creation.SWTE_NELE.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Creation.SWTE_NELE.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Creation.SWTE_NELE.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Creation.SWTE_NELE.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Creation.SWTE_NELE.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Creation.SWTE_NELE.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Creation.SWTE_NELE.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Creation.SWTE_NELE.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Creation.SWTE_NELE.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Creation.SWTE_NELE.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Creation.SWTE_NELE.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Creation.SWTE_NELE.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Creation.SWTE_NELE.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Creation.SWTE_NELE.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Creation.SWTE_NELE.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Creation.SWTE_NELE.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Creation.SWTE_NELE.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.SWTE_NELE.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Creation.SWTE_NELE.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="Top_Bottom" id="T:Puzzle_Creation.Top_Bottom" access="Public" sealed="true" baseType="PuzzleCreator"><documentation><summary> Puzzle Creation Class Top_Bottom </summary></documentation><base name="PuzzleCreator" id="T:Puzzle_Creation.PuzzleCreator" type="Puzzle_Creation.PuzzleCreator"><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /></base><constructor name=".ctor" id="M:Puzzle_Creation.Top_Bottom.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor for the Top Puzzle Side to Bottom Puzzle Side Puzzle Creation Class. </summary></documentation></constructor><field name="slots" id="F:Puzzle_Creation.Top_Bottom.slots" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Available spaces to insert the next word. </summary></documentation></field><field name="checkAgain" id="F:Puzzle_Creation.Top_Bottom.checkAgain" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Top half of the puzzle checking switch. </summary></documentation></field><field name="dictionaryCreator" id="F:Puzzle_Creation.Top_Bottom.dictionaryCreator" access="Family" contract="Normal" type="ns_DictionaryCreator.DictionaryCreator" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> DictionaryCreator reference needed for the puzzle's constructon. </summary></documentation></field><field name="random" id="F:Puzzle_Creation.Top_Bottom.random" access="Family" contract="Normal" type="System.Random" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Random number generator of the puzzle construction. </summary></documentation></field><field name="xBoundary" id="F:Puzzle_Creation.Top_Bottom.xBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="yBoundary" id="F:Puzzle_Creation.Top_Bottom.yBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="zBoundary" id="F:Puzzle_Creation.Top_Bottom.zBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="puzzle" id="F:Puzzle_Creation.Top_Bottom.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Creation.Top_Bottom.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Creation.Top_Bottom.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Creation.Top_Bottom.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Creation.Top_Bottom.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Creation.Top_Bottom.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Creation.Top_Bottom.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Creation.Top_Bottom.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Creation.Top_Bottom.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Creation.Top_Bottom.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Creation.Top_Bottom.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Creation.Top_Bottom.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="Direction" id="P:Puzzle_Creation.Top_Bottom.Direction" access="Public" contract="Normal" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator" get="true" set="false"><documentation><summary> Property Direction (int) read access to directional argorithm indicator. </summary></documentation></property><property name="WordsFound" id="P:Puzzle_Creation.Top_Bottom.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Creation.Top_Bottom.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Creation.Top_Bottom.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Parse" id="M:Puzzle_Creation.Top_Bottom.Parse(ns_RedBlack.RedBlack)" access="Family" contract="Override" returnType="System.Void" valueType="true"><documentation><summary> Polymorphically overrideable method for respective parsing. </summary>
            <param name="head">This RedBlack Tree node is the head node of the tree representing the dictionary.</param></documentation><parameter name="head" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="Finalize" id="M:Puzzle_Creation.Top_Bottom.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Creation.Top_Bottom.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.Top_Bottom.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Creation.Top_Bottom.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="CountInsertLength" id="M:Puzzle_Creation.Top_Bottom.CountInsertLength(System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Int32" valueType="true"><documentation><summary> This helper method count the next available set of cells to insert into. </summary>
            <returns>The next available amount of cells.</returns>
            <param name="posx">X start position.</param>
            <param name="posy">Y start position.</param>
            <param name="posz">Z start position.</param></documentation><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="InsertWord" id="M:Puzzle_Creation.Top_Bottom.InsertWord(System.Char[],System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will insert the specified word starting at the (posx,posy,posz) position along the CCTS_LN direction inside the puzzle. </summary>
            <param name="word">Next word to insert.</param>
            <param name="posx">X start position to insert.</param>
            <param name="posy">Y start position to insert.</param>
            <param name="posz">Z start position to insert.</param></documentation><parameter name="word" type="System.Char[]" valueType="false" /><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="GetBoundaries" id="M:Puzzle_Creation.Top_Bottom.GetBoundaries" access="Public" contract="Normal" returnType="System.Int32[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Public helper method for getting the puzzle boundaries. </summary></documentation></method><method name="GeneratePuzzle" id="M:Puzzle_Creation.Top_Bottom.GeneratePuzzle" access="Public" contract="Normal" returnType="System.Char[,,]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method calls all of the overriden Parse() methods and merges all of the resultant puzzle directions into one puzzle. </summary></documentation></method><method name="GetLengthDimentions" id="M:Puzzle_Creation.Top_Bottom.GetLengthDimentions" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This helper method will will get the length of each x, y, and z side of the char[,,] puzzle </summary></documentation></method><method name="Reverse" id="M:Puzzle_Creation.Top_Bottom.Reverse(System.Char[])" access="Public" contract="Normal" returnType="System.Char[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method will reverse a C# char[]. </summary></documentation><parameter name="str" type="System.Char[]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Creation.Top_Bottom.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Creation.Top_Bottom.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Creation.Top_Bottom.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Creation.Top_Bottom.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Creation.Top_Bottom.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Creation.Top_Bottom.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Creation.Top_Bottom.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Creation.Top_Bottom.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Creation.Top_Bottom.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Creation.Top_Bottom.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Creation.Top_Bottom.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Creation.Top_Bottom.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Creation.Top_Bottom.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Creation.Top_Bottom.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Creation.Top_Bottom.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Creation.Top_Bottom.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Creation.Top_Bottom.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Creation.Top_Bottom.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Creation.Top_Bottom.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Creation.Top_Bottom.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Creation.Top_Bottom.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.Top_Bottom.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Creation.Top_Bottom.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="WVE_EVE" id="T:Puzzle_Creation.WVE_EVE" access="Public" sealed="true" baseType="PuzzleCreator"><documentation><summary> Summary description for WVE_EVE. </summary></documentation><base name="PuzzleCreator" id="T:Puzzle_Creation.PuzzleCreator" type="Puzzle_Creation.PuzzleCreator"><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /></base><constructor name=".ctor" id="M:Puzzle_Creation.WVE_EVE.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor for West Vertical Edge (on the Y axis on the left of the Original Orientation) to East Vertical Edge (on the Y axis on the right of the Original Orientation) Class. </summary></documentation></constructor><field name="slots" id="F:Puzzle_Creation.WVE_EVE.slots" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Available spaces to insert the next word. </summary></documentation></field><field name="checkAgain" id="F:Puzzle_Creation.WVE_EVE.checkAgain" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Top half of the puzzle checking switch. </summary></documentation></field><field name="dictionaryCreator" id="F:Puzzle_Creation.WVE_EVE.dictionaryCreator" access="Family" contract="Normal" type="ns_DictionaryCreator.DictionaryCreator" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> DictionaryCreator reference needed for the puzzle's constructon. </summary></documentation></field><field name="random" id="F:Puzzle_Creation.WVE_EVE.random" access="Family" contract="Normal" type="System.Random" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Random number generator of the puzzle construction. </summary></documentation></field><field name="xBoundary" id="F:Puzzle_Creation.WVE_EVE.xBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="yBoundary" id="F:Puzzle_Creation.WVE_EVE.yBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="zBoundary" id="F:Puzzle_Creation.WVE_EVE.zBoundary" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This boundary variable will define the limits of the puzzle. </summary></documentation></field><field name="puzzle" id="F:Puzzle_Creation.WVE_EVE.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Creation.WVE_EVE.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Creation.WVE_EVE.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Creation.WVE_EVE.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Creation.WVE_EVE.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Creation.WVE_EVE.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Creation.WVE_EVE.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Creation.WVE_EVE.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Creation.WVE_EVE.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Creation.WVE_EVE.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Creation.WVE_EVE.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Creation.WVE_EVE.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="Direction" id="P:Puzzle_Creation.WVE_EVE.Direction" access="Public" contract="Normal" type="System.Int32" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator" get="true" set="false"><documentation><summary> Property Direction (int) read access to directional argorithm indicator. </summary></documentation></property><property name="WordsFound" id="P:Puzzle_Creation.WVE_EVE.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Creation.WVE_EVE.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Creation.WVE_EVE.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Parse" id="M:Puzzle_Creation.WVE_EVE.Parse(ns_RedBlack.RedBlack)" access="Family" contract="Override" returnType="System.Void" valueType="true"><documentation><summary> Polymorphically overrideable method for respective parsing. </summary>
            <param name="head">This RedBlack Tree node is the head node of the tree representing the dictionary.</param></documentation><parameter name="head" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="Finalize" id="M:Puzzle_Creation.WVE_EVE.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Creation.WVE_EVE.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.WVE_EVE.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Creation.WVE_EVE.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="CountInsertLength" id="M:Puzzle_Creation.WVE_EVE.CountInsertLength(System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Int32" valueType="true"><documentation><summary> This helper method count the next available set of cells to insert into. </summary>
            <returns>The next available amount of cells.</returns>
            <param name="posx">X start position.</param>
            <param name="posy">Y start position.</param>
            <param name="posz">Z start position.</param></documentation><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="InsertWord" id="M:Puzzle_Creation.WVE_EVE.InsertWord(System.Char[],System.Int32,System.Int32,System.Int32)" access="Private" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will insert the specified word starting at the (posx,posy,posz) position along the CCTS_LN direction inside the puzzle. </summary>
            <param name="word">Next word to insert.</param>
            <param name="posx">X start position to insert.</param>
            <param name="posy">Y start position to insert.</param>
            <param name="posz">Z start position to insert.</param></documentation><parameter name="word" type="System.Char[]" valueType="false" /><parameter name="posx" type="System.Int32" valueType="true" /><parameter name="posy" type="System.Int32" valueType="true" /><parameter name="posz" type="System.Int32" valueType="true" /></method><method name="GetBoundaries" id="M:Puzzle_Creation.WVE_EVE.GetBoundaries" access="Public" contract="Normal" returnType="System.Int32[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> Public helper method for getting the puzzle boundaries. </summary></documentation></method><method name="GeneratePuzzle" id="M:Puzzle_Creation.WVE_EVE.GeneratePuzzle" access="Public" contract="Normal" returnType="System.Char[,,]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method calls all of the overriden Parse() methods and merges all of the resultant puzzle directions into one puzzle. </summary></documentation></method><method name="GetLengthDimentions" id="M:Puzzle_Creation.WVE_EVE.GetLengthDimentions" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This helper method will will get the length of each x, y, and z side of the char[,,] puzzle </summary></documentation></method><method name="Reverse" id="M:Puzzle_Creation.WVE_EVE.Reverse(System.Char[])" access="Public" contract="Normal" returnType="System.Char[]" valueType="false" declaringType="Puzzle_Creation.PuzzleCreator"><documentation><summary> This method will reverse a C# char[]. </summary></documentation><parameter name="str" type="System.Char[]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Creation.WVE_EVE.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Creation.WVE_EVE.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Creation.WVE_EVE.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Creation.WVE_EVE.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Creation.WVE_EVE.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Creation.WVE_EVE.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Creation.WVE_EVE.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Creation.WVE_EVE.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Creation.WVE_EVE.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Creation.WVE_EVE.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Creation.WVE_EVE.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Creation.WVE_EVE.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Creation.WVE_EVE.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Creation.WVE_EVE.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Creation.WVE_EVE.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Creation.WVE_EVE.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Creation.WVE_EVE.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Creation.WVE_EVE.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Creation.WVE_EVE.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Creation.WVE_EVE.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Creation.WVE_EVE.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Creation.WVE_EVE.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Creation.WVE_EVE.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class></namespace></module></assembly><assembly name="ManageStats" version="1.0.1948.40944"><attribute name="System.Reflection.AssemblyKeyNameAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyKeyNameAttribute" /></attribute><attribute name="System.Reflection.AssemblyKeyFileAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyKeyFileAttribute" /></attribute><attribute name="System.Reflection.AssemblyDelaySignAttribute" target="assembly"><property name="DelaySign" type="System.Boolean" value="False" /><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyDelaySignAttribute" /></attribute><attribute name="System.Reflection.AssemblyTrademarkAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyTrademarkAttribute" /></attribute><attribute name="System.Reflection.AssemblyCopyrightAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyCopyrightAttribute" /></attribute><attribute name="System.Reflection.AssemblyProductAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyProductAttribute" /></attribute><attribute name="System.Reflection.AssemblyCompanyAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyCompanyAttribute" /></attribute><attribute name="System.Reflection.AssemblyConfigurationAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyConfigurationAttribute" /></attribute><attribute name="System.Reflection.AssemblyDescriptionAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyDescriptionAttribute" /></attribute><attribute name="System.Reflection.AssemblyTitleAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyTitleAttribute" /></attribute><attribute name="System.Diagnostics.DebuggableAttribute" target="assembly"><property name="IsJITTrackingEnabled" type="System.Boolean" value="True" /><property name="IsJITOptimizerDisabled" type="System.Boolean" value="True" /><property name="TypeId" type="System.Object" value="System.Diagnostics.DebuggableAttribute" /></attribute><module name="ManageStats.dll"><namespace name="ns_ManageStats"><class name="ManageStats" id="T:ns_ManageStats.ManageStats" access="Public"><documentation><summary> Summary description for ManageStats. </summary></documentation><constructor name=".ctor" id="M:ns_ManageStats.ManageStats.#ctor" access="Public" contract="Normal"><documentation><summary> Default constructor for ManageStats. </summary></documentation></constructor><field name="dictionaryTime" id="F:ns_ManageStats.ManageStats.dictionaryTime" access="Private" contract="Normal" type="System.String" valueType="false"><documentation><summary> This System.String represents the Dictionary Creation execution time. </summary></documentation></field><field name="puzzleTime" id="F:ns_ManageStats.ManageStats.puzzleTime" access="Private" contract="Normal" type="System.String" valueType="false"><documentation><summary> This System.String represents the Puzzle Creation execution time. </summary></documentation></field><field name="solutionTime" id="F:ns_ManageStats.ManageStats.solutionTime" access="Private" contract="Normal" type="System.String" valueType="false"><documentation><summary> This System.String represents the Puzzle Solution execution time. </summary></documentation></field><field name="solution" id="F:ns_ManageStats.ManageStats.solution" access="Public" contract="Normal" type="Puzzle_Solution.Solution" valueType="false"><documentation><summary> Object responsible for providing the puzzle solution. </summary></documentation></field><field name="puzzleCreator" id="F:ns_ManageStats.ManageStats.puzzleCreator" access="Public" contract="Normal" type="Puzzle_Creation.PuzzleCreator" valueType="false"><documentation><summary> Object responsible for providing the puzzle creation. </summary></documentation></field><field name="dictionaryCreator" id="F:ns_ManageStats.ManageStats.dictionaryCreator" access="Public" contract="Normal" type="ns_DictionaryCreator.DictionaryCreator" valueType="false"><documentation><summary> Object responsible for providing the dictionary creation. </summary></documentation></field><field name="timer1" id="F:ns_ManageStats.ManageStats.timer1" access="Private" contract="Normal" type="System.DateTime" valueType="true"><documentation><summary> Timer used to get the time of the System clock before an algorithm execution. </summary></documentation></field><field name="timer2" id="F:ns_ManageStats.ManageStats.timer2" access="Private" contract="Normal" type="System.TimeSpan" valueType="true"><documentation><summary> Timer used to get the time of the System clock after an algorithm execution. </summary></documentation></field><method name="Finalize" id="M:ns_ManageStats.ManageStats.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:ns_ManageStats.ManageStats.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:ns_ManageStats.ManageStats.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:ns_ManageStats.ManageStats.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetDictionaryTime" id="M:ns_ManageStats.ManageStats.GetDictionaryTime(System.Web.UI.HtmlControls.HtmlTable@,System.Int32,System.Int32,System.Int32,System.Collections.ArrayList)" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This operation will execute the CreateDictionary() operation and return the time taken to make it as a System.String </summary>
            <param name="table">The HtmlTable to which will be printed the results.</param>
            <param name="dictionNum">Specifies which dictionary to pass to DictionaryCreator().</param>
            <param name="listSize">Specifies how large the dictionary should be when passed to DictionaryCreator() as its second arguement.</param>
            <param name="stats">The string array collection keeping track of the resultant statistics</param>
            <param name="minimum">Specifies the minimum size of a word to use.</param></documentation><parameter name="table" type="System.Web.UI.HtmlControls.HtmlTable" valueType="false" direction="ref" /><parameter name="dictionNum" type="System.Int32" valueType="true" /><parameter name="listSize" type="System.Int32" valueType="true" /><parameter name="minimum" type="System.Int32" valueType="true" /><parameter name="stats" type="System.Collections.ArrayList" valueType="false" /></method><method name="GetPuzzleTime" id="M:ns_ManageStats.ManageStats.GetPuzzleTime(System.Web.UI.HtmlControls.HtmlTable@,System.Collections.ArrayList)" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This operation will execute the GeneratePuzzle() operaton and return the time taken to make it as a System.String </summary>
            <param name="table">The HtmlTable to which will be printed the results.</param>
            <param name="stats">The string array collection keeping track of the resultant statistics</param></documentation><parameter name="table" type="System.Web.UI.HtmlControls.HtmlTable" valueType="false" direction="ref" /><parameter name="stats" type="System.Collections.ArrayList" valueType="false" /></method><method name="GetSolutionTime" id="M:ns_ManageStats.ManageStats.GetSolutionTime(System.Web.UI.HtmlControls.HtmlTable@,System.Collections.ArrayList)" access="Public" contract="Normal" returnType="System.Int32" valueType="true"><documentation><summary> This operation will execute the Solve() operation and return the time taken to solve the puzzle as a System.String </summary>
            <param name="table">The HtmlTable to which will be printed the results.</param>
            <param name="stats">The string array collection keeping track of the resultant statistics</param>
            <returns>The total number of words found in the puzzle that matched the dictionary.</returns></documentation><parameter name="table" type="System.Web.UI.HtmlControls.HtmlTable" valueType="false" direction="ref" /><parameter name="stats" type="System.Collections.ArrayList" valueType="false" /></method><method name="GetType" id="M:ns_ManageStats.ManageStats.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:ns_ManageStats.ManageStats.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:ns_ManageStats.ManageStats.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:ns_ManageStats.ManageStats.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class></namespace></module></assembly><assembly name="ManageDB" version="1.0.1948.40944"><attribute name="System.Reflection.AssemblyKeyNameAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyKeyNameAttribute" /></attribute><attribute name="System.Reflection.AssemblyKeyFileAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyKeyFileAttribute" /></attribute><attribute name="System.Reflection.AssemblyDelaySignAttribute" target="assembly"><property name="DelaySign" type="System.Boolean" value="False" /><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyDelaySignAttribute" /></attribute><attribute name="System.Reflection.AssemblyTrademarkAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyTrademarkAttribute" /></attribute><attribute name="System.Reflection.AssemblyCopyrightAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyCopyrightAttribute" /></attribute><attribute name="System.Reflection.AssemblyProductAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyProductAttribute" /></attribute><attribute name="System.Reflection.AssemblyCompanyAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyCompanyAttribute" /></attribute><attribute name="System.Reflection.AssemblyConfigurationAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyConfigurationAttribute" /></attribute><attribute name="System.Reflection.AssemblyDescriptionAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyDescriptionAttribute" /></attribute><attribute name="System.Reflection.AssemblyTitleAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyTitleAttribute" /></attribute><attribute name="System.Diagnostics.DebuggableAttribute" target="assembly"><property name="IsJITTrackingEnabled" type="System.Boolean" value="True" /><property name="IsJITOptimizerDisabled" type="System.Boolean" value="True" /><property name="TypeId" type="System.Object" value="System.Diagnostics.DebuggableAttribute" /></attribute><module name="ManageDB.dll"><namespace name="ManageDB"><class name="ManageDataBase" id="T:ManageDB.ManageDataBase" access="Public"><documentation><summary> Responsible for managing the connection to the Data Base through a provided web service for each application execution to keep record. </summary></documentation><constructor name=".ctor" id="M:ManageDB.ManageDataBase.#ctor" access="Public" contract="Normal"><documentation><summary> Default constructor. </summary></documentation></constructor><field name="soapFormatter" id="F:ManageDB.ManageDataBase.soapFormatter" access="Private" contract="Static" type="System.Runtime.Serialization.Formatters.Soap.SoapFormatter" valueType="false"><documentation><summary>Backer for property <see cref="P:ManageDB.ManageDataBase.SoapFormatter">SoapFormatter</see></summary></documentation></field><property name="SoapFormatter" id="P:ManageDB.ManageDataBase.SoapFormatter" access="Public" contract="Normal" type="System.Runtime.Serialization.Formatters.Soap.SoapFormatter" valueType="false" get="true" set="false"><documentation><summary> Property SoapFormatter (SoapFormatter) </summary></documentation></property><method name="Finalize" id="M:ManageDB.ManageDataBase.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:ManageDB.ManageDataBase.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:ManageDB.ManageDataBase.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:ManageDB.ManageDataBase.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="SoapSerializePuzzle" id="M:ManageDB.ManageDataBase.SoapSerializePuzzle(System.Char[0:,0:,0:])" access="Public" contract="Normal" returnType="System.Boolean" valueType="true"><documentation><summary> This operation will serialize the char [,,] Puzzle (three dimentional character array) into a soap message for transport to the DataBase. </summary>
            <param name="puzzle">The three dimentional char [,,] puzzle to serialize.</param>
            <returns>True if the serialization succeeded, false if an exception ocurred.</returns></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /></method><method name="SoapSerializeDictionary" id="M:ManageDB.ManageDataBase.SoapSerializeDictionary(ns_RedBlack.RedBlack)" access="Public" contract="Normal" returnType="System.Boolean" valueType="true"><documentation><summary> This operation will serialize the RedBlack Binary Search Tree Dictionary object into a soap message for transport to the DataBase. </summary>
            <param name="dictionaryRoot">The dictionary root RedBlack node.</param>
            <returns>True if the serialization succeeded, false if an exception ocurred.</returns></documentation><parameter name="dictionaryRoot" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="GetType" id="M:ManageDB.ManageDataBase.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:ManageDB.ManageDataBase.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:ManageDB.ManageDataBase.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:ManageDB.ManageDataBase.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class></namespace></module></assembly><assembly name="Puzzle_Solution" version="1.0.1948.40943"><attribute name="System.Reflection.AssemblyDelaySignAttribute" target="assembly"><property name="DelaySign" type="System.Boolean" value="False" /><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyDelaySignAttribute" /></attribute><attribute name="System.Reflection.AssemblyTrademarkAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyTrademarkAttribute" /></attribute><attribute name="System.Diagnostics.DebuggableAttribute" target="assembly"><property name="IsJITTrackingEnabled" type="System.Boolean" value="True" /><property name="IsJITOptimizerDisabled" type="System.Boolean" value="True" /><property name="TypeId" type="System.Object" value="System.Diagnostics.DebuggableAttribute" /></attribute><attribute name="System.Reflection.AssemblyKeyNameAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyKeyNameAttribute" /></attribute><attribute name="System.Reflection.AssemblyKeyFileAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyKeyFileAttribute" /></attribute><attribute name="System.Reflection.AssemblyCompanyAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyCompanyAttribute" /></attribute><attribute name="System.Reflection.AssemblyTitleAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyTitleAttribute" /></attribute><attribute name="System.Reflection.AssemblyProductAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyProductAttribute" /></attribute><attribute name="System.Reflection.AssemblyCopyrightAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyCopyrightAttribute" /></attribute><attribute name="System.Reflection.AssemblyConfigurationAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyConfigurationAttribute" /></attribute><attribute name="System.Reflection.AssemblyDescriptionAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyDescriptionAttribute" /></attribute><module name="Puzzle_Solution.dll"><namespace name="Puzzle_Solution"><class name="Solution" id="T:Puzzle_Solution.Solution" access="Public"><documentation><summary> Summary description for Solution. </summary></documentation><derivedBy id="T:ns_DictionaryCreator.DictionaryCreator" /><derivedBy id="T:Puzzle_Creation.PuzzleCreator" /><derivedBy id="T:Puzzle_Solution.Solution_CCTELW" /><derivedBy id="T:Puzzle_Solution.Solution_CCTNLS" /><derivedBy id="T:Puzzle_Solution.Solution_CCTSLN" /><derivedBy id="T:Puzzle_Solution.Solution_CCTWLE" /><derivedBy id="T:Puzzle_Solution.Solution_NESideSWSide" /><derivedBy id="T:Puzzle_Solution.Solution_NETESWLE" /><derivedBy id="T:Puzzle_Solution.Solution_NVESVE" /><derivedBy id="T:Puzzle_Solution.Solution_NWSideSESide" /><derivedBy id="T:Puzzle_Solution.Solution_NWTESELE" /><derivedBy id="T:Puzzle_Solution.Solution_SETENWLE" /><derivedBy id="T:Puzzle_Solution.Solution_SWTENELE" /><derivedBy id="T:Puzzle_Solution.Solution_TOPBOTTOM" /><derivedBy id="T:Puzzle_Solution.Solution_WVEEVE" /><constructor name=".ctor" id="M:Puzzle_Solution.Solution.#ctor" access="Public" contract="Normal"><documentation><summary> Default Solution Constuctor Sets up all of the Solution Class Components </summary></documentation></constructor><field name="solutions" id="F:Puzzle_Solution.Solution.solutions" access="Private" contract="Normal" type="System.Threading.Thread[]" valueType="false"><documentation><summary> Solution Threads for the multithreaded solution </summary></documentation></field><field name="solve" id="F:Puzzle_Solution.Solution.solve" access="Private" contract="Normal" type="System.Threading.Thread" valueType="false"><documentation><summary> The current running thread for the Solve() operation </summary></documentation></field><field name="puzzle" id="F:Puzzle_Solution.Solution.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Solution.Solution.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Solution.Solution.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Solution.Solution.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Solution.Solution.xbound" access="Family" contract="Static" type="System.Int32" valueType="true"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Solution.Solution.ybound" access="Family" contract="Static" type="System.Int32" valueType="true"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Solution.Solution.zbound" access="Family" contract="Static" type="System.Int32" valueType="true"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Solution.Solution.x" access="Family" contract="Static" type="System.Int32" valueType="true"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Solution.Solution.y" access="Family" contract="Static" type="System.Int32" valueType="true"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Solution.Solution.z" access="Family" contract="Static" type="System.Int32" valueType="true"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Solution.Solution.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="numWordsCOPY" id="F:Puzzle_Solution.Solution.numWordsCOPY" access="Private" contract="Static" type="System.Int32[]" valueType="false"><documentation><summary> This static integer array is needed for maintaining concurrent writes to numWordsFound static int reference. </summary></documentation></field><field name="wordFindings" id="F:Puzzle_Solution.Solution.wordFindings" access="Private" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false"><documentation><summary> This static RedBlack Tree array is needed for maintaining concurrent writes to the static RedBlack wordsFound final collection. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Solution.Solution.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><field name="cctelw" id="F:Puzzle_Solution.Solution.cctelw" access="Private" contract="Static" type="Puzzle_Solution.Solution_CCTELW" valueType="false" /><field name="cctnls" id="F:Puzzle_Solution.Solution.cctnls" access="Private" contract="Static" type="Puzzle_Solution.Solution_CCTNLS" valueType="false" /><field name="cctsln" id="F:Puzzle_Solution.Solution.cctsln" access="Private" contract="Static" type="Puzzle_Solution.Solution_CCTSLN" valueType="false" /><field name="cctwle" id="F:Puzzle_Solution.Solution.cctwle" access="Private" contract="Static" type="Puzzle_Solution.Solution_CCTWLE" valueType="false" /><field name="nesideswside" id="F:Puzzle_Solution.Solution.nesideswside" access="Private" contract="Static" type="Puzzle_Solution.Solution_NESideSWSide" valueType="false" /><field name="neteswle" id="F:Puzzle_Solution.Solution.neteswle" access="Private" contract="Static" type="Puzzle_Solution.Solution_NETESWLE" valueType="false" /><field name="nvesve" id="F:Puzzle_Solution.Solution.nvesve" access="Private" contract="Static" type="Puzzle_Solution.Solution_NVESVE" valueType="false" /><field name="nwsideseside" id="F:Puzzle_Solution.Solution.nwsideseside" access="Private" contract="Static" type="Puzzle_Solution.Solution_NWSideSESide" valueType="false" /><field name="nwtesele" id="F:Puzzle_Solution.Solution.nwtesele" access="Private" contract="Static" type="Puzzle_Solution.Solution_NWTESELE" valueType="false" /><field name="setenwle" id="F:Puzzle_Solution.Solution.setenwle" access="Private" contract="Static" type="Puzzle_Solution.Solution_SETENWLE" valueType="false" /><field name="swtenele" id="F:Puzzle_Solution.Solution.swtenele" access="Private" contract="Static" type="Puzzle_Solution.Solution_SWTENELE" valueType="false" /><field name="topbottom" id="F:Puzzle_Solution.Solution.topbottom" access="Private" contract="Static" type="Puzzle_Solution.Solution_TOPBOTTOM" valueType="false" /><field name="wveeve" id="F:Puzzle_Solution.Solution.wveeve" access="Private" contract="Static" type="Puzzle_Solution.Solution_WVEEVE" valueType="false" /><property name="WordsFound" id="P:Puzzle_Solution.Solution.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Solution.Solution.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Solution.Solution.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Finalize" id="M:Puzzle_Solution.Solution.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Solution.Solution.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Solution.Solution.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="InitializeThreads" id="M:Puzzle_Solution.Solution.InitializeThreads" access="Private" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Initialize the appropriate delgates </summary></documentation></method><method name="Restart" id="M:Puzzle_Solution.Solution.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Solution.Solution.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Solution.Solution.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Solution.Solution.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary>
            <returns>The total number of words found in the puzzle that matched the dictionary.</returns></documentation></method><method name="GetFoundWords" id="M:Puzzle_Solution.Solution.GetFoundWords" access="Private" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method consolidates the wordFindings sub lists into the single wordsFound list. </summary></documentation></method><method name="VisitWordFoundSubList" id="M:Puzzle_Solution.Solution.VisitWordFoundSubList(ns_RedBlack.RedBlack)" access="Private" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method visits all of the individual sub lists for this words found and combines them into on wordsFound list. </summary>
            <param name="nextFoundWord">Specifies the next words found sub list to sort through all it's individual nodes.</param></documentation><parameter name="nextFoundWord" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="GetMatchedWords" id="M:Puzzle_Solution.Solution.GetMatchedWords(ns_RedBlack.RedBlack,System.Int32)" access="Private" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will retrieve each dictionary word (those found in the randomly generated dictonary), in desending order, one at a time, and check each one of them against every sub list entry in the possibilities RedBlack Binary Search Tree which represents every word in the puzzle with three or more characters. Each matched word is then added to a separate RedBlack Tree called wordsFound. </summary>
            <param name="nextDictionaryWord">The root RedBlack node of the dictionary tree list.</param>
            <param name="direction">This specifies which direction to search all the word possibilities that matchup with something, if anything, inside the dictionary.</param></documentation><parameter name="nextDictionaryWord" type="ns_RedBlack.RedBlack" valueType="false" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Solution.Solution.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary>
            <param name="puzzle">Used to get a local copy of the puzzle for thread multiple read access.</param>
            <param name="initX">Specifies the starting point for X as 0 or the X boudary value.</param>
            <param name="initY">Specifies the starting point for Y as 0 or the Y boudary value.</param>
            <param name="initZ">Specifies the starting point for Z as 0 or the Z boudary value.</param>
            <param name="endX">Specifies the ending point for X as -1 for "greater than" -1 or the X boundary value for "less than" the X boundary value.</param>
            <param name="endY">Specifies the ending point for Y as -1 for "greater than" -1 or the Y boundary value for "less than" the Y boundary value.</param>
            <param name="endZ">Specifies the ending point for Z as -1 for "greater than" -1 or the Z boundary value for "less than" the Z boundary value.</param>
            <param name="incX">Specifies how X increments or decrements as 1, 0, or -1 added to X.</param>
            <param name="incY">Specifies how Y increments or decrements as 1, 0, or -1 added to Y.</param>
            <param name="incZ">Specifies how Z increments or decrements as 1, 0, or -1 added to Z.</param>
            <param name="direction">Spedifies what direction is being solved.</param></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="Reverse" id="M:Puzzle_Solution.Solution.Reverse(System.Char[])" access="Private" contract="Normal" returnType="System.Char[]" valueType="false"><documentation><summary> This helper method will reverse a C# char[]. </summary>
            <param name="str">This parameter is the char[] string to reverse.</param>
            <returns>The reversed char[] str string.</returns></documentation><parameter name="str" type="System.Char[]" valueType="false" /></method><method name="OutputPuzzle" id="M:Puzzle_Solution.Solution.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Solution.Solution.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Solution.Solution.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Solution.Solution.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Solution.Solution.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Solution.Solution.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Solution.Solution.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Solution.Solution.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Solution.Solution.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Solution.Solution.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Solution.Solution.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Solution.Solution.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Solution.Solution.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Solution.Solution.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Solution.Solution.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Solution.Solution.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Solution.Solution.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="Solution_TestClass" id="T:Puzzle_Solution.Solution_TestClass" access="Public"><documentation><summary> Test class for the Solution implementation base class </summary></documentation><attribute name="NUnit.Framework.TestFixtureAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestFixtureAttribute" /></attribute><constructor name=".ctor" id="M:Puzzle_Solution.Solution_TestClass.#ctor" access="Public" contract="Normal"><documentation><summary>Initializes a new instance of the <see cref="T:Puzzle_Solution.Solution_TestClass" /> class.</summary></documentation></constructor><field name="solution" id="F:Puzzle_Solution.Solution_TestClass.solution" access="Private" contract="Normal" type="Puzzle_Solution.Solution" valueType="false" /><method name="Finalize" id="M:Puzzle_Solution.Solution_TestClass.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Solution.Solution_TestClass.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_TestClass.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Solution.Solution_TestClass.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="SetUpSingleThread" id="M:Puzzle_Solution.Solution_TestClass.SetUpSingleThread" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> SetUp method for Solution_TestClass </summary></documentation><attribute name="NUnit.Framework.SetUpAttribute"><property name="TypeId" type="System.Object" value="NUnit.Framework.SetUpAttribute" /></attribute></method><method name="RunSingleThreadedSolution" id="M:Puzzle_Solution.Solution_TestClass.RunSingleThreadedSolution" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method is being used to call all of the solution sub task without threading to trouble shoot an index out of range exception problem. </summary></documentation><attribute name="NUnit.Framework.TestAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestAttribute" /></attribute></method><method name="Test1" id="M:Puzzle_Solution.Solution_TestClass.Test1" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Test1 counts the size of the dictionary and the wordsFound RedBlack Binary Search Trees and compares their totals, if the size of the wordsFound list is larger than the dictionary, then the test fails. </summary></documentation><attribute name="NUnit.Framework.TestAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestAttribute" /></attribute></method><method name="Test2" id="M:Puzzle_Solution.Solution_TestClass.Test2" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Test2 prints the contents of the dictionary and the wordsFound to the Trace.Writeline() operation so that the contents of each list maybe visually inspected. This may also be printed to a file by un- commenting the TraceListener. </summary></documentation><attribute name="NUnit.Framework.TestAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestAttribute" /></attribute></method><method name="Main" id="M:Puzzle_Solution.Solution_TestClass.Main(System.String[])" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Solution_TestClass entry point </summary>
            <param name="args"></param></documentation><parameter name="args" type="System.String[]" valueType="false" /></method><method name="GetType" id="M:Puzzle_Solution.Solution_TestClass.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Solution.Solution_TestClass.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_TestClass.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Solution.Solution_TestClass.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="Solution_CCTELW" id="T:Puzzle_Solution.Solution_CCTELW" access="Public" sealed="true" baseType="Solution"><documentation><summary> Summary description for Solution_CCTELW. </summary></documentation><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /><constructor name=".ctor" id="M:Puzzle_Solution.Solution_CCTELW.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor </summary></documentation></constructor><field name="xboundary" id="F:Puzzle_Solution.Solution_CCTELW.xboundary" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Private copies of the puzzle boudary values </summary></documentation></field><field name="yboundary" id="F:Puzzle_Solution.Solution_CCTELW.yboundary" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Private copies of the puzzle boudary values </summary></documentation></field><field name="zboundary" id="F:Puzzle_Solution.Solution_CCTELW.zboundary" access="Private" contract="Normal" type="System.Int32" valueType="true"><documentation><summary> Private copies of the puzzle boudary values </summary></documentation></field><field name="puzzle" id="F:Puzzle_Solution.Solution_CCTELW.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Solution.Solution_CCTELW.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Solution.Solution_CCTELW.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Solution.Solution_CCTELW.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Solution.Solution_CCTELW.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Solution.Solution_CCTELW.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Solution.Solution_CCTELW.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Solution.Solution_CCTELW.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Solution.Solution_CCTELW.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Solution.Solution_CCTELW.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Solution.Solution_CCTELW.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Solution.Solution_CCTELW.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="WordsFound" id="P:Puzzle_Solution.Solution_CCTELW.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Solution.Solution_CCTELW.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Solution.Solution_CCTELW.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Finalize" id="M:Puzzle_Solution.Solution_CCTELW.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Solution.Solution_CCTELW.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_CCTELW.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Solution.Solution_CCTELW.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetPossibilities_CCTELW" id="M:Puzzle_Solution.Solution_CCTELW.GetPossibilities_CCTELW(System.Char[0:,0:,0:])" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will get all of the specified puzzle substring possibilities in the direction of Corner to Corner Top East to Lower West as well as the reverse direction along that line of movement. </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Solution.Solution_CCTELW.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Solution.Solution_CCTELW.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Solution.Solution_CCTELW.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Solution.Solution_CCTELW.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Solution.Solution_CCTELW.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Solution.Solution_CCTELW.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Solution.Solution_CCTELW.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Solution.Solution_CCTELW.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Solution.Solution_CCTELW.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Solution.Solution_CCTELW.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Solution.Solution_CCTELW.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Solution.Solution_CCTELW.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Solution.Solution_CCTELW.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Solution.Solution_CCTELW.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Solution.Solution_CCTELW.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Solution.Solution_CCTELW.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Solution.Solution_CCTELW.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Solution.Solution_CCTELW.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Solution.Solution_CCTELW.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Solution.Solution_CCTELW.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Solution.Solution_CCTELW.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_CCTELW.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Solution.Solution_CCTELW.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="Solution_CCTNLS" id="T:Puzzle_Solution.Solution_CCTNLS" access="Public" sealed="true" baseType="Solution"><documentation><summary> Summary description for Solution_CCTNLS. </summary></documentation><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /><constructor name=".ctor" id="M:Puzzle_Solution.Solution_CCTNLS.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor </summary></documentation></constructor><field name="xboundary" id="F:Puzzle_Solution.Solution_CCTNLS.xboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="yboundary" id="F:Puzzle_Solution.Solution_CCTNLS.yboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="zboundary" id="F:Puzzle_Solution.Solution_CCTNLS.zboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="puzzle" id="F:Puzzle_Solution.Solution_CCTNLS.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Solution.Solution_CCTNLS.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Solution.Solution_CCTNLS.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Solution.Solution_CCTNLS.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Solution.Solution_CCTNLS.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Solution.Solution_CCTNLS.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Solution.Solution_CCTNLS.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Solution.Solution_CCTNLS.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Solution.Solution_CCTNLS.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Solution.Solution_CCTNLS.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Solution.Solution_CCTNLS.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Solution.Solution_CCTNLS.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="WordsFound" id="P:Puzzle_Solution.Solution_CCTNLS.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Solution.Solution_CCTNLS.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Solution.Solution_CCTNLS.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Finalize" id="M:Puzzle_Solution.Solution_CCTNLS.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Solution.Solution_CCTNLS.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_CCTNLS.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Solution.Solution_CCTNLS.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetPossibilities_CCTNLS" id="M:Puzzle_Solution.Solution_CCTNLS.GetPossibilities_CCTNLS(System.Char[0:,0:,0:])" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will get all of the specified puzzle substring possibilities in the direction of Corner to Corner Top North to Lower South as well as the reverse direction along that line of movement. </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Solution.Solution_CCTNLS.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Solution.Solution_CCTNLS.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Solution.Solution_CCTNLS.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Solution.Solution_CCTNLS.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Solution.Solution_CCTNLS.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Solution.Solution_CCTNLS.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Solution.Solution_CCTNLS.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Solution.Solution_CCTNLS.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Solution.Solution_CCTNLS.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Solution.Solution_CCTNLS.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Solution.Solution_CCTNLS.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Solution.Solution_CCTNLS.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Solution.Solution_CCTNLS.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Solution.Solution_CCTNLS.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Solution.Solution_CCTNLS.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Solution.Solution_CCTNLS.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Solution.Solution_CCTNLS.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Solution.Solution_CCTNLS.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Solution.Solution_CCTNLS.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Solution.Solution_CCTNLS.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Solution.Solution_CCTNLS.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_CCTNLS.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Solution.Solution_CCTNLS.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="Solution_CCTSLN" id="T:Puzzle_Solution.Solution_CCTSLN" access="Public" sealed="true" baseType="Solution"><documentation><summary> Summary description for Solution_CCTSLN. </summary></documentation><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /><constructor name=".ctor" id="M:Puzzle_Solution.Solution_CCTSLN.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor </summary></documentation></constructor><field name="xboundary" id="F:Puzzle_Solution.Solution_CCTSLN.xboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="yboundary" id="F:Puzzle_Solution.Solution_CCTSLN.yboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="zboundary" id="F:Puzzle_Solution.Solution_CCTSLN.zboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="puzzle" id="F:Puzzle_Solution.Solution_CCTSLN.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Solution.Solution_CCTSLN.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Solution.Solution_CCTSLN.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Solution.Solution_CCTSLN.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Solution.Solution_CCTSLN.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Solution.Solution_CCTSLN.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Solution.Solution_CCTSLN.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Solution.Solution_CCTSLN.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Solution.Solution_CCTSLN.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Solution.Solution_CCTSLN.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Solution.Solution_CCTSLN.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Solution.Solution_CCTSLN.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="WordsFound" id="P:Puzzle_Solution.Solution_CCTSLN.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Solution.Solution_CCTSLN.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Solution.Solution_CCTSLN.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Finalize" id="M:Puzzle_Solution.Solution_CCTSLN.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Solution.Solution_CCTSLN.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_CCTSLN.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Solution.Solution_CCTSLN.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetPossibilities_CCTSLN" id="M:Puzzle_Solution.Solution_CCTSLN.GetPossibilities_CCTSLN(System.Char[0:,0:,0:])" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will get all of the specified puzzle substring possibilities in the direction of Corner to Corner Top South to Lower North as well as the reverse direction along that line of movement. </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Solution.Solution_CCTSLN.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Solution.Solution_CCTSLN.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Solution.Solution_CCTSLN.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Solution.Solution_CCTSLN.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Solution.Solution_CCTSLN.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Solution.Solution_CCTSLN.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Solution.Solution_CCTSLN.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Solution.Solution_CCTSLN.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Solution.Solution_CCTSLN.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Solution.Solution_CCTSLN.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Solution.Solution_CCTSLN.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Solution.Solution_CCTSLN.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Solution.Solution_CCTSLN.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Solution.Solution_CCTSLN.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Solution.Solution_CCTSLN.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Solution.Solution_CCTSLN.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Solution.Solution_CCTSLN.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Solution.Solution_CCTSLN.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Solution.Solution_CCTSLN.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Solution.Solution_CCTSLN.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Solution.Solution_CCTSLN.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_CCTSLN.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Solution.Solution_CCTSLN.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="Solution_CCTWLE" id="T:Puzzle_Solution.Solution_CCTWLE" access="Public" sealed="true" baseType="Solution"><documentation><summary> Summary description for Solution_CCTELW. </summary></documentation><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /><constructor name=".ctor" id="M:Puzzle_Solution.Solution_CCTWLE.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor </summary></documentation></constructor><field name="xboundary" id="F:Puzzle_Solution.Solution_CCTWLE.xboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="yboundary" id="F:Puzzle_Solution.Solution_CCTWLE.yboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="zboundary" id="F:Puzzle_Solution.Solution_CCTWLE.zboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="puzzle" id="F:Puzzle_Solution.Solution_CCTWLE.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Solution.Solution_CCTWLE.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Solution.Solution_CCTWLE.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Solution.Solution_CCTWLE.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Solution.Solution_CCTWLE.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Solution.Solution_CCTWLE.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Solution.Solution_CCTWLE.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Solution.Solution_CCTWLE.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Solution.Solution_CCTWLE.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Solution.Solution_CCTWLE.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Solution.Solution_CCTWLE.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Solution.Solution_CCTWLE.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="WordsFound" id="P:Puzzle_Solution.Solution_CCTWLE.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Solution.Solution_CCTWLE.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Solution.Solution_CCTWLE.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Finalize" id="M:Puzzle_Solution.Solution_CCTWLE.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Solution.Solution_CCTWLE.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_CCTWLE.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Solution.Solution_CCTWLE.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetPossibilities_CCTWLE" id="M:Puzzle_Solution.Solution_CCTWLE.GetPossibilities_CCTWLE(System.Char[0:,0:,0:])" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will get all of the specified puzzle substring possibilities in the direction of Corner to Corner Top West to Lower East as well as the reverse direction along that line of movement. </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Solution.Solution_CCTWLE.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Solution.Solution_CCTWLE.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Solution.Solution_CCTWLE.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Solution.Solution_CCTWLE.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Solution.Solution_CCTWLE.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Solution.Solution_CCTWLE.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Solution.Solution_CCTWLE.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Solution.Solution_CCTWLE.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Solution.Solution_CCTWLE.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Solution.Solution_CCTWLE.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Solution.Solution_CCTWLE.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Solution.Solution_CCTWLE.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Solution.Solution_CCTWLE.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Solution.Solution_CCTWLE.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Solution.Solution_CCTWLE.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Solution.Solution_CCTWLE.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Solution.Solution_CCTWLE.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Solution.Solution_CCTWLE.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Solution.Solution_CCTWLE.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Solution.Solution_CCTWLE.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Solution.Solution_CCTWLE.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_CCTWLE.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Solution.Solution_CCTWLE.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="Solution_NESideSWSide" id="T:Puzzle_Solution.Solution_NESideSWSide" access="Public" sealed="true" baseType="Solution"><documentation><summary> Summary description for Solution_NESideSWSide. </summary></documentation><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /><constructor name=".ctor" id="M:Puzzle_Solution.Solution_NESideSWSide.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor </summary></documentation></constructor><field name="xboundary" id="F:Puzzle_Solution.Solution_NESideSWSide.xboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="yboundary" id="F:Puzzle_Solution.Solution_NESideSWSide.yboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="zboundary" id="F:Puzzle_Solution.Solution_NESideSWSide.zboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="puzzle" id="F:Puzzle_Solution.Solution_NESideSWSide.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Solution.Solution_NESideSWSide.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Solution.Solution_NESideSWSide.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Solution.Solution_NESideSWSide.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Solution.Solution_NESideSWSide.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Solution.Solution_NESideSWSide.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Solution.Solution_NESideSWSide.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Solution.Solution_NESideSWSide.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Solution.Solution_NESideSWSide.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Solution.Solution_NESideSWSide.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Solution.Solution_NESideSWSide.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Solution.Solution_NESideSWSide.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="WordsFound" id="P:Puzzle_Solution.Solution_NESideSWSide.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Solution.Solution_NESideSWSide.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Solution.Solution_NESideSWSide.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Finalize" id="M:Puzzle_Solution.Solution_NESideSWSide.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Solution.Solution_NESideSWSide.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_NESideSWSide.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Solution.Solution_NESideSWSide.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetPossibilities_NESideSWSide" id="M:Puzzle_Solution.Solution_NESideSWSide.GetPossibilities_NESideSWSide(System.Char[0:,0:,0:])" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will get all of the specified puzzle substring possibilities in the direction of North East Side to South West Side as well as the reverse direction along that line of movement. </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Solution.Solution_NESideSWSide.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Solution.Solution_NESideSWSide.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Solution.Solution_NESideSWSide.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Solution.Solution_NESideSWSide.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Solution.Solution_NESideSWSide.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Solution.Solution_NESideSWSide.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Solution.Solution_NESideSWSide.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Solution.Solution_NESideSWSide.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Solution.Solution_NESideSWSide.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Solution.Solution_NESideSWSide.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Solution.Solution_NESideSWSide.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Solution.Solution_NESideSWSide.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Solution.Solution_NESideSWSide.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Solution.Solution_NESideSWSide.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Solution.Solution_NESideSWSide.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Solution.Solution_NESideSWSide.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Solution.Solution_NESideSWSide.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Solution.Solution_NESideSWSide.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Solution.Solution_NESideSWSide.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Solution.Solution_NESideSWSide.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Solution.Solution_NESideSWSide.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_NESideSWSide.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Solution.Solution_NESideSWSide.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="Solution_NETESWLE" id="T:Puzzle_Solution.Solution_NETESWLE" access="Public" sealed="true" baseType="Solution"><documentation><summary> Summary description for Solution_NETESWLE. </summary></documentation><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /><constructor name=".ctor" id="M:Puzzle_Solution.Solution_NETESWLE.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor </summary></documentation></constructor><field name="xboundary" id="F:Puzzle_Solution.Solution_NETESWLE.xboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="yboundary" id="F:Puzzle_Solution.Solution_NETESWLE.yboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="zboundary" id="F:Puzzle_Solution.Solution_NETESWLE.zboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="puzzle" id="F:Puzzle_Solution.Solution_NETESWLE.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Solution.Solution_NETESWLE.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Solution.Solution_NETESWLE.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Solution.Solution_NETESWLE.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Solution.Solution_NETESWLE.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Solution.Solution_NETESWLE.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Solution.Solution_NETESWLE.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Solution.Solution_NETESWLE.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Solution.Solution_NETESWLE.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Solution.Solution_NETESWLE.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Solution.Solution_NETESWLE.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Solution.Solution_NETESWLE.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="WordsFound" id="P:Puzzle_Solution.Solution_NETESWLE.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Solution.Solution_NETESWLE.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Solution.Solution_NETESWLE.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Finalize" id="M:Puzzle_Solution.Solution_NETESWLE.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Solution.Solution_NETESWLE.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_NETESWLE.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Solution.Solution_NETESWLE.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetPossibilities_NETESWLE" id="M:Puzzle_Solution.Solution_NETESWLE.GetPossibilities_NETESWLE(System.Char[0:,0:,0:])" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will get all of the specified puzzle substring possibilities in the direction of North East Top Edge to South West Lower Edge as well as the reverse direction along that line of movement. </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Solution.Solution_NETESWLE.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Solution.Solution_NETESWLE.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Solution.Solution_NETESWLE.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Solution.Solution_NETESWLE.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Solution.Solution_NETESWLE.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Solution.Solution_NETESWLE.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Solution.Solution_NETESWLE.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Solution.Solution_NETESWLE.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Solution.Solution_NETESWLE.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Solution.Solution_NETESWLE.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Solution.Solution_NETESWLE.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Solution.Solution_NETESWLE.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Solution.Solution_NETESWLE.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Solution.Solution_NETESWLE.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Solution.Solution_NETESWLE.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Solution.Solution_NETESWLE.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Solution.Solution_NETESWLE.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Solution.Solution_NETESWLE.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Solution.Solution_NETESWLE.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Solution.Solution_NETESWLE.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Solution.Solution_NETESWLE.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_NETESWLE.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Solution.Solution_NETESWLE.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="Solution_NVESVE" id="T:Puzzle_Solution.Solution_NVESVE" access="Public" sealed="true" baseType="Solution"><documentation><summary> Summary description for Solution_NVESVE. </summary></documentation><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /><constructor name=".ctor" id="M:Puzzle_Solution.Solution_NVESVE.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor </summary></documentation></constructor><field name="xboundary" id="F:Puzzle_Solution.Solution_NVESVE.xboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="yboundary" id="F:Puzzle_Solution.Solution_NVESVE.yboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="zboundary" id="F:Puzzle_Solution.Solution_NVESVE.zboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="puzzle" id="F:Puzzle_Solution.Solution_NVESVE.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Solution.Solution_NVESVE.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Solution.Solution_NVESVE.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Solution.Solution_NVESVE.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Solution.Solution_NVESVE.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Solution.Solution_NVESVE.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Solution.Solution_NVESVE.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Solution.Solution_NVESVE.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Solution.Solution_NVESVE.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Solution.Solution_NVESVE.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Solution.Solution_NVESVE.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Solution.Solution_NVESVE.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="WordsFound" id="P:Puzzle_Solution.Solution_NVESVE.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Solution.Solution_NVESVE.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Solution.Solution_NVESVE.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Finalize" id="M:Puzzle_Solution.Solution_NVESVE.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Solution.Solution_NVESVE.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_NVESVE.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Solution.Solution_NVESVE.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetPossibilities_NVESVE" id="M:Puzzle_Solution.Solution_NVESVE.GetPossibilities_NVESVE(System.Char[0:,0:,0:])" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will get all of the specified puzzle substring possibilities in the direction of North Vertical Edge to South Vertical Edge as well as the reverse direction along that line of movement. </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Solution.Solution_NVESVE.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Solution.Solution_NVESVE.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Solution.Solution_NVESVE.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Solution.Solution_NVESVE.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Solution.Solution_NVESVE.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Solution.Solution_NVESVE.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Solution.Solution_NVESVE.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Solution.Solution_NVESVE.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Solution.Solution_NVESVE.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Solution.Solution_NVESVE.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Solution.Solution_NVESVE.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Solution.Solution_NVESVE.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Solution.Solution_NVESVE.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Solution.Solution_NVESVE.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Solution.Solution_NVESVE.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Solution.Solution_NVESVE.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Solution.Solution_NVESVE.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Solution.Solution_NVESVE.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Solution.Solution_NVESVE.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Solution.Solution_NVESVE.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Solution.Solution_NVESVE.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_NVESVE.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Solution.Solution_NVESVE.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="Solution_NWSideSESide" id="T:Puzzle_Solution.Solution_NWSideSESide" access="Public" sealed="true" baseType="Solution"><documentation><summary> Summary description for Solution_NWSideSESide. </summary></documentation><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /><constructor name=".ctor" id="M:Puzzle_Solution.Solution_NWSideSESide.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor </summary></documentation></constructor><field name="xboundary" id="F:Puzzle_Solution.Solution_NWSideSESide.xboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="yboundary" id="F:Puzzle_Solution.Solution_NWSideSESide.yboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="zboundary" id="F:Puzzle_Solution.Solution_NWSideSESide.zboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="puzzle" id="F:Puzzle_Solution.Solution_NWSideSESide.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Solution.Solution_NWSideSESide.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Solution.Solution_NWSideSESide.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Solution.Solution_NWSideSESide.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Solution.Solution_NWSideSESide.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Solution.Solution_NWSideSESide.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Solution.Solution_NWSideSESide.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Solution.Solution_NWSideSESide.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Solution.Solution_NWSideSESide.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Solution.Solution_NWSideSESide.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Solution.Solution_NWSideSESide.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Solution.Solution_NWSideSESide.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="WordsFound" id="P:Puzzle_Solution.Solution_NWSideSESide.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Solution.Solution_NWSideSESide.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Solution.Solution_NWSideSESide.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Finalize" id="M:Puzzle_Solution.Solution_NWSideSESide.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Solution.Solution_NWSideSESide.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_NWSideSESide.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Solution.Solution_NWSideSESide.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetPossibilities_NWSideSESide" id="M:Puzzle_Solution.Solution_NWSideSESide.GetPossibilities_NWSideSESide(System.Char[0:,0:,0:])" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will get all of the specified puzzle substring possibilities in the direction of North West Side to South East Side as well as the reverse direction along that line of movement. </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Solution.Solution_NWSideSESide.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Solution.Solution_NWSideSESide.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Solution.Solution_NWSideSESide.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Solution.Solution_NWSideSESide.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Solution.Solution_NWSideSESide.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Solution.Solution_NWSideSESide.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Solution.Solution_NWSideSESide.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Solution.Solution_NWSideSESide.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Solution.Solution_NWSideSESide.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Solution.Solution_NWSideSESide.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Solution.Solution_NWSideSESide.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Solution.Solution_NWSideSESide.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Solution.Solution_NWSideSESide.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Solution.Solution_NWSideSESide.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Solution.Solution_NWSideSESide.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Solution.Solution_NWSideSESide.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Solution.Solution_NWSideSESide.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Solution.Solution_NWSideSESide.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Solution.Solution_NWSideSESide.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Solution.Solution_NWSideSESide.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Solution.Solution_NWSideSESide.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_NWSideSESide.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Solution.Solution_NWSideSESide.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="Solution_NWTESELE" id="T:Puzzle_Solution.Solution_NWTESELE" access="Public" sealed="true" baseType="Solution"><documentation><summary> Summary description for Solution_NWTESELE. </summary></documentation><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /><constructor name=".ctor" id="M:Puzzle_Solution.Solution_NWTESELE.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor </summary></documentation></constructor><field name="xboundary" id="F:Puzzle_Solution.Solution_NWTESELE.xboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="yboundary" id="F:Puzzle_Solution.Solution_NWTESELE.yboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="zboundary" id="F:Puzzle_Solution.Solution_NWTESELE.zboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="puzzle" id="F:Puzzle_Solution.Solution_NWTESELE.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Solution.Solution_NWTESELE.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Solution.Solution_NWTESELE.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Solution.Solution_NWTESELE.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Solution.Solution_NWTESELE.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Solution.Solution_NWTESELE.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Solution.Solution_NWTESELE.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Solution.Solution_NWTESELE.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Solution.Solution_NWTESELE.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Solution.Solution_NWTESELE.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Solution.Solution_NWTESELE.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Solution.Solution_NWTESELE.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="WordsFound" id="P:Puzzle_Solution.Solution_NWTESELE.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Solution.Solution_NWTESELE.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Solution.Solution_NWTESELE.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Finalize" id="M:Puzzle_Solution.Solution_NWTESELE.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Solution.Solution_NWTESELE.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_NWTESELE.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Solution.Solution_NWTESELE.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetPossibilities_NWTESELE" id="M:Puzzle_Solution.Solution_NWTESELE.GetPossibilities_NWTESELE(System.Char[0:,0:,0:])" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will get all of the specified puzzle substring possibilities in the direction of North West Top Edge to South East Lower Edge as well as the reverse direction along that line of movement. </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Solution.Solution_NWTESELE.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Solution.Solution_NWTESELE.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Solution.Solution_NWTESELE.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Solution.Solution_NWTESELE.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Solution.Solution_NWTESELE.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Solution.Solution_NWTESELE.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Solution.Solution_NWTESELE.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Solution.Solution_NWTESELE.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Solution.Solution_NWTESELE.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Solution.Solution_NWTESELE.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Solution.Solution_NWTESELE.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Solution.Solution_NWTESELE.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Solution.Solution_NWTESELE.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Solution.Solution_NWTESELE.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Solution.Solution_NWTESELE.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Solution.Solution_NWTESELE.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Solution.Solution_NWTESELE.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Solution.Solution_NWTESELE.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Solution.Solution_NWTESELE.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Solution.Solution_NWTESELE.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Solution.Solution_NWTESELE.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_NWTESELE.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Solution.Solution_NWTESELE.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="Solution_SETENWLE" id="T:Puzzle_Solution.Solution_SETENWLE" access="Public" sealed="true" baseType="Solution"><documentation><summary> Summary description for Solution_SETENWLE. </summary></documentation><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /><constructor name=".ctor" id="M:Puzzle_Solution.Solution_SETENWLE.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor </summary></documentation></constructor><field name="xboundary" id="F:Puzzle_Solution.Solution_SETENWLE.xboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="yboundary" id="F:Puzzle_Solution.Solution_SETENWLE.yboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="zboundary" id="F:Puzzle_Solution.Solution_SETENWLE.zboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="puzzle" id="F:Puzzle_Solution.Solution_SETENWLE.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Solution.Solution_SETENWLE.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Solution.Solution_SETENWLE.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Solution.Solution_SETENWLE.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Solution.Solution_SETENWLE.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Solution.Solution_SETENWLE.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Solution.Solution_SETENWLE.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Solution.Solution_SETENWLE.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Solution.Solution_SETENWLE.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Solution.Solution_SETENWLE.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Solution.Solution_SETENWLE.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Solution.Solution_SETENWLE.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="WordsFound" id="P:Puzzle_Solution.Solution_SETENWLE.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Solution.Solution_SETENWLE.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Solution.Solution_SETENWLE.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Finalize" id="M:Puzzle_Solution.Solution_SETENWLE.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Solution.Solution_SETENWLE.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_SETENWLE.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Solution.Solution_SETENWLE.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetPossibilities_SETENWLE" id="M:Puzzle_Solution.Solution_SETENWLE.GetPossibilities_SETENWLE(System.Char[0:,0:,0:])" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will get all of the specified puzzle substring possibilities in the direction of South East Top Edge to North West Lower Edge as well as the reverse direction along that line of movement. </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Solution.Solution_SETENWLE.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Solution.Solution_SETENWLE.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Solution.Solution_SETENWLE.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Solution.Solution_SETENWLE.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Solution.Solution_SETENWLE.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Solution.Solution_SETENWLE.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Solution.Solution_SETENWLE.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Solution.Solution_SETENWLE.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Solution.Solution_SETENWLE.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Solution.Solution_SETENWLE.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Solution.Solution_SETENWLE.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Solution.Solution_SETENWLE.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Solution.Solution_SETENWLE.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Solution.Solution_SETENWLE.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Solution.Solution_SETENWLE.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Solution.Solution_SETENWLE.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Solution.Solution_SETENWLE.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Solution.Solution_SETENWLE.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Solution.Solution_SETENWLE.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Solution.Solution_SETENWLE.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Solution.Solution_SETENWLE.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_SETENWLE.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Solution.Solution_SETENWLE.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="Solution_SWTENELE" id="T:Puzzle_Solution.Solution_SWTENELE" access="Public" sealed="true" baseType="Solution"><documentation><summary> Summary description for Solution_SWTENELE. </summary></documentation><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /><constructor name=".ctor" id="M:Puzzle_Solution.Solution_SWTENELE.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor </summary></documentation></constructor><field name="xboundary" id="F:Puzzle_Solution.Solution_SWTENELE.xboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="yboundary" id="F:Puzzle_Solution.Solution_SWTENELE.yboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="zboundary" id="F:Puzzle_Solution.Solution_SWTENELE.zboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="puzzle" id="F:Puzzle_Solution.Solution_SWTENELE.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Solution.Solution_SWTENELE.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Solution.Solution_SWTENELE.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Solution.Solution_SWTENELE.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Solution.Solution_SWTENELE.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Solution.Solution_SWTENELE.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Solution.Solution_SWTENELE.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Solution.Solution_SWTENELE.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Solution.Solution_SWTENELE.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Solution.Solution_SWTENELE.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Solution.Solution_SWTENELE.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Solution.Solution_SWTENELE.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="WordsFound" id="P:Puzzle_Solution.Solution_SWTENELE.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Solution.Solution_SWTENELE.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Solution.Solution_SWTENELE.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Finalize" id="M:Puzzle_Solution.Solution_SWTENELE.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Solution.Solution_SWTENELE.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_SWTENELE.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Solution.Solution_SWTENELE.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetPossibilities_SWTENELE" id="M:Puzzle_Solution.Solution_SWTENELE.GetPossibilities_SWTENELE(System.Char[0:,0:,0:])" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will get all of the specified puzzle substring possibilities in the direction of South West Top Edge to North East Lower Edge as well as the reverse direction along that line of movement. </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Solution.Solution_SWTENELE.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Solution.Solution_SWTENELE.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Solution.Solution_SWTENELE.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Solution.Solution_SWTENELE.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Solution.Solution_SWTENELE.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Solution.Solution_SWTENELE.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Solution.Solution_SWTENELE.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Solution.Solution_SWTENELE.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Solution.Solution_SWTENELE.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Solution.Solution_SWTENELE.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Solution.Solution_SWTENELE.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Solution.Solution_SWTENELE.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Solution.Solution_SWTENELE.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Solution.Solution_SWTENELE.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Solution.Solution_SWTENELE.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Solution.Solution_SWTENELE.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Solution.Solution_SWTENELE.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Solution.Solution_SWTENELE.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Solution.Solution_SWTENELE.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Solution.Solution_SWTENELE.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Solution.Solution_SWTENELE.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_SWTENELE.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Solution.Solution_SWTENELE.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="Solution_TOPBOTTOM" id="T:Puzzle_Solution.Solution_TOPBOTTOM" access="Public" sealed="true" baseType="Solution"><documentation><summary> Summary description for Solution_TOPBOTTOM. </summary></documentation><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /><constructor name=".ctor" id="M:Puzzle_Solution.Solution_TOPBOTTOM.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor </summary></documentation></constructor><field name="xboundary" id="F:Puzzle_Solution.Solution_TOPBOTTOM.xboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="yboundary" id="F:Puzzle_Solution.Solution_TOPBOTTOM.yboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="zboundary" id="F:Puzzle_Solution.Solution_TOPBOTTOM.zboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="puzzle" id="F:Puzzle_Solution.Solution_TOPBOTTOM.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Solution.Solution_TOPBOTTOM.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Solution.Solution_TOPBOTTOM.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Solution.Solution_TOPBOTTOM.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Solution.Solution_TOPBOTTOM.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Solution.Solution_TOPBOTTOM.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Solution.Solution_TOPBOTTOM.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Solution.Solution_TOPBOTTOM.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Solution.Solution_TOPBOTTOM.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Solution.Solution_TOPBOTTOM.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Solution.Solution_TOPBOTTOM.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Solution.Solution_TOPBOTTOM.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="WordsFound" id="P:Puzzle_Solution.Solution_TOPBOTTOM.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Solution.Solution_TOPBOTTOM.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Solution.Solution_TOPBOTTOM.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Finalize" id="M:Puzzle_Solution.Solution_TOPBOTTOM.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Solution.Solution_TOPBOTTOM.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_TOPBOTTOM.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Solution.Solution_TOPBOTTOM.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetPossibilities_TOPBOTTOM" id="M:Puzzle_Solution.Solution_TOPBOTTOM.GetPossibilities_TOPBOTTOM(System.Char[0:,0:,0:])" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will get all of the specified puzzle substring possibilities in the direction of Top Side to the Bottom Side as well as the reverse direction along that line of movement. </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Solution.Solution_TOPBOTTOM.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Solution.Solution_TOPBOTTOM.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Solution.Solution_TOPBOTTOM.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Solution.Solution_TOPBOTTOM.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Solution.Solution_TOPBOTTOM.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Solution.Solution_TOPBOTTOM.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Solution.Solution_TOPBOTTOM.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Solution.Solution_TOPBOTTOM.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Solution.Solution_TOPBOTTOM.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Solution.Solution_TOPBOTTOM.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Solution.Solution_TOPBOTTOM.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Solution.Solution_TOPBOTTOM.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Solution.Solution_TOPBOTTOM.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Solution.Solution_TOPBOTTOM.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Solution.Solution_TOPBOTTOM.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Solution.Solution_TOPBOTTOM.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Solution.Solution_TOPBOTTOM.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Solution.Solution_TOPBOTTOM.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Solution.Solution_TOPBOTTOM.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Solution.Solution_TOPBOTTOM.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Solution.Solution_TOPBOTTOM.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_TOPBOTTOM.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Solution.Solution_TOPBOTTOM.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="Solution_WVEEVE" id="T:Puzzle_Solution.Solution_WVEEVE" access="Public" sealed="true" baseType="Solution"><documentation><summary> Summary description for Solution_WVEEVE. </summary></documentation><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /><constructor name=".ctor" id="M:Puzzle_Solution.Solution_WVEEVE.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor </summary></documentation></constructor><field name="xboundary" id="F:Puzzle_Solution.Solution_WVEEVE.xboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="yboundary" id="F:Puzzle_Solution.Solution_WVEEVE.yboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="zboundary" id="F:Puzzle_Solution.Solution_WVEEVE.zboundary" access="Private" contract="Normal" type="System.Int32" valueType="true" /><field name="puzzle" id="F:Puzzle_Solution.Solution_WVEEVE.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:Puzzle_Solution.Solution_WVEEVE.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:Puzzle_Solution.Solution_WVEEVE.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:Puzzle_Solution.Solution_WVEEVE.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:Puzzle_Solution.Solution_WVEEVE.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:Puzzle_Solution.Solution_WVEEVE.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:Puzzle_Solution.Solution_WVEEVE.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:Puzzle_Solution.Solution_WVEEVE.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:Puzzle_Solution.Solution_WVEEVE.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:Puzzle_Solution.Solution_WVEEVE.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:Puzzle_Solution.Solution_WVEEVE.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:Puzzle_Solution.Solution_WVEEVE.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="WordsFound" id="P:Puzzle_Solution.Solution_WVEEVE.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:Puzzle_Solution.Solution_WVEEVE.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:Puzzle_Solution.Solution_WVEEVE.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Finalize" id="M:Puzzle_Solution.Solution_WVEEVE.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Puzzle_Solution.Solution_WVEEVE.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_WVEEVE.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Puzzle_Solution.Solution_WVEEVE.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetPossibilities_WVEEVE" id="M:Puzzle_Solution.Solution_WVEEVE.GetPossibilities_WVEEVE(System.Char[0:,0:,0:])" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method will get all of the specified puzzle substring possibilities in the direction of West Vertical Edge to East Vertical Edge as well as the reverse direction along that line of movement. </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /></method><method name="Restart" id="M:Puzzle_Solution.Solution_WVEEVE.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:Puzzle_Solution.Solution_WVEEVE.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:Puzzle_Solution.Solution_WVEEVE.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:Puzzle_Solution.Solution_WVEEVE.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:Puzzle_Solution.Solution_WVEEVE.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:Puzzle_Solution.Solution_WVEEVE.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:Puzzle_Solution.Solution_WVEEVE.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:Puzzle_Solution.Solution_WVEEVE.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:Puzzle_Solution.Solution_WVEEVE.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:Puzzle_Solution.Solution_WVEEVE.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:Puzzle_Solution.Solution_WVEEVE.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:Puzzle_Solution.Solution_WVEEVE.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:Puzzle_Solution.Solution_WVEEVE.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:Puzzle_Solution.Solution_WVEEVE.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:Puzzle_Solution.Solution_WVEEVE.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:Puzzle_Solution.Solution_WVEEVE.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:Puzzle_Solution.Solution_WVEEVE.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:Puzzle_Solution.Solution_WVEEVE.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:Puzzle_Solution.Solution_WVEEVE.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:Puzzle_Solution.Solution_WVEEVE.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Puzzle_Solution.Solution_WVEEVE.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:Puzzle_Solution.Solution_WVEEVE.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:Puzzle_Solution.Solution_WVEEVE.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class></namespace></module></assembly><assembly name="RedBlack" version="1.0.1948.40943"><attribute name="System.Reflection.AssemblyDescriptionAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyDescriptionAttribute" /></attribute><attribute name="System.Reflection.AssemblyTitleAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyTitleAttribute" /></attribute><attribute name="System.Diagnostics.DebuggableAttribute" target="assembly"><property name="IsJITTrackingEnabled" type="System.Boolean" value="True" /><property name="IsJITOptimizerDisabled" type="System.Boolean" value="True" /><property name="TypeId" type="System.Object" value="System.Diagnostics.DebuggableAttribute" /></attribute><attribute name="System.Reflection.AssemblyConfigurationAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyConfigurationAttribute" /></attribute><attribute name="System.Reflection.AssemblyDelaySignAttribute" target="assembly"><property name="DelaySign" type="System.Boolean" value="False" /><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyDelaySignAttribute" /></attribute><attribute name="System.Reflection.AssemblyProductAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyProductAttribute" /></attribute><attribute name="System.Reflection.AssemblyKeyNameAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyKeyNameAttribute" /></attribute><attribute name="System.Reflection.AssemblyKeyFileAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyKeyFileAttribute" /></attribute><attribute name="System.Reflection.AssemblyCompanyAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyCompanyAttribute" /></attribute><attribute name="System.Reflection.AssemblyTrademarkAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyTrademarkAttribute" /></attribute><attribute name="System.Reflection.AssemblyCopyrightAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyCopyrightAttribute" /></attribute><module name="RedBlack.dll"><namespace name="ns_RedBlack"><class name="RedBlack" id="T:ns_RedBlack.RedBlack" access="Public"><documentation><summary> This object encapsulates the characteristics and operations of a RedBlack Binary Search Tree node. First create a head node with one of the provided constructors, and then calling one of the insert methods to begin building your RedBlack Binary Search Tree. Please note that for the purposes of the code for this module, I must give complete credit to Introduction to Algorithms, Second Edition by Thomas H. Cormen, et al (Hardcover) for providing the much needed Pseudo Code for which code be built this RedBlack Binary Search Tree Data Structure. </summary></documentation><attribute name="System.SerializableAttribute" /><constructor name=".ctor" id="M:ns_RedBlack.RedBlack.#ctor" access="Public" contract="Normal"><documentation><summary> RedBlack default constructor </summary></documentation></constructor><field name="color" id="F:ns_RedBlack.RedBlack.color" access="Private" contract="Normal" type="System.String" valueType="false"><documentation><summary>Backer for property <see cref="P:ns_RedBlack.RedBlack.Color">Color</see></summary></documentation></field><field name="key" id="F:ns_RedBlack.RedBlack.key" access="Private" contract="Normal" type="System.Object" valueType="false"><documentation><summary>Backer for property <see cref="P:ns_RedBlack.RedBlack.Key">Key</see></summary></documentation></field><field name="left" id="F:ns_RedBlack.RedBlack.left" access="Private" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false"><documentation><summary>Backer for property <see cref="P:ns_RedBlack.RedBlack.Left">Left</see></summary></documentation></field><field name="right" id="F:ns_RedBlack.RedBlack.right" access="Private" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false"><documentation><summary>Backer for property <see cref="P:ns_RedBlack.RedBlack.Right">Right</see></summary></documentation></field><field name="parent" id="F:ns_RedBlack.RedBlack.parent" access="Private" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false"><documentation><summary>Backer for property <see cref="P:ns_RedBlack.RedBlack.Parent">Parent</see></summary></documentation></field><property name="Parent" id="P:ns_RedBlack.RedBlack.Parent" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" get="true" set="true"><documentation><summary> Property Parent (RedBlack) Read access and Write access </summary></documentation></property><property name="Right" id="P:ns_RedBlack.RedBlack.Right" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" get="true" set="true"><documentation><summary> Property Right (RedBlack) Read access and Write access </summary></documentation></property><property name="Left" id="P:ns_RedBlack.RedBlack.Left" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" get="true" set="true"><documentation><summary> Property Left (RedBlack) Read access and Write access </summary></documentation></property><property name="Color" id="P:ns_RedBlack.RedBlack.Color" access="Public" contract="Normal" type="System.String" valueType="false" get="true" set="true"><documentation><summary> Property Color (string) Read access and Write access </summary></documentation></property><property name="Key" id="P:ns_RedBlack.RedBlack.Key" access="Public" contract="Normal" type="System.Object" valueType="false" get="true" set="true"><documentation><summary> Property Key (object) Read and Write access </summary></documentation></property><method name="RB_EqualityOperator" id="M:ns_RedBlack.RedBlack.RB_EqualityOperator(System.Object,System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true"><documentation><summary> Equality Operator for RedBlack object key comparisons. Please note that support is only provided for the System.String or the char [] type comparisons, otherwise you must derive from this class, and overload this method for a "yourType" comparison. The types of both objects being compared must exactly match. </summary>
            <param name="leftArguement">The RedBlack node whose reference will be used for the right comparison.</param>
            <param name="rightArguement">The RedBlack node whose reference will be used for the left comparison.</param>
            <example> bool result = objectA == objectB; </example></documentation><parameter name="leftArguement" type="System.Object" valueType="false" /><parameter name="rightArguement" type="System.Object" valueType="false" /></method><method name="RB_LessThanOperator" id="M:ns_RedBlack.RedBlack.RB_LessThanOperator(System.Object,System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true"><documentation><summary> Less Than Operator for RedBlack object key comparisons. Please note that support is only provided for the System.String or the char [] type comparisons, otherwise you must derive from this class, and overload this method for a "yourType" comparison. The types of both objects being compared must exactly match. </summary>
            <param name="leftArguement">The RedBlack node whose reference will be used for the right comparison.</param>
            <param name="rightArguement">The RedBlack node whose reference will be used for the left comparison.</param>
            <example> bool result = objectA lessthan objectB </example></documentation><parameter name="leftArguement" type="System.Object" valueType="false" /><parameter name="rightArguement" type="System.Object" valueType="false" /></method><method name="Finalize" id="M:ns_RedBlack.RedBlack.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:ns_RedBlack.RedBlack.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:ns_RedBlack.RedBlack.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:ns_RedBlack.RedBlack.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="DeepCopy" id="M:ns_RedBlack.RedBlack.DeepCopy(ns_RedBlack.RedBlack,ns_RedBlack.RedBlack@)" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Provides a mean to execute a deep copy from one RedBlack Tree to Another. </summary>
            <param name="treeSource">The source RedBlack Binary Search Tree to copy from.</param>
            <param name="treeDestination">The destination RedBlack Binary Search Tree to send the copy to.</param>
            <returns>The root node reference to the deep copied tree.</returns></documentation><parameter name="treeSource" type="ns_RedBlack.RedBlack" valueType="false" /><parameter name="treeDestination" type="ns_RedBlack.RedBlack" valueType="false" direction="ref" /></method><method name="RB_Insert" id="M:ns_RedBlack.RedBlack.RB_Insert(ns_RedBlack.RedBlack@,System.Object)" access="Public" contract="Normal" returnType="ns_RedBlack.RedBlack" valueType="false"><documentation><summary> This two arguement operation accepts a System.object value and creates a new RedBlack node by first calling the default RedBlack() default constructor then inserting the resultant new node. Please note that RB_Insert() operation will return any duplicates attempted as a RedBlack node back to the caller. </summary>
            <param name="T">The root/head of the RedBlack Tree to insert char [] value.</param>
            <param name="valueToInsert">The object value to insert.</param>
            <returns>Returns the duplicate node compared to the node to be inserted, other wise inserts the node.</returns></documentation><parameter name="T" type="ns_RedBlack.RedBlack" valueType="false" direction="ref" /><parameter name="valueToInsert" type="System.Object" valueType="false" /></method><method name="GetRoot" id="M:ns_RedBlack.RedBlack.GetRoot(ns_RedBlack.RedBlack)" access="Private" contract="Normal" returnType="ns_RedBlack.RedBlack" valueType="false"><documentation><summary> The purpose of this method is to find the root node of any given RedBlack Binary Search Tree. </summary>
            <param name="T">An arbitrary RedBlack Tree to find the root.</param>
            <returns>This method returns the root of a given RedBlack Tree T.</returns></documentation><parameter name="T" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="GetActualSize" id="M:ns_RedBlack.RedBlack.GetActualSize(ns_RedBlack.RedBlack,System.Int32@)" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> The helper method will walk through a given tree, in order, and count the actual number of words in the tree. </summary>
            <param name="next">The root RedBlack node of the RedBlack Tree.</param>
            <param name="actualSize">The integer counter used to do the counting.</param></documentation><parameter name="next" type="ns_RedBlack.RedBlack" valueType="false" /><parameter name="actualSize" type="System.Int32" valueType="false" direction="ref" /></method><method name="Inorder_Tree_Walk" id="M:ns_RedBlack.RedBlack.Inorder_Tree_Walk(ns_RedBlack.RedBlack)" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This method will correctly and in order access each key in the binary search red-black tree, and in sorted order. </summary>
            <param name="x">Node to start accessing keys in the subtree of this node. </param></documentation><parameter name="x" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="Tree_Search" id="M:ns_RedBlack.RedBlack.Tree_Search(ns_RedBlack.RedBlack,System.Object)" access="Public" contract="Normal" returnType="ns_RedBlack.RedBlack" valueType="false"><documentation><summary> This method will correctly find the RedBlack node with key k in the tree whose reference is x. </summary> The RedBlack node <param name="x"> is the root node to search through. </param> The key <param name="k"> to search for in the tree on or under node x. </param>
            <returns> The RedBlack node in the tree on or under node x with key k. If not found, the Sentinel node is returned.</returns></documentation><parameter name="x" type="ns_RedBlack.RedBlack" valueType="false" /><parameter name="k" type="System.Object" valueType="false" /></method><method name="Iterative_Tree_Search" id="M:ns_RedBlack.RedBlack.Iterative_Tree_Search(ns_RedBlack.RedBlack,System.Object)" access="Public" contract="Normal" returnType="ns_RedBlack.RedBlack" valueType="false"><documentation><summary> This method will correctly find the RedBlack node with key k in the tree whose reference is x. This search will always be more efficient since this is not making recursive calls, except just moving memory references. </summary> The RedBlack node <param name="x"> is the root node to search through. </param> The key <param name="k"> to search for in the tree on or under node x. </param>
            <returns> The RedBlack node in the tree on or under node x with key k, but performs the search more efficiently by "unrolling" the recursion into a while loop. If not found, the Sentinel node is returned. If not found, the Sentinel node is returned.</returns></documentation><parameter name="x" type="ns_RedBlack.RedBlack" valueType="false" /><parameter name="k" type="System.Object" valueType="false" /></method><method name="Tree_Minimum" id="M:ns_RedBlack.RedBlack.Tree_Minimum(ns_RedBlack.RedBlack)" access="Public" contract="Normal" returnType="ns_RedBlack.RedBlack" valueType="false"><documentation><summary> This method finds the minimum node whose value is the smallest beneath a given root node x by following the left most node of that tree on and under the root node x. </summary> The RedBlack node <param name="x"> is the root node of the subtree.</param>
            <returns>The node whose key is the smallest value under node x.</returns></documentation><parameter name="x" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="Tree_Maximum" id="M:ns_RedBlack.RedBlack.Tree_Maximum(ns_RedBlack.RedBlack)" access="Public" contract="Normal" returnType="ns_RedBlack.RedBlack" valueType="false"><documentation><summary> This method returns the node with the maximum value on and under a given root RedBlack node x. The key with the maximum value is always found by following the right child references is that subtree. This exists as a characteristic property of a binary search tree. </summary> The RedBlack node <param name="x"> is the root node of the tree to find the maximum valued node. </param>
            <returns>The RedBlack node on or under x with the maximum key value.</returns></documentation><parameter name="x" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="Tree_Successor" id="M:ns_RedBlack.RedBlack.Tree_Successor(ns_RedBlack.RedBlack)" access="Public" contract="Normal" returnType="ns_RedBlack.RedBlack" valueType="false"><documentation><summary> This method finds the smallest key greater than the key of node x. </summary>
            <param name="x">Is any given RedBlack node of which ever root node.</param>
            <returns>This method returns the RedBlack node whose key is the smallest key greater than the key of node x.</returns></documentation><parameter name="x" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="Tree_Predecessor" id="M:ns_RedBlack.RedBlack.Tree_Predecessor(ns_RedBlack.RedBlack)" access="Public" contract="Normal" returnType="ns_RedBlack.RedBlack" valueType="false"><documentation><summary> This method finds the largest key smaller than the key of node x. </summary>
            <param name="x">Is any given RedBlack node of which ever root node.</param>
            <returns>This method returns the RedBlack node whose key is the largest key smaller than the key of node x.</returns></documentation><parameter name="x" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="Left_Rotate" id="M:ns_RedBlack.RedBlack.Left_Rotate(ns_RedBlack.RedBlack@,ns_RedBlack.RedBlack)" access="Private" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> After this method executes, the subnode x at or under the absolute root node T will rotate references with x's right child node. </summary>
            <param name="T">This is the absolute root node containing or is the RedBlack node x.</param>
            <param name="x">This is the RedBlack node that will be rotated left with x's right child node</param></documentation><parameter name="T" type="ns_RedBlack.RedBlack" valueType="false" direction="ref" /><parameter name="x" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="Right_Rotate" id="M:ns_RedBlack.RedBlack.Right_Rotate(ns_RedBlack.RedBlack@,ns_RedBlack.RedBlack)" access="Private" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> After this method executes, the subnode x at or under the absolute root node T will rotate references with x's left child node. </summary>
            <param name="T">This is the absolute root node containing or is the RedBlack node x.</param>
            <param name="x">This is the RedBlack node that will be rotated left with x's right child node</param></documentation><parameter name="T" type="ns_RedBlack.RedBlack" valueType="false" direction="ref" /><parameter name="x" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="Insert" id="M:ns_RedBlack.RedBlack.Insert(ns_RedBlack.RedBlack@,ns_RedBlack.RedBlack)" access="Private" contract="Normal" returnType="ns_RedBlack.RedBlack" valueType="false"><documentation><summary> This method accepts a reference to the root or head of the RedBlack Tree T and a reference to the RedBlack node to insert z, whose key fill must filled in with sortable data. Lastly this method calls RB_Insert_Fixup( T, z ) to maintain properly the five properties of the RedBlack Tree. </summary>
            <param name="T">A reference to the root or head of the RedBlack Tree T.</param>
            <param name="z">A reference to the RedBlack node we'll insert z.</param>
            <returns>Returns the node just inserted.</returns></documentation><parameter name="T" type="ns_RedBlack.RedBlack" valueType="false" direction="ref" /><parameter name="z" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="RB_Insert_Fixup" id="M:ns_RedBlack.RedBlack.RB_Insert_Fixup(ns_RedBlack.RedBlack@,ns_RedBlack.RedBlack)" access="Private" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This is primarily a helper method/operation meant to maintain the five properties of the RedBlack Binary Search Tree. </summary>
            <param name="T">Root or Head of the RedBlack tree we're working with.</param>
            <param name="z">RedBlack node being inserted.</param></documentation><parameter name="T" type="ns_RedBlack.RedBlack" valueType="false" direction="ref" /><parameter name="z" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="RB_Delete" id="M:ns_RedBlack.RedBlack.RB_Delete(ns_RedBlack.RedBlack@,System.Object)" access="Public" contract="Normal" returnType="ns_RedBlack.RedBlack" valueType="false"><documentation><summary> The method must be provided to properly delete a given RedBlack node from the RedBlack Tree that we're working with to properly maintain the five properties of the Red Black Binary Search Tree. </summary>
            <param name="T">Head or Root of the RedBlack Tree we're working with.</param>
            <param name="Value">The RedBlack node whose key is specified by this paramenter that we're going to delete.</param>
            <returns>The last RedBlack node worked with.</returns></documentation><parameter name="T" type="ns_RedBlack.RedBlack" valueType="false" direction="ref" /><parameter name="Value" type="System.Object" valueType="false" /></method><method name="RB_Delete_Fixup" id="M:ns_RedBlack.RedBlack.RB_Delete_Fixup(ns_RedBlack.RedBlack@,ns_RedBlack.RedBlack)" access="Private" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This helper method/operation is meant to provide support for maintaining the neccessary five RedBlack Tree properties after having called RB_Delete() </summary>
            <param name="T">Head or Root of the RedBlack Tree we're working with.</param>
            <param name="x">RedBlack node we're going to "fixup".</param></documentation><parameter name="T" type="ns_RedBlack.RedBlack" valueType="false" direction="ref" /><parameter name="x" type="ns_RedBlack.RedBlack" valueType="false" /></method><method name="GetType" id="M:ns_RedBlack.RedBlack.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:ns_RedBlack.RedBlack.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:ns_RedBlack.RedBlack.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:ns_RedBlack.RedBlack.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="Sentinel" id="T:ns_RedBlack.Sentinel" access="Public" abstract="true"><documentation><summary> The intent of this class is to provide a Sentinel node nil[T], for which is very much needed for the RedBlack Tree's inferstructional support. This the class is abstract, it cannot be instanciated, and with all the member's being static, they must be used through the class's name. </summary></documentation><constructor name=".ctor" id="M:ns_RedBlack.Sentinel.#ctor" access="Family" contract="Normal"><documentation><summary>Initializes a new instance of the <see cref="T:ns_RedBlack.Sentinel" /> class.</summary></documentation></constructor><field name="node" id="F:ns_RedBlack.Sentinel.node" access="Private" contract="Static" type="ns_RedBlack.RedBlack" valueType="false"><documentation><summary>Backer for property <see cref="P:ns_RedBlack.Sentinel.Node">Node</see></summary></documentation></field><property name="Node" id="P:ns_RedBlack.Sentinel.Node" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" get="true" set="false"><documentation><summary> Property Node (RedBlack) Read access only. </summary></documentation></property><method name="Finalize" id="M:ns_RedBlack.Sentinel.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:ns_RedBlack.Sentinel.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:ns_RedBlack.Sentinel.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:ns_RedBlack.Sentinel.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Create" id="M:ns_RedBlack.Sentinel.Create" access="Public" contract="Static" returnType="System.Void" valueType="true"><documentation><summary> Set up the Sentinel Node. </summary></documentation></method><method name="GetType" id="M:ns_RedBlack.Sentinel.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:ns_RedBlack.Sentinel.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:ns_RedBlack.Sentinel.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:ns_RedBlack.Sentinel.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="RedBlack_TestClass" id="T:ns_RedBlack.RedBlack_TestClass" access="Public"><documentation><summary> Test Class for the RedBlack Binary Search Tree </summary></documentation><attribute name="NUnit.Framework.TestFixtureAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestFixtureAttribute" /></attribute><constructor name=".ctor" id="M:ns_RedBlack.RedBlack_TestClass.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor </summary></documentation></constructor><field name="root" id="F:ns_RedBlack.RedBlack_TestClass.root" access="Private" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" /><field name="val" id="F:ns_RedBlack.RedBlack_TestClass.val" access="Private" contract="Normal" type="System.String" valueType="false" /><field name="myString" id="F:ns_RedBlack.RedBlack_TestClass.myString" access="Private" contract="Normal" type="System.String" valueType="false" /><field name="chars" id="F:ns_RedBlack.RedBlack_TestClass.chars" access="Private" contract="Normal" type="System.Char[]" valueType="false" /><field name="counter" id="F:ns_RedBlack.RedBlack_TestClass.counter" access="Private" contract="Normal" type="System.Int32" valueType="true" /><method name="Finalize" id="M:ns_RedBlack.RedBlack_TestClass.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:ns_RedBlack.RedBlack_TestClass.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:ns_RedBlack.RedBlack_TestClass.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:ns_RedBlack.RedBlack_TestClass.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="SetUpTests" id="M:ns_RedBlack.RedBlack_TestClass.SetUpTests" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> SetUp </summary></documentation><attribute name="NUnit.Framework.SetUpAttribute"><property name="TypeId" type="System.Object" value="NUnit.Framework.SetUpAttribute" /></attribute></method><method name="Test1" id="M:ns_RedBlack.RedBlack_TestClass.Test1" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Test 1 </summary></documentation><attribute name="NUnit.Framework.TestAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestAttribute" /></attribute></method><method name="Test2" id="M:ns_RedBlack.RedBlack_TestClass.Test2" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Test 2 </summary></documentation><attribute name="NUnit.Framework.TestAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestAttribute" /></attribute></method><method name="Test3" id="M:ns_RedBlack.RedBlack_TestClass.Test3" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Test 3 </summary></documentation><attribute name="NUnit.Framework.TestAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestAttribute" /></attribute></method><method name="Test4" id="M:ns_RedBlack.RedBlack_TestClass.Test4" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Test 4 </summary></documentation><attribute name="NUnit.Framework.TestAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestAttribute" /></attribute></method><method name="Test5" id="M:ns_RedBlack.RedBlack_TestClass.Test5" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Test 5 </summary></documentation><attribute name="NUnit.Framework.TestAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestAttribute" /></attribute></method><method name="Test6" id="M:ns_RedBlack.RedBlack_TestClass.Test6" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Test 6 </summary></documentation><attribute name="NUnit.Framework.TestAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestAttribute" /></attribute></method><method name="Test7" id="M:ns_RedBlack.RedBlack_TestClass.Test7" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Test 7 </summary></documentation><attribute name="NUnit.Framework.TestAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestAttribute" /></attribute></method><method name="Test8" id="M:ns_RedBlack.RedBlack_TestClass.Test8" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Test 8 </summary></documentation><attribute name="NUnit.Framework.TestAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestAttribute" /></attribute></method><method name="Test9" id="M:ns_RedBlack.RedBlack_TestClass.Test9" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Test 9 </summary></documentation><attribute name="NUnit.Framework.TestAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestAttribute" /></attribute></method><method name="Test10" id="M:ns_RedBlack.RedBlack_TestClass.Test10" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Test 10 </summary></documentation><attribute name="NUnit.Framework.TestAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestAttribute" /></attribute></method><method name="Test11" id="M:ns_RedBlack.RedBlack_TestClass.Test11" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Test 11 </summary></documentation><attribute name="NUnit.Framework.TestAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestAttribute" /></attribute></method><method name="Test12" id="M:ns_RedBlack.RedBlack_TestClass.Test12" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Test 12 </summary></documentation><attribute name="NUnit.Framework.TestAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestAttribute" /></attribute></method><method name="Test13" id="M:ns_RedBlack.RedBlack_TestClass.Test13" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This test will perform 100000 nodal element RB_Insert() operations and then attempt to call RB_Delete() on all 100000 elements leaving only the Sentinel.Node left in the test root RedBlack Tree and the same thing done on a second RedBlack Binary Search Tree. </summary></documentation></method><method name="Main" id="M:ns_RedBlack.RedBlack_TestClass.Main(System.String[])" access="Public" contract="Static" returnType="System.Void" valueType="true"><documentation><summary> Main program entry point </summary>
            <param name="args">string arguements</param></documentation><parameter name="args" type="System.String[]" valueType="false" /></method><method name="GetType" id="M:ns_RedBlack.RedBlack_TestClass.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:ns_RedBlack.RedBlack_TestClass.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:ns_RedBlack.RedBlack_TestClass.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:ns_RedBlack.RedBlack_TestClass.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class></namespace></module></assembly><assembly name="DictionaryCreator" version="1.0.1948.40944"><attribute name="System.Reflection.AssemblyDelaySignAttribute" target="assembly"><property name="DelaySign" type="System.Boolean" value="False" /><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyDelaySignAttribute" /></attribute><attribute name="System.Reflection.AssemblyTrademarkAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyTrademarkAttribute" /></attribute><attribute name="System.Diagnostics.DebuggableAttribute" target="assembly"><property name="IsJITTrackingEnabled" type="System.Boolean" value="True" /><property name="IsJITOptimizerDisabled" type="System.Boolean" value="True" /><property name="TypeId" type="System.Object" value="System.Diagnostics.DebuggableAttribute" /></attribute><attribute name="System.Reflection.AssemblyKeyNameAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyKeyNameAttribute" /></attribute><attribute name="System.Reflection.AssemblyKeyFileAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyKeyFileAttribute" /></attribute><attribute name="System.Reflection.AssemblyCompanyAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyCompanyAttribute" /></attribute><attribute name="System.Reflection.AssemblyTitleAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyTitleAttribute" /></attribute><attribute name="System.Reflection.AssemblyProductAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyProductAttribute" /></attribute><attribute name="System.Reflection.AssemblyCopyrightAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyCopyrightAttribute" /></attribute><attribute name="System.Reflection.AssemblyConfigurationAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyConfigurationAttribute" /></attribute><attribute name="System.Reflection.AssemblyDescriptionAttribute" target="assembly"><property name="TypeId" type="System.Object" value="System.Reflection.AssemblyDescriptionAttribute" /></attribute><module name="DictionaryCreator.dll"><namespace name="ns_DictionaryCreator"><class name="DictionaryCreator" id="T:ns_DictionaryCreator.DictionaryCreator" access="Public" baseType="Solution"><documentation><summary> Summary description for DictionaryCreator. </summary></documentation><base name="Solution" id="T:Puzzle_Solution.Solution" type="Puzzle_Solution.Solution" /><constructor name=".ctor" id="M:ns_DictionaryCreator.DictionaryCreator.#ctor" access="Public" contract="Normal"><documentation><summary>Initializes a new instance of the <see cref="T:ns_DictionaryCreator.DictionaryCreator" /> class.</summary></documentation></constructor><field name="nextWord" id="F:ns_DictionaryCreator.DictionaryCreator.nextWord" access="Private" contract="Normal" type="System.String" valueType="false"><documentation><summary> The next word retrieved from the dictionary. </summary></documentation></field><field name="file" id="F:ns_DictionaryCreator.DictionaryCreator.file" access="Private" contract="Static" type="System.String[]" valueType="false"><documentation><summary> Array that has the appropriate web path referencs for the input files. </summary></documentation></field><field name="maximumWordLength" id="F:ns_DictionaryCreator.DictionaryCreator.maximumWordLength" access="Private" contract="Static" type="System.Int32" valueType="true"><documentation><summary> Maximum word length indicator for any given entry into the dictionary. </summary></documentation></field><field name="dictionarySize" id="F:ns_DictionaryCreator.DictionaryCreator.dictionarySize" access="Private" contract="Static" type="System.Int32" valueType="true"><documentation><summary> Dictionary list size indicator. </summary></documentation></field><field name="reader" id="F:ns_DictionaryCreator.DictionaryCreator.reader" access="Private" contract="Static" type="System.IO.StreamReader" valueType="false"><documentation><summary> Stream used to read the Dictionary into Solution.Dictionary RedBlack Binary Search Tree. </summary></documentation></field><field name="tempTree" id="F:ns_DictionaryCreator.DictionaryCreator.tempTree" access="Private" contract="Static" type="ns_RedBlack.RedBlack" valueType="false"><documentation><summary> Publicly available deep copy of the Solution.Dictionary after CreatDictionary is called. </summary></documentation></field><field name="usedWords" id="F:ns_DictionaryCreator.DictionaryCreator.usedWords" access="Private" contract="Static" type="System.Collections.SortedList" valueType="false"><documentation><summary> This SortedList is used to track what words were already selected in the NextWord() operation. </summary></documentation></field><field name="puzzle" id="F:ns_DictionaryCreator.DictionaryCreator.puzzle" access="Public" contract="Static" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> The puzzle itself (The data structure that perpetually represents the puzzle in memory as its data structure). </summary></documentation></field><field name="dictionary" id="F:ns_DictionaryCreator.DictionaryCreator.dictionary" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the dictionary that will contain the list of words to look for. </summary></documentation></field><field name="wordsFound" id="F:ns_DictionaryCreator.DictionaryCreator.wordsFound" access="Public" contract="Static" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents the complete list of words in the dictionary that were found in the puzzle. </summary></documentation></field><field name="numWordsFound" id="F:ns_DictionaryCreator.DictionaryCreator.numWordsFound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Words found conuter. </summary></documentation></field><field name="xbound" id="F:ns_DictionaryCreator.DictionaryCreator.xbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="ybound" id="F:ns_DictionaryCreator.DictionaryCreator.ybound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="zbound" id="F:ns_DictionaryCreator.DictionaryCreator.zbound" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This boundary variable defines one of the limits of the puzzle. </summary></documentation></field><field name="x" id="F:ns_DictionaryCreator.DictionaryCreator.x" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="y" id="F:ns_DictionaryCreator.DictionaryCreator.y" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="z" id="F:ns_DictionaryCreator.DictionaryCreator.z" access="Family" contract="Static" type="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Puzzle construction naviagtor variables </summary></documentation></field><field name="possibilities" id="F:ns_DictionaryCreator.DictionaryCreator.possibilities" access="Family" contract="Static" type="ns_RedBlack.RedBlack[]" valueType="false" declaringType="Puzzle_Solution.Solution"><documentation><summary> This RedBlack Tree represents all the puzzle substring possibilities. </summary></documentation></field><field name="isMultiThreaded" id="F:ns_DictionaryCreator.DictionaryCreator.isMultiThreaded" access="Public" contract="Static" type="System.Boolean" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Bit flag to run the solution as single or multi-threaded. </summary></documentation></field><property name="TempTree" id="P:ns_DictionaryCreator.DictionaryCreator.TempTree" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" get="true" set="false"><documentation><summary> Property TempTree (RedBlack) Read Access Only </summary></documentation></property><property name="UsedWords" id="P:ns_DictionaryCreator.DictionaryCreator.UsedWords" access="Public" contract="Normal" type="System.Collections.SortedList" valueType="false" get="true" set="false"><documentation><summary> Property UsedWords (SortedList) </summary></documentation></property><property name="DictionarySize" id="P:ns_DictionaryCreator.DictionaryCreator.DictionarySize" access="Public" contract="Normal" type="System.Int32" valueType="true" get="true" set="false"><documentation><summary> Property DictionarySize (int) read access for the dictionary size; </summary></documentation></property><property name="WordsFound" id="P:ns_DictionaryCreator.DictionaryCreator.WordsFound" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property WordsFound (RedBlack) Read access for wordsFound. </summary></documentation></property><property name="Dictionary" id="P:ns_DictionaryCreator.DictionaryCreator.Dictionary" access="Public" contract="Normal" type="ns_RedBlack.RedBlack" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Dictionary (RedBlack) Read access for dictionary. </summary></documentation></property><property name="Puzzle" id="P:ns_DictionaryCreator.DictionaryCreator.Puzzle" access="Public" contract="Normal" type="System.Char[,,]" valueType="false" declaringType="Puzzle_Solution.Solution" get="true" set="false"><documentation><summary> Property Puzzle (char[,,]) Read access for puzzle. </summary></documentation></property><method name="Finalize" id="M:ns_DictionaryCreator.DictionaryCreator.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:ns_DictionaryCreator.DictionaryCreator.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:ns_DictionaryCreator.DictionaryCreator.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:ns_DictionaryCreator.DictionaryCreator.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetDictionaryFile" id="M:ns_DictionaryCreator.DictionaryCreator.GetDictionaryFile(System.Int32)" access="Private" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> This single argument helper operation retrieves the base dictionary input file and fills and sets the maximum word length. </summary>
            <param name="dictionaryNum">Specifies which dictionary to use.</param></documentation><parameter name="dictionaryNum" type="System.Int32" valueType="true" /></method><method name="IsAphabetic" id="M:ns_DictionaryCreator.DictionaryCreator.IsAphabetic(System.String)" access="Private" contract="Normal" returnType="System.Boolean" valueType="true"><documentation><summary> The helper method determines, by the specified parameter word, wheather or not all the characters of this string instance are alphabetic. </summary>
            <param name="word">System.string to check.</param>
            <returns>True if all of word's characters are alphabetic, and false if any single character is not.</returns></documentation><parameter name="word" type="System.String" valueType="false" /></method><method name="CreateDictionary" id="M:ns_DictionaryCreator.DictionaryCreator.CreateDictionary(System.Int32,System.Int32,System.Int32)" access="Public" contract="Normal" returnType="ns_RedBlack.RedBlack" valueType="false"><documentation><summary> Responsible for actually creating the RedBlack Tree dictionary when called from the single arguement DictionaryCreator constructor. </summary>
            <param name="baseDictionary">Base dictoinary selector parameter.</param>
            <param name="size">Dictionary size indication parameter.</param>
            <param name="minimumWordLength">Specifies the minimum length of a word.</param>
            <returns>The completed RedBlack Tree dictionary.</returns></documentation><parameter name="baseDictionary" type="System.Int32" valueType="true" /><parameter name="size" type="System.Int32" valueType="true" /><parameter name="minimumWordLength" type="System.Int32" valueType="true" /></method><method name="RandomizeDictionary" id="M:ns_DictionaryCreator.DictionaryCreator.RandomizeDictionary(ns_RedBlack.RedBlack,System.Int32@)" access="Private" contract="Normal" returnType="ns_RedBlack.RedBlack" valueType="false"><documentation><summary> This helper method will randomize the dictionary created in the last method call, and decrease it's size to that specified by dictionarySize from the last method call. </summary>
            <param name="dictionary">The dictionary to randomize.</param>
            <param name="size">The size of the dictionary specified by the user.</param>
            <returns>The user specified RedBlack Tree dictionary.</returns></documentation><parameter name="dictionary" type="ns_RedBlack.RedBlack" valueType="false" /><parameter name="size" type="System.Int32" valueType="false" direction="ref" /></method><method name="NextWord" id="M:ns_DictionaryCreator.DictionaryCreator.NextWord(ns_RedBlack.RedBlack,System.Char)" access="Public" contract="Normal" returnType="ns_RedBlack.RedBlack" valueType="false"><documentation><summary> This helper operation will search for a word in the base dictionary whose first letter will match the randomly generated charater in the previous method call. If nothing is found, then the Sentinel Node is returned. </summary>
            <param name="word">Base dictionary to look through.</param>
            <param name="firstChar">Randomly selected first character to look for.</param>
            <returns>The RedBlack node word whose key has a first character that matches the randomly generated character as an in/out passed by reference parameter.</returns></documentation><parameter name="word" type="ns_RedBlack.RedBlack" valueType="false" /><parameter name="firstChar" type="System.Char" valueType="true" /></method><method name="Restart" id="M:ns_DictionaryCreator.DictionaryCreator.Restart" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This method will restart The Puzzler - 3D Style web application This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="SelectLayer" id="M:ns_DictionaryCreator.DictionaryCreator.SelectLayer" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will select a different crossectional view of the puzzle This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="GoToExitPage" id="M:ns_DictionaryCreator.DictionaryCreator.GoToExitPage" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> The use case Exit was activated by the use clicking on the EXIT Button. This is not implemented in the Solution Class. This is implemented in the ASP.NET code behind layer. </summary></documentation></method><method name="Solve" id="M:ns_DictionaryCreator.DictionaryCreator.Solve" access="Public" contract="Normal" returnType="System.Int32" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will Solve the randomly generated puzzle with a separate solution algorithm. </summary></documentation></method><method name="GetPuzzleSubStrings" id="M:ns_DictionaryCreator.DictionaryCreator.GetPuzzleSubStrings(System.Char[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This helper method will retrieve all of the substring possibilities at a specified starting point and an increment or decrement in the specified direction of the horizontal, vertical, or diagonal 26 possible directions in the puzzle. </summary></documentation><parameter name="puzzle" type="System.Char[,,]" valueType="false" /><parameter name="initX" type="System.Int32" valueType="true" /><parameter name="initY" type="System.Int32" valueType="true" /><parameter name="initZ" type="System.Int32" valueType="true" /><parameter name="endX" type="System.Int32" valueType="true" /><parameter name="endY" type="System.Int32" valueType="true" /><parameter name="endZ" type="System.Int32" valueType="true" /><parameter name="incX" type="System.Int32" valueType="true" /><parameter name="incY" type="System.Int32" valueType="true" /><parameter name="incZ" type="System.Int32" valueType="true" /><parameter name="direction" type="System.Int32" valueType="true" /></method><method name="OutputPuzzle" id="M:ns_DictionaryCreator.DictionaryCreator.OutputPuzzle" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> This operation will output the puzzle in Row-Major order, in a vertical crossection by crossection manner. </summary></documentation></method><method name="Thread1" id="M:ns_DictionaryCreator.DictionaryCreator.Thread1" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 1 </summary></documentation></method><method name="Thread2" id="M:ns_DictionaryCreator.DictionaryCreator.Thread2" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 2 </summary></documentation></method><method name="Thread3" id="M:ns_DictionaryCreator.DictionaryCreator.Thread3" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 3 </summary></documentation></method><method name="Thread4" id="M:ns_DictionaryCreator.DictionaryCreator.Thread4" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 4 </summary></documentation></method><method name="Thread5" id="M:ns_DictionaryCreator.DictionaryCreator.Thread5" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 5 </summary></documentation></method><method name="Thread6" id="M:ns_DictionaryCreator.DictionaryCreator.Thread6" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 6 </summary></documentation></method><method name="Thread7" id="M:ns_DictionaryCreator.DictionaryCreator.Thread7" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 7 </summary></documentation></method><method name="Thread8" id="M:ns_DictionaryCreator.DictionaryCreator.Thread8" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 8 </summary></documentation></method><method name="Thread9" id="M:ns_DictionaryCreator.DictionaryCreator.Thread9" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 9 </summary></documentation></method><method name="Thread10" id="M:ns_DictionaryCreator.DictionaryCreator.Thread10" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 10 </summary></documentation></method><method name="Thread11" id="M:ns_DictionaryCreator.DictionaryCreator.Thread11" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 11 </summary></documentation></method><method name="Thread12" id="M:ns_DictionaryCreator.DictionaryCreator.Thread12" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 12 </summary></documentation></method><method name="Thread13" id="M:ns_DictionaryCreator.DictionaryCreator.Thread13" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Puzzle_Solution.Solution"><documentation><summary> Thread that starts solving direction 13 </summary></documentation></method><method name="GetType" id="M:ns_DictionaryCreator.DictionaryCreator.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:ns_DictionaryCreator.DictionaryCreator.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:ns_DictionaryCreator.DictionaryCreator.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:ns_DictionaryCreator.DictionaryCreator.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class><class name="DictionaryCreator_TestClass" id="T:ns_DictionaryCreator.DictionaryCreator_TestClass" access="Public"><documentation><summary> Test Class Harness for DictionaryCreator </summary></documentation><attribute name="NUnit.Framework.TestFixtureAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestFixtureAttribute" /></attribute><constructor name=".ctor" id="M:ns_DictionaryCreator.DictionaryCreator_TestClass.#ctor" access="Public" contract="Normal"><documentation><summary> Default Constructor </summary></documentation></constructor><field name="dictionaryCreators" id="F:ns_DictionaryCreator.DictionaryCreator_TestClass.dictionaryCreators" access="Private" contract="Static" type="ns_DictionaryCreator.DictionaryCreator[]" valueType="false" /><method name="Finalize" id="M:ns_DictionaryCreator.DictionaryCreator_TestClass.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:ns_DictionaryCreator.DictionaryCreator_TestClass.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:ns_DictionaryCreator.DictionaryCreator_TestClass.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:ns_DictionaryCreator.DictionaryCreator_TestClass.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="OutPutDictionary" id="M:ns_DictionaryCreator.DictionaryCreator_TestClass.OutPutDictionary(ns_DictionaryCreator.DictionaryCreator)" access="Public" contract="Static" returnType="System.Void" valueType="true"><documentation><summary> OutPutDictionary() will write the entire contents of a given DictionaryCreator object as specified by the dictionary_ parameter. Special Note: Beware! This method will take serveral minutes and consume much system resources to print an ENTIRE dictionary to a file because the actual base dictionary are extremely large! </summary>
            <param name="creator">The parameter specifies which DictionaryCreator object to write out to the file "output.txt"</param></documentation><parameter name="creator" type="ns_DictionaryCreator.DictionaryCreator" valueType="false" /></method><method name="Test1" id="M:ns_DictionaryCreator.DictionaryCreator_TestClass.Test1" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Test1 method. </summary></documentation><attribute name="NUnit.Framework.TestAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestAttribute" /></attribute></method><method name="Test2" id="M:ns_DictionaryCreator.DictionaryCreator_TestClass.Test2" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Test2 method. </summary></documentation><attribute name="NUnit.Framework.TestAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestAttribute" /></attribute></method><method name="Test3" id="M:ns_DictionaryCreator.DictionaryCreator_TestClass.Test3" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Test3 method. </summary></documentation><attribute name="NUnit.Framework.TestAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestAttribute" /></attribute></method><method name="Test4" id="M:ns_DictionaryCreator.DictionaryCreator_TestClass.Test4" access="Public" contract="Normal" returnType="System.Void" valueType="true"><documentation><summary> Test4 method. </summary></documentation><attribute name="NUnit.Framework.TestAttribute"><property name="Description" type="System.String" value="null" /><property name="TypeId" type="System.Object" value="NUnit.Framework.TestAttribute" /></attribute></method><method name="Main" id="M:ns_DictionaryCreator.DictionaryCreator_TestClass.Main(System.String[])" access="Public" contract="Static" returnType="System.Void" valueType="true"><documentation><summary> Test class entry point, the point of these tests will be to estimate about how long it will take to put all four base dictionary into variously separate RedBlack Trees for later manipulation. </summary>
            <param name="args">test class arguments</param></documentation><parameter name="args" type="System.String[]" valueType="false" /></method><method name="GetType" id="M:ns_DictionaryCreator.DictionaryCreator_TestClass.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:ns_DictionaryCreator.DictionaryCreator_TestClass.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Equals" id="M:ns_DictionaryCreator.DictionaryCreator_TestClass.Equals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method><method name="ReferenceEquals" id="M:ns_DictionaryCreator.DictionaryCreator_TestClass.ReferenceEquals(System.Object,System.Object)" access="Public" contract="Static" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary></documentation><parameter name="objA" type="System.Object" valueType="false" /><parameter name="objB" type="System.Object" valueType="false" /></method></class></namespace></module></assembly></ndoc>