<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Solution</name>
    </assembly>
    <members>
        <member name="T:Puzzle_Solution.Solution">
            <summary>
            Summary description for Solution.
            </summary>
        </member>
        <member name="F:Puzzle_Solution.Solution.puzzle">
            <summary>
            The puzzle itself.
            </summary>
        </member>
        <member name="F:Puzzle_Solution.Solution.x">
            <summary>
            The puzzle navigator variables for the puzzle and a
            words found conuter for the solution.
            </summary>
        </member>
        <member name="F:Puzzle_Solution.Solution.y">
            <summary>
            The puzzle navigator variables for the puzzle and a
            words found conuter for the solution.
            </summary>
        </member>
        <member name="F:Puzzle_Solution.Solution.z">
            <summary>
            The puzzle navigator variables for the puzzle and a
            words found conuter for the solution.
            </summary>
        </member>
        <member name="F:Puzzle_Solution.Solution.numWordsFound">
            <summary>
            The puzzle navigator variables for the puzzle and a
            words found conuter for the solution.
            </summary>
        </member>
        <member name="F:Puzzle_Solution.Solution.xbound">
            <summary>
            This boundary variable defines one of the
            limits of the puzzle.
            </summary>
        </member>
        <member name="F:Puzzle_Solution.Solution.ybound">
            <summary>
            This boundary variable defines one of the
            limits of the puzzle.
            </summary>
        </member>
        <member name="F:Puzzle_Solution.Solution.zbound">
            <summary>
            This boundary variable defines one of the
            limits of the puzzle.
            </summary>
        </member>
        <member name="F:Puzzle_Solution.Solution.wordsFound">
            <summary>
            This RedBlack Tree represents the complete list
            of words in the dictionary that were found in the
            puzzle.
            </summary>
        </member>
        <member name="F:Puzzle_Solution.Solution.possibilities">
            <summary>
            This RedBlack Tree represents all the puzzle
            substring possibilities.
            </summary>
        </member>
        <member name="F:Puzzle_Solution.Solution.dictionary">
            <summary>
            This RedBlack Tree represents the dictionary that
            will contain the list of words to look for.
            </summary>
        </member>
        <member name="M:Puzzle_Solution.Solution.#ctor">
            <summary>
            Default Solution Constuctor
            </summary>
        </member>
        <member name="M:Puzzle_Solution.Solution.Restart">
            <summary>
            This method will restart The Puzzler - 3D Style web application
            This is not implemented in the Solution Class. This is implemented in the
            ASP.NET code behind layer.
            </summary>
        </member>
        <member name="M:Puzzle_Solution.Solution.SelectLayer">
            <summary>
            This operation will select a different crossectional view of the puzzle
            This is not implemented in the Solution Class. This is implemented in the
            ASP.NET code behind layer.
            </summary>
        </member>
        <member name="M:Puzzle_Solution.Solution.GoToExitPage">
            <summary>
            The use case Exit was activated by the use clicking on the EXIT Button.
            This is not implemented in the Solution Class. This is implemented in the
            ASP.NET code behind layer.
            </summary>
        </member>
        <member name="M:Puzzle_Solution.Solution.Solve">
            <summary>
            This operation will Solve the randomly generated puzzle with a separate solution
            algorithm.
            </summary>
            <returns>The total number of words found in the puzzle that matched the
            dictionary.</returns>
        </member>
        <member name="M:Puzzle_Solution.Solution.GetMatchedWords(ns_RedBlack.RedBlack)">
            <summary>
            This helper method will retrieve each dictionary word (those found in the
            randomly generated dictonary), in desending order, one at a time, and check
            each one of them against every entry in the possibilities RedBlack Binary
            Search Tree which represents every word in the puzzle with three or more
            characters. Each matched word is then added to a separate RedBlack Tree called
            wordsFound.
            </summary>
            <param name="next">The root RedBlack node of the possibilities tree.</param>
        </member>
        <member name="M:Puzzle_Solution.Solution.GetPuzzleSubStrings(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This helper method will retrieve all of the substring possibilities at
            a specified starting point and an increment or decrement in the specified direction
            of the horizontal, vertical, or diagonal 26 possible directions in the puzzle.
            </summary>
            <param name="initX">Specifies the starting point for X as 0 or the X boudary value.</param>
            <param name="initY">Specifies the starting point for Y as 0 or the Y boudary value.</param>
            <param name="initZ">Specifies the starting point for Z as 0 or the Z boudary value.</param>
            <param name="endX">Specifies the ending point for X as -1 for "greater than" -1 or
            the X boundary value for "less than" the X boundary value.</param>
            <param name="endY">Specifies the ending point for Y as -1 for "greater than" -1 or
            the Y boundary value for "less than" the Y boundary value.</param>
            <param name="endZ">Specifies the ending point for Z as -1 for "greater than" -1 or
            the Z boundary value for "less than" the Z boundary value.</param>
            <param name="incX">Specifies how X increments or decrements as 1, 0, or -1 added to X.</param>
            <param name="incY">Specifies how Y increments or decrements as 1, 0, or -1 added to Y.</param>
            <param name="incZ">Specifies how Z increments or decrements as 1, 0, or -1 added to Z.</param>
        </member>
        <member name="M:Puzzle_Solution.Solution.Reverse(System.Char[])">
            <summary>
            This helper method will reverse a C# char[].
            </summary>
            <param name="str">This parameter is the char[] string to reverse.</param>
            <returns>The reversed char[] str string.</returns>
        </member>
        <member name="M:Puzzle_Solution.Solution.OutputPuzzle">
            <summary>
            This operation will output the puzzle in Row-Major order, in a vertical crossection
            by crossection manner.
            </summary>
        </member>
        <member name="P:Puzzle_Solution.Solution.WordsFound">
            <summary>
            Property WordsFound (RedBlack)
            Read access for wordsFound.
            </summary>
        </member>
        <member name="P:Puzzle_Solution.Solution.Dictionary">
            <summary>
            Property Dictionary (RedBlack)
            Read access for dictionary.
            </summary>
        </member>
        <member name="P:Puzzle_Solution.Solution.Puzzle">
            <summary>
            Property Puzzle (char[,,])
            Read access for puzzle.
            </summary>
        </member>
        <member name="T:Puzzle_Solution.Solution_TestClass">
            <summary>
            Test class for the Solution implementation base class
            </summary>
        </member>
        <member name="M:Puzzle_Solution.Solution_TestClass.SetUp">
            <summary>
            SetUp method for Solution_TestClass
            </summary>
        </member>
        <member name="M:Puzzle_Solution.Solution_TestClass.Test1">
            <summary>
            Test1 counts the size of the dictionary and the wordsFound
            RedBlack Binary Search Trees and compares their totals, if
            the size of the wordsFound list is larger than the dictionary,
            then the test fails.
            </summary>
        </member>
        <member name="M:Puzzle_Solution.Solution_TestClass.Test2">
            <summary>
            Test2 prints the contents of the dictionary and the wordsFound to
            the Trace.Writeline() operation so that the contents of each list
            maybe visually inspected. This may also be printed to a file by un-
            commenting the TraceListener.
            </summary>
        </member>
        <member name="M:Puzzle_Solution.Solution_TestClass.Main(System.String[])">
            <summary>
            Solution_TestClass entry point
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Puzzle_Solution.Solution_CCTELW">
            <summary>
            Summary description for Solution_CCTELW.
            </summary>
        </member>
        <member name="M:Puzzle_Solution.Solution_CCTELW.GetPossibilities_CCTELW(System.Char[0:,0:,0:])">
            <summary>
            This helper method will get all of the specified puzzle substring
            possibilities in the direction of Corner to Corner Top East to Lower
            West as well as the reverse direction along that line of movement.
            </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param>
        </member>
        <member name="T:Puzzle_Solution.Solution_CCTNLS">
            <summary>
            Summary description for Solution_CCTNLS.
            </summary>
        </member>
        <member name="M:Puzzle_Solution.Solution_CCTNLS.GetPossibilities_CCTNLS(System.Char[0:,0:,0:])">
            <summary>
            This helper method will get all of the specified puzzle substring
            possibilities in the direction of Corner to Corner Top North to Lower
            South as well as the reverse direction along that line of movement.
            </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param>
        </member>
        <member name="T:Puzzle_Solution.Solution_CCTSLN">
            <summary>
            Summary description for Solution_CCTSLN.
            </summary>
        </member>
        <member name="M:Puzzle_Solution.Solution_CCTSLN.GetPossibilities_CCTSLN(System.Char[0:,0:,0:])">
            <summary>
            This helper method will get all of the specified puzzle substring
            possibilities in the direction of Corner to Corner Top South to Lower
            North as well as the reverse direction along that line of movement.
            </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param>
        </member>
        <member name="T:Puzzle_Solution.Solution_CCTWLE">
            <summary>
            Summary description for Solution_CCTELW.
            </summary>
        </member>
        <member name="M:Puzzle_Solution.Solution_CCTWLE.GetPossibilities_CCTWLE(System.Char[0:,0:,0:])">
            <summary>
            This helper method will get all of the specified puzzle substring
            possibilities in the direction of Corner to Corner Top West to Lower
            East as well as the reverse direction along that line of movement.
            </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param>
        </member>
        <member name="T:Puzzle_Solution.Solution_NESideSWSide">
            <summary>
            Summary description for Solution_NESideSWSide.
            </summary>
        </member>
        <member name="M:Puzzle_Solution.Solution_NESideSWSide.GetPossibilities_NESideSWSide(System.Char[0:,0:,0:])">
            <summary>
            This helper method will get all of the specified puzzle substring
            possibilities in the direction of North East Side to South West Side
            as well as the reverse direction along that line of movement.
            </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param>
        </member>
        <member name="T:Puzzle_Solution.Solution_NETESWLE">
            <summary>
            Summary description for Solution_NETESWLE.
            </summary>
        </member>
        <member name="M:Puzzle_Solution.Solution_NETESWLE.GetPossibilities_NETESWLE(System.Char[0:,0:,0:])">
            <summary>
            This helper method will get all of the specified puzzle substring
            possibilities in the direction of North East Top Edge to South West Lower Edge
            as well as the reverse direction along that line of movement.
            </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param>
        </member>
        <member name="T:Puzzle_Solution.Solution_NVESVE">
            <summary>
            Summary description for Solution_NVESVE.
            </summary>
        </member>
        <member name="M:Puzzle_Solution.Solution_NVESVE.GetPossibilities_NVESVE(System.Char[0:,0:,0:])">
            <summary>
            This helper method will get all of the specified puzzle substring
            possibilities in the direction of North Vertical Edge to South Vertical Edge
            as well as the reverse direction along that line of movement.
            </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param>
        </member>
        <member name="T:Puzzle_Solution.Solution_NWSideSESide">
            <summary>
            Summary description for Solution_NWSideSESide.
            </summary>
        </member>
        <member name="M:Puzzle_Solution.Solution_NWSideSESide.GetPossibilities_NWSideSESide(System.Char[0:,0:,0:])">
            <summary>
            This helper method will get all of the specified puzzle substring
            possibilities in the direction of North West Side to South East Side
            as well as the reverse direction along that line of movement.
            </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param>
        </member>
        <member name="T:Puzzle_Solution.Solution_NWTESELE">
            <summary>
            Summary description for Solution_NWTESELE.
            </summary>
        </member>
        <member name="M:Puzzle_Solution.Solution_NWTESELE.GetPossibilities_NWTESELE(System.Char[0:,0:,0:])">
            <summary>
            This helper method will get all of the specified puzzle substring
            possibilities in the direction of North West Top Edge to South East Lower Edge
            as well as the reverse direction along that line of movement.
            </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param>
        </member>
        <member name="T:Puzzle_Solution.Solution_SETENWLE">
            <summary>
            Summary description for Solution_SETENWLE.
            </summary>
        </member>
        <member name="M:Puzzle_Solution.Solution_SETENWLE.GetPossibilities_SETENWLE(System.Char[0:,0:,0:])">
            <summary>
            This helper method will get all of the specified puzzle substring
            possibilities in the direction of South East Top Edge to North West Lower Edge
            as well as the reverse direction along that line of movement.
            </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param>
        </member>
        <member name="T:Puzzle_Solution.Solution_SWTENELE">
            <summary>
            Summary description for Solution_SWTENELE.
            </summary>
        </member>
        <member name="M:Puzzle_Solution.Solution_SWTENELE.GetPossibilities_SWTENELE(System.Char[0:,0:,0:])">
            <summary>
            This helper method will get all of the specified puzzle substring
            possibilities in the direction of South West Top Edge to North East Lower Edge
            as well as the reverse direction along that line of movement.
            </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param>
        </member>
        <member name="T:Puzzle_Solution.Solution_TOPBOTTOM">
            <summary>
            Summary description for Solution_TOPBOTTOM.
            </summary>
        </member>
        <member name="M:Puzzle_Solution.Solution_TOPBOTTOM.GetPossibilities_TOPBOTTOM(System.Char[0:,0:,0:])">
            <summary>
            This helper method will get all of the specified puzzle substring
            possibilities in the direction of Top Side to the Bottom Side
            as well as the reverse direction along that line of movement.
            </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param>
        </member>
        <member name="T:Puzzle_Solution.Solution_WVEEVE">
            <summary>
            Summary description for Solution_WVEEVE.
            </summary>
        </member>
        <member name="M:Puzzle_Solution.Solution_WVEEVE.GetPossibilities_WVEEVE(System.Char[0:,0:,0:])">
            <summary>
            This helper method will get all of the specified puzzle substring
            possibilities in the direction of West Vertical Edge to East Vertical Edge
            as well as the reverse direction along that line of movement.
            </summary>
            <param name="puzzle">Puzzle to get the substring possibilities for</param>
        </member>
    </members>
</doc>
